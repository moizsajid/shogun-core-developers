--- Log opened Mon Aug 26 00:00:31 2013
 shogun-buildbot	build #1310 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1310  blamelist: Soeren Sonnenburg <sonne@debian.org>, Kevin <kevinhughes27@gmail.com>
 shogun-buildbot	build #1521 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1521  blamelist: Kevin <kevinhughes27@gmail.com>
 shogun-buildbot	build #49 of osx1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/osx1%20-%20libshogun/builds/49  blamelist: Kevin <kevinhughes27@gmail.com>
 shogun-buildbot	build #1491 of deb2 - static_interfaces is complete: Failure [failed compile cmdline_static]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1491  blamelist: Kevin <kevinhughes27@gmail.com>
-!- iglesiasg [~iglesias@s83-179-44-135.cust.tele2.se] has quit [Quit: Ex-Chat]
-!- travis-ci [~travis-ci@ec2-23-23-19-157.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10604003
-!- travis-ci [~travis-ci@ec2-23-23-19-157.compute-1.amazonaws.com] has left #shogun []
 shogun-buildbot	build #987 of rpm1 - libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/rpm1%20-%20libshogun/builds/987  blamelist: Kevin <kevinhughes27@gmail.com>
 shogun-buildbot	build #1492 of deb2 - static_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1492  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #1606 of deb3 - modular_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1606  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #1311 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1311  blamelist: Kevin <kevinhughes27@gmail.com>
 shogun-buildbot	build #1522 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1522  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #50 of osx1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/osx1%20-%20libshogun/builds/50  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #988 of rpm1 - libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/rpm1%20-%20libshogun/builds/988  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #1312 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1312  blamelist: Soeren Sonnenburg <sonne@debian.org>
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
-!- votjakovr [~votjakovr@host-46-241-3-209.bbcustomer.zsttk.net] has left #shogun ["WeeChat 0.4.0"]
-!- pickle27 [~kevin@d67-193-243-174.home3.cgocable.net] has joined #shogun
-!- pickle27 [~kevin@d67-193-243-174.home3.cgocable.net] has left #shogun []
-!- sonne|osx_ [~sonne@g225080152.adsl.alicedsl.de] has joined #shogun
-!- sonne|osx [~sonne@f053044032.adsl.alicedsl.de] has quit [Ping timeout: 264 seconds]
-!- sonne|osx_ is now known as sonne|osx
-!- lisitsyn [~lisitsyn@109-226-90-47.clients.tlt.100megabit.ru] has left #shogun []
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 4d0b496 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/4d0b496966cc1738613b19d125cd5f66c89d5a8b
 shogun-notifier-	shogun: use octave 3.6 ppa
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * d3541f5 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/d3541f565be1caad7f9d41ffdebfe2adb546c212
 shogun-notifier-	shogun: add ppa to defaults
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * a2f7d25 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/a2f7d256385d71753f1fe99a02d7874b26df633f
 shogun-notifier-	shogun: answer "yes"
-!- sonne|osx [~sonne@g225080152.adsl.alicedsl.de] has quit [Quit: sonne|osx]
 shogun-buildbot	build #1523 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1523  blamelist: Soeren Sonnenburg <sonne@debian.org>
-!- travis-ci [~travis-ci@ec2-54-234-140-21.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10611905
-!- travis-ci [~travis-ci@ec2-54-234-140-21.compute-1.amazonaws.com] has left #shogun []
 shogun-buildbot	build #1493 of deb2 - static_interfaces is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1493
 shogun-buildbot	build #1524 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1524  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #1494 of deb2 - static_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1494  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #1495 of deb2 - static_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1495  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #1608 of deb3 - modular_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1608  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #989 of rpm1 - libshogun is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/rpm1%20-%20libshogun/builds/989
 shogun-buildbot	build #1525 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1525  blamelist: Soeren Sonnenburg <sonne@debian.org>
-!- sonne|osx [~sonne@89.204.139.45] has joined #shogun
-!- travis-ci [~travis-ci@ec2-23-23-19-157.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10611905
-!- travis-ci [~travis-ci@ec2-23-23-19-157.compute-1.amazonaws.com] has left #shogun []
 shogun-buildbot	build #1313 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1313  blamelist: Soeren Sonnenburg <sonne@debian.org>
-!- sonne|osx [~sonne@89.204.139.45] has quit [Quit: sonne|osx]
-!- travis-ci [~travis-ci@ec2-23-23-71-239.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10612388
-!- travis-ci [~travis-ci@ec2-23-23-71-239.compute-1.amazonaws.com] has left #shogun []
-!- sonne|work [~sonnenbu@91-64-72-127-dynip.superkabel.de] has joined #shogun
 shogun-buildbot	build #1607 of deb3 - modular_interfaces is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1607
-!- lisitsyn [~lisitsin@mxs.kg.ru] has joined #shogun
-!- mode/#shogun [+o lisitsyn] by ChanServ
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 5dc2eb7 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/5dc2eb773f5d30ddc20dc2cfd9d216c14b79a5ed
 shogun-notifier-	shogun: add another ppa for octave
 sonne|work	ohh man
 sonne|work	anyone on ubuntu 12.04 LTS here?
@lisitsyn	not anymore
 sonne|work	I wish travis was not using ubuntu LTS
 sonne|work	stuff is too old
@lisitsyn	sonne|work: I can install it to VM
@lisitsyn	sonne|work: should I?
 sonne|work	lisitsyn: I am just trying to install octave 3.6 w/ shogun now: http://blogs.bu.edu/mhirsch/2012/08/octave-3-6-on-ubuntu-12-04/
 sonne|work	and it fails...
@lisitsyn	sonne|work: what fails?
 sonne|work	lisitsyn: well travis
@lisitsyn	okay checking
 sonne|work	lisitsyn: no idea why it doesn't work
@lisitsyn	ValueError: No JSON object could be decoded
@lisitsyn	this one?
 shogun-buildbot	build #1314 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1314  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #1609 of deb3 - modular_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1609  blamelist: Soeren Sonnenburg <sonne@debian.org>
@lisitsyn	sonne|work: I think ppa is not working
@lisitsyn	sonne|work: https://launchpad.net/~mvanderkolff/+archive/octave-3.6 what about that ppa?
 shogun-buildbot	build #1496 of deb2 - static_interfaces is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1496
 sonne|work	lisitsyn: well no idea - it is trial and error
 shogun-buildbot	build #1526 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1526  blamelist: Soeren Sonnenburg <sonne@debian.org>
-!- thoralf [~thoralf@enki.zib.de] has joined #shogun
 thoralf	Hey.
 sonne|work	thoralf: you ubuntu 12.04 LTS?
 thoralf	Only on my old laptop, which isn't available before tomorrow.
-!- travis-ci [~travis-ci@ec2-23-23-19-157.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10614057
-!- travis-ci [~travis-ci@ec2-23-23-19-157.compute-1.amazonaws.com] has left #shogun []
-!- iglesiasg [~iglesias@2001:6b0:1:1da0:19a:206d:eb6b:cdad] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@lisitsyn	sonne|work: tapkee is in jmlr vol. 14 pages 2287-2291 :)
@lisitsyn	should be ready soon we made final corrections
 shogun-buildbot	build #1315 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1315  blamelist: Soeren Sonnenburg <sonne@debian.org>
@lisitsyn	HeikoS: https://github.com/shogun-toolbox/shogun/issues/1265
 sonne|work	lisitsyn: congrats
@lisitsyn	sonne|work: thanks
@lisitsyn	sonne|work: please take a look https://github.com/shogun-toolbox/shogun/issues/1265
@lisitsyn	sonne|work: I do not suggest to use it yet as it looks messy but it is a way
 sonne|work	lisitsyn: I think we are in trouble with swig - we would need to create %template for every getter
@lisitsyn	sonne|work: well we will have like n_of_types getters
@lisitsyn	lets say we have 10 types
@lisitsyn	so we have 10 getters and 10 setters for all possible parameters
@lisitsyn	oops
@lisitsyn	:D
@iglesiasg	lisitsyn, *minima* concrete example :P?
@iglesiasg	minimal*
@lisitsyn	iglesiasg: yes it is like what is the minimal music style to music
@lisitsyn	I mean too minimal
@lisitsyn	:D
@iglesiasg	hehe
@lisitsyn	HeikoS: iglesiasg: sonne|work: please see the latest comment https://github.com/shogun-toolbox/shogun/issues/1265
@lisitsyn	please ask me if you didn't get the idea or see so major drawback I missed
@lisitsyn	s/so/a/
@iglesiasg	lisitsyn, let me see
-!- van51 [~van51@ppp-94-66-12-14.home.otenet.gr] has joined #shogun
 sonne|work	lisitsyn: the get/set you implement in SGObject right?
@lisitsyn	sonne|work: yes
 sonne|work	van51: hey there! How is it goind?
@lisitsyn	get(Keyword<int>), get(Keyword<float>), get(Keyword<float-moat>)
 van51	sonne|work: hello!
@lisitsyn	whatever types
 van51	sonne|work: first of all I 've got some results on the lang_detection
@iglesiasg	lisitsyn, what if you try to do some_object.get/set(keywords.parameter, ...)
 sonne|work	lisitsyn: what do we do when we have say a combined kernel and want kernels as input?
 van51	sonne|work: turns out  with a larger hash size, the quadratics perform better
@iglesiasg	lisitsyn, and that some_object doesn't have that member
 sonne|work	van51: excellent!
 van51	sonne|work: I also checked a bit the misclassifications
@iglesiasg	lisitsyn, with member I mean the keywords.parameter
@lisitsyn	too many messages :D
 van51	sonne|work: and some of the sentences were trash, because they were generated randomly
@lisitsyn	sonne|work: Keyword<SGObject*>
@lisitsyn	sonne|work: I don't see the problem could you please elaborate?
@lisitsyn	iglesiasg: runtime error
 van51	sonne|work: I've also started working on RandomFourierDotFeatures
@iglesiasg	lisitsyn, it would be nicer compile time error I think, but I can live with that too
 sonne|work	lisitsyn: ok so we would do the type checking underneath? I mean if we want a CKernel we would need to do KeyWord<CKernel*> or do SGObject & checks?
@iglesiasg	maybe what I just said doesn't make sense since this is to be used from python or so...
@lisitsyn	sonne|work: I'd add checks but we can add keywords for ckernel
@lisitsyn	sonne|work: runtime error is ok too I think but there is no trouble to add a keyword that needs CKernel*
@lisitsyn	I would not add keywords for CMulticlassOCAS or whatever to reduce the number of exported keyword classes
@lisitsyn	but it is totally ok to add Keyword<CKernel*> kernel; I believe
@lisitsyn	iglesiasg: no it is possible
@lisitsyn	iglesiasg: you'd need a new class for every keyword though
@lisitsyn	:D
@lisitsyn	but you are right compile time doesn't make a lot sense as python just checks the syntax
 sonne|work	lisitsyn: so what is the overhead - I mean we currently have a lot of stuff doing e.g. range checks or so in a for loop from local parameters
@lisitsyn	sonne|work: it looks for me it is possible to make it quite fast
@lisitsyn	with hash map
@lisitsyn	we can ensure each keyword has unique hash
@lisitsyn	method dispatching is fast (compile time in java for example)
@lisitsyn	so we just have to look up for the value in map
@iglesiasg	lisitsyn, good that hash tables are already in the C++ standard
 sonne|work	van51: sounds nice. I would be interested in actual results :)
 van51	sonne|work: do you mean for the random fourier feats or for the lang detection?
 sonne|work	van51: lang
@lisitsyn	iglesiasg: finally in 2011..
@lisitsyn	iglesiasg: a bit late ain't it?
@lisitsyn	;)
@iglesiasg	lisitsyn, what?
@iglesiasg	tapkee?
@lisitsyn	iglesiasg: hash tables I mean
@lisitsyn	;)
@iglesiasg	lisitsyn, aaah ok
@iglesiasg	yeah
@lisitsyn	there were in java in 90s
 sonne|work	lisitsyn: seems like there are huge differences http://preshing.com/20110603/hash-table-performance-tests
@lisitsyn	sonne|work: between what and what?
 sonne|work	hash speed
 sonne|work	table
@lisitsyn	sonne|work: what we shouldn't use is std::map :)
@iglesiasg	indeed, unordered_map is the thing
@iglesiasg	but I mean it doesn't make sense to compare std::map and a hash table, they are just not for the same things
 sonne|work	iglesiasg: what is the difference?
@lisitsyn	sonne|work: O(ln N) vs O(1)
@iglesiasg	sonne|work, std::maps are balanced binary search trees and unordered_map is a hash table
@lisitsyn	red-black tree vs hash tree
@lisitsyn	err
@lisitsyn	hash table :D
@lisitsyn	hash tree haha
@iglesiasg	:)
@lisitsyn	iglesiasg: how does hash table work in java?
@lisitsyn	iglesiasg: interview question time
@iglesiasg	lisitsyn, haha
 van51	sonney2k: https://gist.github.com/van51/6339628
@lisitsyn	iglesiasg: what happens if the hash function is not that good? a != b but hash(a) == hash(b)?
@iglesiasg	lisitsyn, linked list
@lisitsyn	good
@lisitsyn	;)
@lisitsyn	iglesiasg: how to break a hash map in java?
@iglesiasg	not that good because I don't remember what that is called
@iglesiasg	arrch
@iglesiasg	anyway
@iglesiasg	lisitsyn, break?
@lisitsyn	iglesiasg: yeah a bit, make it incostistent may be
@iglesiasg	lisitsyn, what I find weird of hash tables in java is that you don't need to define your hash function
@lisitsyn	iglesiasg: you do need ;)
 sonne|work	van51: what is combinations again?
@iglesiasg	lisitsyn, mmm, are you sure?
@iglesiasg	IIRC there is something done by default
@lisitsyn	iglesiasg: well they are usually auto-generated
 van51	sonne|work: how many tokens/ngrams to combin
@iglesiasg	lisitsyn, exactly, that is what I mean. IMHO, that is not good, at all
 sonne|work	van51: and n-gram length?
@lisitsyn	iglesiasg: why? you write some POJO and it generates hash for you
 van51	sonne|work: for these results, 3
 sonne|work	van51: in any case ~90% is pretty okish already
@lisitsyn	iglesiasg: I had a problem with entity graph though :D
@lisitsyn	there were cycles so hash was like %infty time
 van51	sonne|work: also some sentences were trash so on that specific dataset that I've created I don't think it can go higher
@iglesiasg	lisitsyn, I have no idea how is the hash function autogenerated. But for things that are not primitive data types, I think that should not be automatically made
 sonne|work	van51: well OK it is already nice. how big is the data set?
@iglesiasg	lisitsyn, you just told me an example why :)
 sonne|work	van51: I mean if we .xz compress it - could it be stored in shogun-data?
@lisitsyn	iglesiasg: that's why in the west coast enterprise yo systems you always have some base class
@lisitsyn	I just use UUID most of the time
@iglesiasg	lisitsyn, that sounds reasonable
 van51	sonne|work: it's ~246M
 van51	sonne|work: w/o compression
 van51	sonne|work: how much is acceptable?
@lisitsyn	iglesiasg: it is tiresome to implement these hashes and equals's
@iglesiasg	lisitsyn, I tried once for my search engines course hash tables that extend to secondary disk. Cool stuff
@lisitsyn	iglesiasg: some B-tree I guess
@lisitsyn	ahh
@lisitsyn	hash table
@iglesiasg	lisitsyn, no idea how was implemented internally. I should have been curious about that back then
@lisitsyn	iglesiasg: people like B-trees when it comes to disk IO
@iglesiasg	lisitsyn, databases are commonly b-trees, right?
@lisitsyn	iglesiasg: they were (books say that) but I don't know what about now :)
@iglesiasg	good point :)
@lisitsyn	there are two guys in the same city with me that develop mysql
@lisitsyn	no idea what makes them stay here but they kind of working remotely
 sonne|work	van51: well xz -9 compress them :)
 sonne|work	van51: it should be <100MB for sure
 van51	sonne|work: compressing! I'll let you know
@iglesiasg	lisitsyn, Eigen question
@iglesiasg	lisitsyn, sqrt of a matrix. A.array().sqrt() or A.cwiseSqrt() but afterwards A remains unchanged, why?
@lisitsyn	iglesiasg: you expect some eigenanswer
@lisitsyn	hmm I think it shouldn't change anything
@lisitsyn	iglesiasg: A = A.array.sqrt()
@lisitsyn	you can try that
@iglesiasg	lisitsyn, I think I tried already, but let me check
@iglesiasg	lisitsyn, it doesn't compile
@lisitsyn	A.array()
@lisitsyn	iglesiasg: A.array() = A.array().sqrt()?
@lisitsyn	what about that/
@iglesiasg	mmm that I didn't come up with
@iglesiasg	let me see
@iglesiasg	lisitsyn, yep, that made it
@iglesiasg	lisitsyn, I got some problems with the data type though
@iglesiasg	lisitsyn, it was not working before that I was using Matrix3i or Matrix3d, but I changed to MatrixXd and it worked
@iglesiasg	let me show you what I mean
@lisitsyn	iglesiasg: Matrix3d is kind of special case I guess
 sonne|work	van51: and?
 van51	sonne|work: it's still going
 sonne|work	van51: how big is it already then?
 van51	sonne|work: 52M
@iglesiasg	lisitsyn, but doing A.array() = A.array().sqrt() is efficiently doing the stuff in place?
@iglesiasg	lisitsyn, I got the feeling that just A.array().sqrt() (wihtout the operator=) seems more efficient
 van51	sonne|work: it's done.. 57M
 sonne|work	van51: ok so that is good enough IMHO
 sonne|work	lisitsyn: heh http://www.sanmayce.com/Fastest_Hash/index.html#Yoshimura
 sonne|work	Yoshimura instead of murmur3 ;)
@iglesiasg	omg what is that
 sonne|work	iglesiasg: looks like an assembly code optimized hash function :)
@iglesiasg	people are too hardcore
 van51	sonne|work: should I place it in a new dir?
 sonne|work	van51: yes sure it is a real application..
@wiking	fuckiiiing JNI
 van51	sonne|work: got a warning from github that file exceeds 50M
 sonne|work	van51: well it is only a warning or?
 van51	sonne|work: but from what I read it should be ok, unless it needs an update
 van51	sonne|work: it pointed me here : https://help.github.com/articles/working-with-large-files
 sonne|work	van51: you could then put your application under applications/language_detection
 van51	sonne|work: ok, cool! I'll clean the code a bit first and push later
 sonne|work	van51: another hash http://burtleburtle.net/bob/hash/spooky.html
 sonne|work	van51: or https://code.google.com/p/cityhash/ :)
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
 van51	sonne|work: cityhash looks nice idd
@lisitsyn	sonne|work: that's totally crazy
@lisitsyn	unordered_map should be ok for 99% purposes
@lisitsyn	I mean its default hashing function
@lisitsyn	however you are doing some fancy things may be it would be ok here
-!- votjakovr [~votjakovr@host-46-241-3-209.bbcustomer.zsttk.net] has joined #shogun
@iglesiasg	lisitsyn, sonne|work, HeikoS: about merging the ipython notebooks. How would you like to do it? One pull request at the end once they are finished or several as we go adding more stuff
@iglesiasg	since I think this cannot really be revised as normal code I guess that maybe one pull request at the end with it is better
@lisitsyn	iglesiasg: I have no opinion on that :)
-!- van51 [~van51@ppp-94-66-12-14.home.otenet.gr] has quit [Quit: Leaving.]
-!- HeikoS1 [~heiko@nat-188-24.internal.eduroam.ucl.ac.uk] has joined #shogun
@lisitsyn	HeikoS1: !
@lisitsyn	HeikoS1: HeikoS: need comments from your side on the 'keywords' idea
 HeikoS1	lisitsyn: hi!
 HeikoS1	its bank holiday here, excuse my late appearance :)
-!- foulwall [~user@2001:da8:215:6901:11d1:4711:4290:8f68] has joined #shogun
 foulwall	/usr/local/include/c++/4.8.1/atomic:1115:57: error: expected initializer before 'noexcept'
 foulwall	     atomic_fetch_sub(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
 foulwall	                                                         ^
 foulwall	In file included from /usr/local/include/shogun/base/SGObject.h:20:0,
 foulwall	                 from /usr/local/include/shogun/io/File.h:16,
 foulwall	                 from /usr/local/include/shogun/io/HDF5File.h:18,
 foulwall	                 from library_hdf5.cpp:5:
 foulwall	/usr/local/include/shogun/lib/RefCount.h: In constructor 'shogun::RefCount::RefCount(int32_t)':
 foulwall	/usr/local/include/shogun/lib/RefCount.h:23:46: error: no matching function for call to 'std::atomic<int>::atomic(int32_t&)'
 foulwall	  RefCount(int32_t ref_start=0) : rc(ref_start) {}
 foulwall	                                              ^
 foulwall	/usr/local/include/shogun/lib/RefCount.h:23:46: note: candidate is:
 HeikoS1	foulwall: thats c++ issue
 foulwall	In file included from /usr/local/include/shogun/lib/RefCount.h:2:0,
 foulwall	                 from /usr/local/include/shogun/base/SGObject.h:20,
 HeikoS1	you have to compile with the latest c++
 foulwall	                 from /usr/local/include/shogun/io/File.h:16,
 foulwall	                 from /usr/local/include/shogun/io/HDF5File.h:18,
 foulwall	                 from library_hdf5.cpp:5:
 foulwall	/usr/local/include/c++/4.8.1/atomic:599:7: note: std::atomic<int>::atomic()
 foulwall	       atomic() noexcept = default;
 foulwall	       ^
 HeikoS1	-std=c++11
 foulwall	/usr/local/include/c++/4.8.1/atomic:599:7: note:   candidate expects 0 arguments, 1 provided
 foulwall	make: *** [library_hdf5] Error 1
 foulwall	I compile it with gcc 4.8.1
 foulwall	ok thanks HeikoS1
 HeikoS1	foulwall: add this flag
 HeikoS1	foulwall: if this is your own program, that should do it
 HeikoS1	if this is from cmake, no idea whats causing it
 foulwall	from examples/undocumented/libshogun/library_hdf5.cpp
 HeikoS1	foulwall: yes then compile with the flag
 HeikoS1	lisitsyn: cool stuff
 foulwall	thanks HeikoS:)
 HeikoS1	lisitsyn: but the global keywords are unreaslistic
 HeikoS1	could that be done with namespaces?
 HeikoS1	lisitsyn: what do you think on
 HeikoS1	https://github.com/shogun-toolbox/shogun/issues/1460#issuecomment-23235793
 votjakovr	HeikoS1: hi! The difference between our EP in combination with probit likelihood and EP from GPML is no more than 1e-3. Should i send a PR?
 HeikoS1	votjakovr: hi ah finally we meet
@lisitsyn	HeikoS1: lets talk about that
 HeikoS1	votjakovr: that should be fine, how is it against GPstuff?
@lisitsyn	HeikoS1: I need to clarify - what's unrealistic in global keywords?
 HeikoS1	lisitsyn: imagine the parameter keywork "k"
 HeikoS1	that will be used everywhere
 votjakovr	HeikoS1: i think that this is because of random
@lisitsyn	HeikoS1: you mean name clash with variables?
 HeikoS1	votjakovr: could you elaborate a bit?
 HeikoS1	lisitsyn: yes
@lisitsyn	HeikoS1: we can put them to inner scope
@lisitsyn	KNN.k
@lisitsyn	we can put them to any namespace
 HeikoS1	lisitsyn: is the KNN generated automatically?
 HeikoS1	or do people have to add that?
 votjakovr	HeikoS1: since difference between negative log marginal likelihoods is something about 1e-10
@lisitsyn	no you'd have to add that
 HeikoS1	lisitsyn: how do you see that?
 HeikoS1	is there a way to check that?
@lisitsyn	HeikoS1: to check what?
 HeikoS1	lisitsyn: so in the optimal world, devs would just have to register the parameter, and then everything else is generated automatically
 HeikoS1	votjakovr: ok, but you are also integrating differently right?
@lisitsyn	HeikoS1: this way you'd need to add a keyword if it is not here
 HeikoS1	votjakovr: maybe test another dataset to make sure that the difference is low everywhere
 votjakovr	HeikoS1: the order of the local likelihood approximations is random
 HeikoS1	votjakovr: I see
@lisitsyn	HeikoS1: I don't get the uniqueness point
 HeikoS1	lisitsyn: maybe I get it wrong
 HeikoS1	lisitsyn: could you tell me what I would have to do on writing a new class with parameter "k" ?
 votjakovr	HeikoS1: and GPML has a difference between calls on the same dataset
 HeikoS1	votjakovr: ah ok, well then this is fine
@lisitsyn	HeikoS1: define `static const Keyword k;`
@lisitsyn	and mark somehow that you will use it
 HeikoS1	lisitsyn: what if another class also has a parameter k?
 votjakovr	HeikoS1: ok, i'll send a PR
 HeikoS1	votjakovr: nice!
@lisitsyn	HeikoS1: totally ok
@lisitsyn	HeikoS1: the keyword doesn't store any value
@lisitsyn	it is just used to dispatch the type
 HeikoS1	lisitsyn: ok
 HeikoS1	lisitsyn: float k, int k, both ok?
@lisitsyn	ahh
@lisitsyn	different types?
 HeikoS1	yes
@lisitsyn	yes that's a problem
 HeikoS1	lisitsyn: also keep in mind what our goal was: That one registers a parameter once, and then getters/setters are automatically generated
@lisitsyn	well that's just name clash
@lisitsyn	HeikoS1: yes that fits the goal
 HeikoS1	so it would be best if the SG_ADD, or a similar line would do that
@lisitsyn	HeikoS1: use(keyword.k);
@lisitsyn	HeikoS1: that's how I see it
 sonne|work	iglesiasg: I prefer incremental contributions wrt notebooks
@iglesiasg	sonne|work, all right
@lisitsyn	HeikoS1: static keyword instance is just a replacement for string
@lisitsyn	but it can be used to infer the type
@lisitsyn	that's the only difference
 sonne|work	lisitsyn: sure this is more about what van51 is doing :)
@lisitsyn	sonne|work: yeah then makes sense with such a massive hashing
 HeikoS1	I am confused ;)
@lisitsyn	HeikoS1: but do you think it is a common case with float k and int k?
@lisitsyn	I mean it is much better to call it n_neighbors
 HeikoS1	lisitsyn:  I just think we should not sacrifice flexibility
 HeikoS1	lisitsyn: because currently we can do that
 HeikoS1	lisitsyn: but say this is not a problem
@lisitsyn	HeikoS1: well it is just a suggestion :)
 sonne|work	lisitsyn: do you have gcc 4.8?
@lisitsyn	sonne|work: not really
 sonne|work	foulwall: hmmhh is this the latest clone on what arch?
 HeikoS1	lisitsyn: I like it, just not sure whether I understand it
@lisitsyn	HeikoS1: what is unclear? let me explain :)
@lisitsyn	I am afraid I am losing some point so I'd like to discuss it
 HeikoS1	lisitsyn: yes cool
 HeikoS1	lisitsyn: I guess an example would be cool
 HeikoS1	where a parameter is registered
 HeikoS1	and then how to do get/set
@lisitsyn	HeikoS1:well it is not really about parameter registration
 foulwall	sonne|work: latest clone and on debian, in examples/undocument/libshogun, I add -std=C++11 in libshogun's Makefile and now it works fine
 HeikoS1	lisitsyn: I know, but thats what I dont get yet
@lisitsyn	HeikoS1: in sgobject we'd have a map<Keyword,any>
@lisitsyn	HeikoS1: so once you register parameter you add something to the map
 sonne|work	wiking: are we compiling examples with same flags like c++11 etc like libshogun?
@lisitsyn	say you call float get(Keyword<float>)
@lisitsyn	it finds the keyword, casts the any value to float
@lisitsyn	and returns it
 foulwall	sonne|work: there's no c++11 flags in libshogun's makefile
 sonne|work	foulwall: yeah but you build with cmake now right?
 HeikoS1	lisitsyn: ok
 votjakovr	HeikoS1: i've just sent it :)
 HeikoS1	lisitsyn: should we start a feature branch with that?
@lisitsyn	HeikoS1: I don't know
 HeikoS1	votjakovr: reading :)
@lisitsyn	HeikoS1: I can try
 foulwall	sonne|work: Ah, for examples I built with make. I'll try cmake
@lisitsyn	HeikoS1: it doesn't sound like a big amount of work actually
 HeikoS1	lisitsyn: that would be even better :)
@lisitsyn	HeikoS1: the issue that bothers me
@lisitsyn	and you too probably
@lisitsyn	is there to place there keywords or whatever
@lisitsyn	these keywords*
@lisitsyn	where*
@lisitsyn	:D
@lisitsyn	shit
@lisitsyn	HeikoS1: so the class scope or namespace
@lisitsyn	or globally
@lisitsyn	I don't know
@lisitsyn	class scope is bad because you write the class name too many times
@lisitsyn	namespace scope is ok but a bit messy
 HeikoS1	lisitsyn: ehm what?
@lisitsyn	global scope can lead to name clashes as people do `from modshogun import *` sometimes
@lisitsyn	HeikoS1: class scope is KNN.k
 HeikoS1	lisitsyn:  I see
@lisitsyn	by namespace scope I mean kw.k
@lisitsyn	so modshogun.kw.k
@lisitsyn	like that
 HeikoS1	no class scope should be better
 HeikoS1	dont you think?
@lisitsyn	well depends
@lisitsyn	HeikoS1: actually quite a few parameters are shared
@lisitsyn	n_neighbors, n_iters
@lisitsyn	width, etc
 HeikoS1	yep
@lisitsyn	HeikoS1: I expect it speeds up compilation
 HeikoS1	lisitsyn: thats good
 HeikoS1	lisitsyn: a question: will this allow to manually override getters/setters?
@lisitsyn	HeikoS1: but I don't know how much
 HeikoS1	lisitsyn: since the idea also was to use this for safer model-selection calls
@lisitsyn	HeikoS1: there should be a way
 HeikoS1	you know that for example one can make sure stter only accepts pos. values of an integer
@lisitsyn	HeikoS1: I think we need some 'checkers' for that
@lisitsyn	so you attach Positive checker to parameter
@lisitsyn	it is a rare case you really need something custom
-!- foulwall [~user@2001:da8:215:6901:11d1:4711:4290:8f68] has quit [Ping timeout: 264 seconds]
@lisitsyn	HeikoS1: static const Keyword<float> width("Width of gaussian kernel", positive + non_zero);
 HeikoS1	lisitsyn: no wait
 HeikoS1	the point why I suggested that originally was
 HeikoS1	that in model-selection, I can only modify the parameters directly
 HeikoS1	but sometimes, one has some post methods that need to be called or statements executed
@lisitsyn	HeikoS1: this is obvious observer pattern for me I think it can be done
 HeikoS1	lisitsyn: lets thing of an example
 HeikoS1	ah yes
 HeikoS1	Gaussian kernel
 HeikoS1	the diagonal is precomputed
@lisitsyn	we just add some NOP method that is called once parameter is changed
 HeikoS1	lisitsyn: actually, the setter does not even update it
 HeikoS1	argh
 HeikoS1	lisitsyn: ok
 HeikoS1	that would do it
@lisitsyn	HeikoS1: yeah got it
 HeikoS1	so currnetly GaussianKernel::init(lhs,rhs);GaussianKernel.set_width(other_value); GaussianKernel::get_kernel_matrix
 HeikoS1	returns wrong results
@lisitsyn	why?
 HeikoS1	ah no
 HeikoS1	precompute squared just computes dot products
 HeikoS1	sorry
@lisitsyn	HeikoS1: I think there is nothing infeasible here but good you mention it
 HeikoS1	votjakovr: I will wait for travis and then merge, good work!
 HeikoS1	lisitsyn: oh one more thing
@lisitsyn	HeikoS1: yes?
 HeikoS1	lisitsyn: is it possible for the model-selection framework to use that?
 votjakovr	HeikoS1: good :)
 HeikoS1	lisitsyn: since in there, one has only access to the registered parameters
@lisitsyn	HeikoS1: too generic question ;)
 HeikoS1	as shogun parameters
 HeikoS1	so TParameter
@lisitsyn	HeikoS1: it doesn't allow *unregistered* parameters
@lisitsyn	you just can't use it if it is not in map
 HeikoS1	lisitsyn: no I mean
 HeikoS1	from the source code, I need to call things
 HeikoS1	let me show you how I do it currently
 HeikoS1	ParameterCombination::apply_to_modsel_parameter
 HeikoS1	lisitsyn:  and then this uses Parameter::set_from_parameters
 HeikoS1	in there I even have to do a type distinction
@lisitsyn	HeikoS1: I don't really get it
 HeikoS1	the grid search iterates over all possible parameter combinations
 HeikoS1	and then applies them to SGObjects
@lisitsyn	yes
 HeikoS1	this is currently done via just copying the memory
 HeikoS1	or pointer etc
 HeikoS1	will it be possible to do this with the setters/getters?
@lisitsyn	HeikoS1: yes probably if I get what you mean
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Roman Votyakov :develop * fa3a7c9 / / (3 files): https://github.com/shogun-toolbox/shogun/commit/fa3a7c92bbd0c0e78b3b0c9d8d9f16fb69869295
 shogun-notifier-	shogun: add expectation propagation inference method
 shogun-notifier-	shogun: Heiko Strathmann :develop * 8aee21e / / (3 files): https://github.com/shogun-toolbox/shogun/commit/8aee21eed0b16d18b348976da5bb51e11fe63325
 shogun-notifier-	shogun: Merge pull request #1462 from votjakovr/feature/gp_binary_classification
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Add expectation propagation inference method
 HeikoS1	lisitsyn: though, as I said, I would totally drop grid-search
 HeikoS1	lisitsyn: the effort of using our framework is larger than doing it by hand if cross-validation is available
@lisitsyn	HeikoS1: yeah that's why I try to think how to do that better way
 HeikoS1	lisitsyn:  still
 HeikoS1	the amount of work to maintain that is just insane
 HeikoS1	and it sooo easy to do  it by hand
@lisitsyn	HeikoS1: I believe it is too low-level
@lisitsyn	pointers etc
@lisitsyn	indexes
@lisitsyn	enums
@lisitsyn	but I am not sure
 HeikoS1	lisitsyn: exactly
@lisitsyn	if it could be done better
 HeikoS1	the whole parameter tree
 HeikoS1	paramter combination
 HeikoS1	etc
 HeikoS1	lisitsyn:  I dont really see another way to do it
 HeikoS1	lisitsyn: the problem is the way how shogun parameters are registered
@lisitsyn	yeah you would do it better if you knew :)
 HeikoS1	and creating parameter data from "nowhere" is just hard
 HeikoS1	lisitsyn: also, no debugging of model-selection
 HeikoS1	remember this x-validation output class?
@lisitsyn	yes
 HeikoS1	we are lacking that for grid-search
 HeikoS1	its easy to do, but again, its effort
 HeikoS1	and if people do this by hand, its not
 HeikoS1	but later
 HeikoS1	ill fix the xml serialization for now :)
@lisitsyn	HeikoS1: alright let me think about it in background daemon
@lisitsyn	as usual
 HeikoS1	ok :)
 HeikoS1	lisitsyn: cool ideas you had though, I would love to see this happen
@lisitsyn	you may notice I disappeared for a month and then came with some idea
@lisitsyn	:D
 HeikoS1	haha :)
 HeikoS1	lisitsyn: btw do you have any idea why we use cstrings rather than string?
@lisitsyn	HeikoS1: cstrings - const char*?
 HeikoS1	yes
@lisitsyn	no idea
 HeikoS1	lisitsyn: just so dirty
@lisitsyn	we are in std haters club
 HeikoS1	haha :)
 thoralf	:D
@lisitsyn	the first rule
@lisitsyn	is never use std::
 thoralf	shogun is implemented in C with classes :)
 HeikoS1	thoralf: indeed :)
 thoralf	lisitsyn: Rule 1: Whenever you can reinvent the wheel: Do it.
@lisitsyn	HeikoS1: tech-wise we also need shared_ptr
@lisitsyn	thoralf: yes true
@lisitsyn	the wheel is not round enough
 thoralf	lisitsyn: SGVector (or better: void *) instead of std::vector
@lisitsyn	thoralf: sgvector is actually something else than std::vector now
 thoralf	lisitsyn: I know.
@lisitsyn	I hate everything about it though
@lisitsyn	all these cmaps and etc
 thoralf	lisitsyn: Elaborate?
@lisitsyn	dynamicobjectarray
@lisitsyn	or how it is called
@lisitsyn	I wish we didn't had that code
 HeikoS1	lisitsyn: go for it! kill it
 HeikoS1	remove things step by step :)
 HeikoS1	lisitsyn: we are currently on a good run to make things better, so this is another one on the list
 HeikoS1	lisitsyn: and you are the expert ;)
 thoralf	lisitsyn: I'd be happy to use a thin std::vector wrapper instead of sgvector. :)
@lisitsyn	thoralf: why?
 thoralf	lisitsyn: Just to simplify code.
 shogun-buildbot	build #1527 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1527  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>
@lisitsyn	thoralf: I'd like to see Eigen::VectorXd here
 thoralf	lisitsyn: Even better.
 thoralf	Stop.  No reinventing?  No!
@lisitsyn	thoralf: opencv uses just Mat
@lisitsyn	stupid naming but engineering wise it looks better
 HeikoS1	lisitsyn: btw we should also have a wrapper class that makes a CSGObject out of SG Types
 HeikoS1	to be able to use them in lists etc
@lisitsyn	HeikoS1: what lists?
 HeikoS1	like a list of vectors
 HeikoS1	different sized vectors
 HeikoS1	sorry
 HeikoS1	not a list
 HeikoS1	an array that dynamically grows
@lisitsyn	std::vector?
@lisitsyn	;)
 HeikoS1	lisitsyn: yes
 HeikoS1	but serializable
 HeikoS1	lisitsyn: a shogun type
@lisitsyn	ahh I have no idea about it
 HeikoS1	we could even define a wrapper class for std::vector
 thoralf	lisitsyn: Anyway, I think that SGSparse* is a good thing. :)
 HeikoS1	which IS a CSGObject
 votjakovr	HeikoS1: wow EP works much faster than Laplace!
 HeikoS1	votjakovr: really?
 HeikoS1	votjakovr: thats weird
 HeikoS1	usually its more expensive
 HeikoS1	I wonder why that is
 votjakovr	HeikoS1: yep i know, but i've tried graphical example with EP and it is subjectively faster
 HeikoS1	votjakovr: ok, well thats great then
 HeikoS1	votjakovr: we can always tune later
 HeikoS1	votjakovr: did you see my pm?
 votjakovr	HeikoS1: i think in future we could make a benchmark test and try to optimize bottlenecks
 votjakovr	HeikoS1: pm?
 HeikoS1	votjakovr: yep that would be awesome! also to have benchmarks which other people can use
 HeikoS1	votjakovr: my private message in irc
 HeikoS1	votjakovr: btw did you already start on the notebook?
 HeikoS1	I liked your graphical examples a lot
 HeikoS1	they should be in there definitely
-!- lisitsyn [~lisitsin@mxs.kg.ru] has quit [Read error: Connection reset by peer]
-!- travis-ci [~travis-ci@ec2-23-23-71-239.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10621112
-!- travis-ci [~travis-ci@ec2-23-23-71-239.compute-1.amazonaws.com] has left #shogun []
@iglesiasg	what's up with travis?
@iglesiasg	it seems that the ppa for octave change killed it
 HeikoS1	yep
 shogun-buildbot	build #1610 of deb3 - modular_interfaces is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1610
-!- lisitsyn [~lisitsin@mxs.kg.ru] has joined #shogun
 shogun-buildbot	build #992 of rpm1 - libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/rpm1%20-%20libshogun/builds/992  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>
 shogun-buildbot	build #1611 of deb3 - modular_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1611  blamelist: Roman Votyakov <votjakovr@gmail.com>
@iglesiasg	HeikoS1: is someone trying to fix that?
 HeikoS1	iglesiasg: not aware of :)
 HeikoS1	I am fixing other things currently
 shogun-buildbot	build #1316 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1316  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>
 shogun-buildbot	build #1528 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1528  blamelist: Roman Votyakov <votjakovr@gmail.com>
@iglesiasg	sonne|work, why is the second ppa for octave 3.6 added?
 sonne|work	iglesiasg: remove it - it didn't work and I cannot from work
@iglesiasg	sonne|work, ok
@iglesiasg	sonne|work,  it starts with sudo sudo add-apt instead of sudo add-apt
@iglesiasg	maybe that is the problem
 sonne|work	iglesiasg: don't think so but still a bug
@iglesiasg	yeah.. the trace looks unrelated to that, but I will try without sudo twice first just in case
 shogun-notifier-	shogun: Fernando Iglesias :develop * ebf640f / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/ebf640f341ee65b4996d8640f35570f5b3e33196
 shogun-notifier-	shogun: Remove double sudo in travis octave 3.6 second ppa.
@iglesiasg	nah, it didn't fix it
 HeikoS1	iglesiasg: please dont use "m_" as parameter names
 HeikoS1	I will change that in you LMNN class
 shogun-notifier-	shogun: Fernando Iglesias :develop * 765e145 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/765e145c23292f9cd8f8b678aaecffb330e71cf1
 shogun-notifier-	shogun: Remove octave 3.6 second ppa in travis.
@iglesiasg	HeikoS1, eeeh all right, but why not?
@iglesiasg	I think it is a good practice to diff the members somehow
 HeikoS1	thats more of a style thing for the member variables
 HeikoS1	but the variable name should be the parameter name
@iglesiasg	what do you mean?
@iglesiasg	I am just using it for the members, right?
 HeikoS1	yep
 HeikoS1	so CClass:m_k is registered as "k"
 HeikoS1	not a big thing, I just saw it
@iglesiasg	aaaah ok
@iglesiasg	just when doing SG_ADD
 HeikoS1	yes :)
@iglesiasg	not changing the name of attributes
@iglesiasg	sure :)
@iglesiasg	HeikoS1: out of curiosity, why? I mean, for what are used later these names?
@iglesiasg	I guess that for the SGObject clone is a reason
 HeikoS1	iglesiasg: just whenever the parameter is accessed written or read
 HeikoS1	also for modelselection
 HeikoS1	so simpler is better there
 HeikoS1	oh man
 HeikoS1	iglesiasg: I justed looked into the PCA class
 HeikoS1	thats pure horror
@iglesiasg	yeah, a little bit :)
@iglesiasg	it took me a little while to discover how to get the transform matrix when I wanted to use it for PCA
@iglesiasg	there were some arguments to tune and so
 HeikoS1	PCA is a three liner why is that so complicated ...grrrr
@iglesiasg	hehe yeah
 HeikoS1	but no eigen was around back then
@iglesiasg	I mean, it is good that it can be tunable, the PCA we have does extra stuff
 HeikoS1	true
@iglesiasg	but I think it could be way more readable using Eigen and still keeping those functionalities
 HeikoS1	iglesiasg: feel free to change :) also a unit test might be nice for such a basic thing
@iglesiasg	but at the end of the day, it works just fine so I am not sure to the point it pays off to do it
@iglesiasg	HeikoS1, unit test is a good idea indeed
@iglesiasg	HeikoS1: BTW, we should set up a shogun-team meeting for the NIPS workshop
 HeikoS1	iglesiasg: yep totally
 HeikoS1	wiking is the guy to do :)
 shogun-buildbot	build #993 of rpm1 - libshogun is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/rpm1%20-%20libshogun/builds/993
 shogun-buildbot	build #1529 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1529  blamelist: Fernando Iglesias <fernando.iglesiasg@gmail.com>
@iglesiasg	I don't mind setting up the doodle, I will do it this evening probably
-!- pickle27 [~kevin@d67-193-243-174.home3.cgocable.net] has joined #shogun
 lisitsyn	HeikoS1: I thought you wanted to go? ;)
 lisitsyn	it can be any of us though, I know I am off
-!- HeikoS1 [~heiko@nat-188-24.internal.eduroam.ucl.ac.uk] has quit [Ping timeout: 245 seconds]
@wiking	HeikoS: ?
-!- HeikoS1 [~heiko@nat-188-24.internal.eduroam.ucl.ac.uk] has joined #shogun
@wiking	ah yeah the meeting
@iglesiasg	yeah
@wiking	i'll send around a doodle today
@iglesiasg	cool!
* wiking is a bit busy today with errands... no commits today :P
@iglesiasg	wiking, I am excited about this NIPS thing, it would be cool if we can do something for it
@wiking	yeah indeed
@iglesiasg	wiking, we have been mistreating travis :-O
@wiking	iglesiasg: heheh i saw...
@wiking	fixit :)
@iglesiasg	it seems to be fine again though
@iglesiasg	oh no fuck
 HeikoS1	tada
 HeikoS1	XML serialization is lossy
@wiking	iglesiasg: it's fine... i've restarted the job... it was just some randome
@wiking	error ;P
@iglesiasg	wiking, yes, MulticlassOCASTest.train, it is not the first time it fails I think mm
@wiking	yeah
@wiking	that unittest should be a bit modified + random seed should be fixed imho
 shogun-notifier-	shogun: Heiko Strathmann :feature/SerialUTests * 2741b0c / src/shogun/ (7 files): https://github.com/shogun-toolbox/shogun/commit/2741b0c8c10e49012fa51a6485387f2f506ba51a
 shogun-notifier-	shogun: removed spaces from parameter names that are registered
 shogun-notifier-	shogun: Heiko Strathmann :feature/SerialUTests * e11517f / src/shogun/base/Parameter.cpp: https://github.com/shogun-toolbox/shogun/commit/e11517f0012428b96614094cd3a56ddcf20342af
 shogun-notifier-	shogun: only allow alnum and underscore for registered parameter names
 shogun-notifier-	shogun: Heiko Strathmann :feature/SerialUTests * 9759434 / tests/unit/io/SerializationXML_unittest.cc.jinja2: https://github.com/shogun-toolbox/shogun/commit/97594343003d94a63293737877a0135a2dbeee01
 shogun-notifier-	shogun: introduce accuracy for xml serialization equal tests
 shogun-notifier-	shogun: Heiko Strathmann :feature/SerialUTests * a022433 / tests/unit/CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/a0224338eabf701264a66dfd9b0551de00b8871a
 shogun-notifier-	shogun: activate XML serialization since it works
 HeikoS1	wiking: XML works!
 HeikoS1	wiking: json last one
 shogun-buildbot	build #1317 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1317  blamelist: Roman Votyakov <votjakovr@gmail.com>
-!- travis-ci [~travis-ci@ec2-23-23-19-157.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Fernando Iglesias's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10622771
-!- travis-ci [~travis-ci@ec2-23-23-19-157.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Roman Votyakov :develop * 3171861 / / (4 files): https://github.com/shogun-toolbox/shogun/commit/31718619c67e1c5543305c1add80b613fbdf68cf
 shogun-notifier-	shogun: add expectation propagation to modular interfaces
 shogun-notifier-	shogun: Heiko Strathmann :develop * a447d63 / / (4 files): https://github.com/shogun-toolbox/shogun/commit/a447d636d7cc5bd1233076d90cb6d8ebbc91211b
 shogun-notifier-	shogun: Merge pull request #1463 from votjakovr/feature/gp_binary_classification
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Add expectation propagation to modular interfaces
-!- pickle27 [~kevin@d67-193-243-174.home3.cgocable.net] has left #shogun []
-!- thoralf [~thoralf@enki.zib.de] has quit [Read error: Connection reset by peer]
-!- thoralf [~thoralf@enki.zib.de] has joined #shogun
 thoralf	Yo.
 HeikoS1	yoyo
 thoralf	:)
 thoralf	yolo
 HeikoS1	krkr ;)
 thoralf	HeikoS1: I don't speak russian. ;)
 HeikoS1	haha :D
 shogun-buildbot	build #1530 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1530  blamelist: Fernando Iglesias <fernando.iglesiasg@gmail.com>
 votjakovr	HeikoS1: what system is used on travis-ci? I'd like to enable nlopt package on travis-ci, since gradient model selection depends on it.
 HeikoS1	votjakovr: best ask wiking for that, I think you can just sudo-apt get install the usual stuff
 HeikoS1	have a look how we do it for eigen etc
@wiking	votjakovr: is nlopt available as ubuntu package?
@wiking	votjakovr: i'm afraid that it's only available in raring http://packages.ubuntu.com/raring/libnlopt-dev
 votjakovr	wiking: yep, since 12.10
@wiking	votjakovr: yeah and travis-ci is not 12.10
@wiking	it's like 12.04
@wiking	so you have to write a bundle script for it
@wiking	see cmake/external/
 votjakovr	wiking: ok, thanks, i'll do it like there :)
@wiking	and try to write a patch accordingly
@wiking	bundle it as a static lib
@wiking	so just write it send a PR tag me and i'll review it
 lisitsyn	thoralf: russian sounds a bit different ;)
 votjakovr	wiking: ok, thanks
 thoralf	lisitsyn: Yeah.  From chinese perspective japanese is different.  From european it's not. ;)
-!- lambday [67157f4c@gateway/web/freenode/ip.103.21.127.76] has joined #shogun
 lisitsyn	thoralf: iglesiasg had to listen russian quite a lot in berlin :D
@iglesiasg	haha not that much :P
 lisitsyn	iglesiasg: all the time you walked with us barbarians
 HeikoS1	can anyone help me compiling with json?
 lisitsyn	iglesiasg: oh I remember the FBI thing
@iglesiasg	lisitsyn, barbarians? I wouldn't say that taking into account the Russian embassy in Berlin hehe
 HeikoS1	what do I need to pass to my program compiler if I used Cmake to fetch it?
@iglesiasg	HeikoS1, do you need to give an argument to cmake?
-!- travis-ci [~travis-ci@ec2-23-23-71-239.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Fernando Iglesias's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10622920
-!- travis-ci [~travis-ci@ec2-23-23-71-239.compute-1.amazonaws.com] has left #shogun []
 lisitsyn	iglesiasg: hahah yes it takes a half of under den linden
@iglesiasg	HeikoS1, in that case, have you tried taking a look using ccmake?
 HeikoS1	so I told cmake to bundle json
 HeikoS1	and now I have a little .cpp file that I would like to compile against shogun with json
 HeikoS1	so the unit tests work with it
 HeikoS1	but I would like to compile my own program
@iglesiasg	-l shogun?
@iglesiasg	maybe you need to include a directory using -L
@iglesiasg	if I remember correctly I needed to use -L from the moment we switched to cmake
 shogun-buildbot	build #1612 of deb3 - modular_interfaces is complete: Failure [failed test ruby_modular]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1612  blamelist: Fernando Iglesias <fernando.iglesiasg@gmail.com>
 HeikoS1	so first weird thing is that HAVE_JSON is 0
 HeikoS1	so I manually set it to 1
 HeikoS1	then I added -I path/to/json
 HeikoS1	and -ljson
 HeikoS1	how do I again tell the compiler where the lib is?
 HeikoS1	l L ?
 HeikoS1	-L?
@iglesiasg	-L for the path to the dir where the lib is, yes
@iglesiasg	and then -l for the lib
 HeikoS1	but it is in a std place
 HeikoS1	:/
@iglesiasg	HeikoS1, but if HAVE_JSON is 0, it sounds like shogun didn't compile JSON stuff
 HeikoS1	mmh
 HeikoS1	lets see
 HeikoS1	iglesiasg: the unit tests with json run
@iglesiasg	mmmm I think that is a bit weird :)
@iglesiasg	are they guarded with HAVE_JSON?
 HeikoS1	maybe ill use my local json
 HeikoS1	since i have it installed
 HeikoS1	so recompiling
 shogun-buildbot	build #1318 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1318  blamelist: Fernando Iglesias <fernando.iglesiasg@gmail.com>
 HeikoS1	wiking: is cmake done with json?
 HeikoS1	seems that there are some weird things going on
 HeikoS1	mmh on the other hand the unit tests are running ...
 HeikoS1	ah confused
-!- foulwall [~user@2001:da8:215:c252:39e3:9dc6:650c:106a] has joined #shogun
 foulwall	ls
-!- lisitsyn [~lisitsin@mxs.kg.ru] has quit [Quit: Leaving.]
 shogun-buildbot	build #1501 of deb2 - static_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1501  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Roman Votyakov <votjakovr@gmail.com>
 shogun-buildbot	build #1614 of deb3 - modular_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1614  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Roman Votyakov <votjakovr@gmail.com>
 shogun-buildbot	build #1613 of deb3 - modular_interfaces is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1613
 shogun-buildbot	build #1531 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1531  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Roman Votyakov <votjakovr@gmail.com>
 votjakovr	HeikoS1: how accurately should be an estimate value of marginal likelihood with num_importance_samples=10000? i have the difference less than 1e-3 for EP. Is it ok?
-!- thoralf [~thoralf@enki.zib.de] has quit [Quit: Konversation terminated!]
 votjakovr	HeikoS1: in contrast difference for Laplace approximation is something about 1e-1
 votjakovr	HeikoS1: i played a little bit with your InferenceMethod.get_log_ml_estimate_binary_logit_laplace unit test :)
 shogun-buildbot	build #1319 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1319  blamelist: Fernando Iglesias <fernando.iglesiasg@gmail.com>
 HeikoS1	votjakovr: hi sorry I was out for some food
 HeikoS1	votjakovr: the EP should converge faster than the laplace
 HeikoS1	votjakovr: the number of samples one needs to get an accurate estimate depends on the dimension of the GP
 HeikoS1	so for more data points, once needs a larger number
 HeikoS1	votjakovr: its good to hear that the EP does a better job, this means less samples needed
 HeikoS1	although the sampling should not be too expensive, if you look at the code, youll see it
 HeikoS1	computing the approximation is more expensive
 HeikoS1	votjakovr: btw
 HeikoS1	there is *no* way of computing the exact marginal likelihood
 HeikoS1	so no comparison
 HeikoS1	you are comparing to an approximation
 votjakovr	HeikoS1: yeah
 HeikoS1	the sampling is the only way to get an exact estimate
 HeikoS1	the cool thing it allows to sample from the marginal posterior over the hyperparameters
 HeikoS1	which is useful for model-selection the Bayesian way (not single point estimates but averaging over distributions)
 votjakovr	HeikoS1: yep, i know :)
 HeikoS1	votjakovr: if you are interested, we can add methods for that to shogun later this year
 votjakovr	HeikoS1: something like mcmc?
 HeikoS1	votjakovr: well that is a lot of work (though I am also planning doing that=
 HeikoS1	but for now I meant just given one has samples, average predictions over them
 HeikoS1	so monte carlo integration
 HeikoS1	then, sampling can work with that
 HeikoS1	mcmc is a big thing with many options
 HeikoS1	so not that easy to offer black-box methods there
 HeikoS1	but it is possible
 HeikoS1	mcmc might be a gsoc project next year
 votjakovr	HeikoS1: cool :)
-!- votjakovr [~votjakovr@host-46-241-3-209.bbcustomer.zsttk.net] has quit [Quit: WeeChat 0.4.0]
-!- pickle27 [~kevin@d67-193-243-174.home3.cgocable.net] has joined #shogun
 shogun-buildbot	build #1320 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1320  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Roman Votyakov <votjakovr@gmail.com>
-!- travis-ci [~travis-ci@ec2-174-129-166-170.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10624218
-!- travis-ci [~travis-ci@ec2-174-129-166-170.compute-1.amazonaws.com] has left #shogun []
-!- foulwall` [~user@2001:da8:215:c252:3025:2d13:68db:4199] has joined #shogun
 lambday	HeikoS1: there?
-!- foulwall [~user@2001:da8:215:c252:39e3:9dc6:650c:106a] has quit [Ping timeout: 264 seconds]
 HeikoS1	lambday: yes, hi!
 lambday	just got your mail
 lambday	umm...so far I remember, it was an warning, right?
 lambday	or I put error :-/
 HeikoS1	lambday: ah yes, I am currently trying to fix json serialization tests
 lambday	HeikoS1: I am not too sure but I think we can't serialize for complex with json...had some trouble
 HeikoS1	lambday: cant we just make two floats?
 HeikoS1	I remember now :)
 lambday	yes
 lambday	but it was left that time...
 HeikoS1	I see
 lambday	as in, if someone needs this, then only we'll add support
 HeikoS1	ok dont worry too much, just keep in mind to fix it
 HeikoS1	it breaks serialization tests
 lambday	and now is the time
 HeikoS1	yep :D
 lambday	alright
 lambday	:D
 lambday	oh and matrix power's sparsity pattern works fine
-!- van51 [~van51@ppp-94-66-12-14.home.otenet.gr] has joined #shogun
 lambday	just added a unit test
 lambday	now finishing the probing sampler unit test
 HeikoS1	hey, cool!
 lambday	then will send PR
 HeikoS1	cool, how long does the graph colouring take?
 lambday	haven't tested that yet :-/
 lambday	only testing with small ones till now
 lambday	with them its pretty fast
 HeikoS1	ok
 HeikoS1	really curious
 HeikoS1	for the ozone matrix
 lambday	yes once I add the unit-test then will try with the ozone one
 HeikoS1	I am excited :)
 lambday	HeikoS1: so, there are these distance-1 distance-2 colorings and various coloring methods, I am setting them as params
 lambday	don't wanna make it fixed
 shogun-notifier-	shogun: Heiko Strathmann :feature/SerialUTests * e48b2b4 / tests/unit/io/ (2 files): https://github.com/shogun-toolbox/shogun/commit/e48b2b43c7667f12e6538e9808e21aaeeeb6c8fd
 shogun-notifier-	shogun: added accuracy for template classes
 shogun-notifier-	shogun: Heiko Strathmann :feature/SerialUTests * 0610fb9 / tests/unit/io/SerializationJSON_unittest.cc.jinja2: https://github.com/shogun-toolbox/shogun/commit/0610fb952688155bcf938f386c45ac693e175ac0
 shogun-notifier-	shogun: json seems to have a low accuracy
 shogun-notifier-	shogun: Heiko Strathmann :feature/SerialUTests * 92f01a9 / tests/unit/CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/92f01a96b686120c2c158928b20326101df07e8f
 shogun-notifier-	shogun: activate json since most things are working
 shogun-notifier-	shogun: Heiko Strathmann :feature/SerialUTests * 3602ec7 / src/shogun/io/SerializableJsonFile.cpp: https://github.com/shogun-toolbox/shogun/commit/3602ec74749d86ec71d6af711a969d34b71f16c2
 shogun-notifier-	shogun: replace warning by error since otherwise shogun runs into uninitialized memory problems
 HeikoS1	lambday: thats good
 HeikoS1	lambday: we can experiment with that
 HeikoS1	we basically just need *a* colouring
 HeikoS1	in my experiments I used to compute it once and then even fix, even if the matrix changed
 lambday	alright
 lambday	we'll have default values for them, but keeping the option to experiment later on might be good :)
 HeikoS1	lambday: totally, we can experiment ourselves and then change the default values
@wiking	HeikoS1: i would ditch the json serialization
 HeikoS1	wiking: why?
@wiking	HeikoS1: and go with msgpack or avro
 HeikoS1	wiking: btw accuracy is 1e-6
@wiking	HeikoS1: because that's some homemade hack
@wiking	HeikoS1: instead of using some standard stuf
@wiking	f
 HeikoS1	wiking: up for that
 HeikoS1	sonney2k wrote that not so long ago
 HeikoS1	wiking: feel free to remove I dont object
 HeikoS1	wiking: all other things are working now
 HeikoS1	so branch ready to merge once this is done
 HeikoS1	wiking: json is used by many languages though
 HeikoS1	ipython for example
@wiking	HeikoS1: yes
 HeikoS1	but yeah as said, I am happy to drop things
@wiking	HeikoS1: but it cannot be used as it is now
@wiking	in any other parts
@wiking	because one would need to know how to deserialize
 HeikoS1	wiking: really? that sounds really nice
 HeikoS1	haha,
 HeikoS1	so then lets delete it
@wiking	i mean json is just a syntax
@wiking	one needs to know how to deserialize it
@wiking	and at least msgpack and avro is out there already for a while
@wiking	been used for a longer time now
 HeikoS1	well for that we need to write another class
@wiking	hence we really dont need to test it if it works at all
@wiking	HeikoS1: as said in my comments
@wiking	i've already started msgpack
 HeikoS1	wiking: ah well ok
 HeikoS1	then go
 HeikoS1	wiking: could you then delete the old things and update our feature branch and merge it?
 HeikoS1	since rest works
 HeikoS1	serialization though leaks memory sometimes
 HeikoS1	json also does :)
@wiking	HeikoS1: hehe ok i'll check on it later today
@wiking	i gotta fix some shit still
 HeikoS1	wiking: pretty cool with the automated tests now
 HeikoS1	was a lot work work but I think its worth it
@wiking	yeah i mean serialization is necessary
 HeikoS1	fixed a lot of bugs which would have scared of people
 HeikoS1	wiking: what do you think about different versions of shogun files?
 HeikoS1	should we support that?
 HeikoS1	or only "latest" version
@wiking	HeikoS1: well... yeah that's a good question
@wiking	but yeah let's first have one stable version ;)
 HeikoS1	wiking: the migration framework in principle is able to translate older versions
 HeikoS1	but its a horror to maintain, the code is hard to understand etc etc
 HeikoS1	I would just go for "not supported" in this case
 HeikoS1	and tell users to save their scripts so that they can re-generate their instances
 HeikoS1	if we had more people that would be feasible
 HeikoS1	I worked on that for a lot of hours and it doesnt even work now
 HeikoS1	its hard to use, everyon ignores it etc
 HeikoS1	so rather drop
@wiking	heheh indeed :)
 HeikoS1	ok thats next step after your msgpack is there
 HeikoS1	ok cool, I will stop shogunning now and do something else, let me know once the serailU brauch is merged
@wiking	HeikoS1: will do
-!- foulwall` [~user@2001:da8:215:c252:3025:2d13:68db:4199] has quit [Ping timeout: 264 seconds]
-!- sonne|osx [~sonne@89.204.135.161] has joined #shogun
-!- lisitsyn [~lisitsyn@fb2-lo1.global63.net] has joined #shogun
-!- mode/#shogun [+o lisitsyn] by ChanServ
 sonne|osx	iglesiasg: so the travis stuff works - hmhh weird but excellent :)
@iglesiasg	sonne|osx, I just removed the second ppa, so it is basically as you left it before that last commit
@iglesiasg	as you said, the sudo sudo thing didn't trigger the problem
 sonne|osx	iglesiasg: yeah but it wasn't building before
 sonne|osx	no idea
@iglesiasg	mmm I think it was, let me show you
@iglesiasg	sonne|osx, https://travis-ci.org/shogun-toolbox/shogun/builds
@iglesiasg	after the answer "yes" it was all good
-!- travis-ci [~travis-ci@ec2-174-129-166-170.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10629960
-!- travis-ci [~travis-ci@ec2-174-129-166-170.compute-1.amazonaws.com] has left #shogun []
@iglesiasg	but now we are bad again xD
@iglesiasg	there is something wrong factor graph
@iglesiasg	let's see if hushell comes and can fix it some time soon
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 64b8e3e / CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/64b8e3e9152179404ff2dea48799636807c421b9
 shogun-notifier-	shogun: improve cmake summary
 sonne|osx	iglesiasg: ohh well :)
-!- sonne|osx [~sonne@89.204.135.161] has quit [Quit: sonne|osx]
 shogun-buildbot	build #1502 of deb2 - static_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1502  blamelist: Soeren Sonnenburg <sonne@debian.org>
-!- foulwall` [~user@2001:da8:215:c252:ad2d:8912:7f6d:5445] has joined #shogun
 shogun-buildbot	build #1532 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1532  blamelist: Soeren Sonnenburg <sonne@debian.org>
 lambday	sorry I was away :(
 shogun-notifier-	shogun-data: van51 :master * f3c9732 / lang_detection/lang_dataset.dat.xz,lang_detection/lang_label.txt.xz: https://github.com/shogun-toolbox/shogun-data/commit/f3c9732a63e57a60e525d43268e1d5a6f8f874e6
 shogun-notifier-	shogun-data: Added lang_detection data
 shogun-notifier-	shogun-data: Soeren Sonnenburg :master * a48aa9c / lang_detection/lang_dataset.dat.xz,lang_detection/lang_label.txt.xz: https://github.com/shogun-toolbox/shogun-data/commit/a48aa9c34b3661a1a302dea9230feac62617ce13
 shogun-notifier-	shogun-data: Merge pull request #13 from van51/develop
 shogun-notifier-	shogun-data:
 shogun-notifier-	shogun-data: Added lang_detection data
 shogun-notifier-	shogun: Kevin :develop * cc30a5a / src/interfaces/octave_modular/swig_typemaps.i: https://github.com/shogun-toolbox/shogun/commit/cc30a5ac885fdd52ffc6228ed03fda47ea40a719
 shogun-notifier-	shogun: SGNDArray octave in typemap fix
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 2611cb1 / src/interfaces/octave_modular/swig_typemaps.i: https://github.com/shogun-toolbox/shogun/commit/2611cb1d63cc417917e81db4a75344c667ba1a75
 shogun-notifier-	shogun: Merge pull request #1465 from pickle27/develop
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: SGNDArray octave in typemap fix
-!- iglesiasg [~iglesias@2001:6b0:1:1da0:19a:206d:eb6b:cdad] has quit [Quit: Ex-Chat]
-!- foulwall` [~user@2001:da8:215:c252:ad2d:8912:7f6d:5445] has quit [Ping timeout: 245 seconds]
@sonney2k	van51, once you have cleaned up your stuff you should talk to foulwall about how to do that in a demo :)
 van51	sonney2k: sure :)
 van51	sonney2k: I tried to start it on my own, but I got lost a bit
-!- HeikoS1 [~heiko@nat-188-24.internal.eduroam.ucl.ac.uk] has quit [Quit: Leaving.]
 shogun-buildbot	build #1321 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1321  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot	build #1615 of deb3 - modular_interfaces is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1615
 van51	sonney2k: I 've made a PR about random fourier feats
 van51	sonney2k: start looking into it when you have time!
@wiking	HeikoS: gsoc meeting or shogun meeting?
@wiking	ah gsoc shogun
@wiking	ok
@lisitsyn	wiking: wedding again? ;)
@wiking	yeah
@wiking	not mine :)
 shogun-buildbot	build #1616 of deb3 - modular_interfaces is complete: Failure [failed configure]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/1616  blamelist: Soeren Sonnenburg <sonne@debian.org>, Kevin <kevinhughes27@gmail.com>
 shogun-buildbot	build #1503 of deb2 - static_interfaces is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb2%20-%20static_interfaces/builds/1503
 shogun-buildbot	build #1533 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1533  blamelist: Soeren Sonnenburg <sonne@debian.org>, Kevin <kevinhughes27@gmail.com>
-!- thoralf [~thoralf@91-64-2-67-dynip.superkabel.de] has joined #shogun
 thoralf	Heyho.
-!- van51 [~van51@ppp-94-66-12-14.home.otenet.gr] has quit [Quit: Leaving.]
@sonney2k	wiking, you serious?
@sonney2k	wiking, yours?
@sonney2k	ahh ok good :)
@lisitsyn	sonney2k: he had his in 2012 ;)
 shogun-notifier-	shogun: Thoralf Klein :develop * 6112665 / tests/unit/lib/SGSparseVector_unittest.cc: https://github.com/shogun-toolbox/shogun/commit/61126659534bf8c185f318b0c8cfc74b0d555104
 shogun-notifier-	shogun: Unit test for future changes on SGSparseVector.
 shogun-notifier-	shogun: Thoralf Klein :develop * b1e20ea / src/shogun/ (4 files): https://github.com/shogun-toolbox/shogun/commit/b1e20ea6253a02b35653dd6d2fc829ac6f0bbb1f
 shogun-notifier-	shogun: Avoid copy/malloc in SGSparseVector::sort_feature() :
 shogun-notifier-	shogun: * changed qsort_index to sort inline
 shogun-notifier-	shogun: * changed compression to work in line (and filter zero-entries)
 shogun-notifier-	shogun: * added switch "stable_pointers" to prevent re-alloc
 shogun-notifier-	shogun: * added unit-tests for new behaviour (in previous commit)
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 41d7a03 / / (5 files): https://github.com/shogun-toolbox/shogun/commit/41d7a0319758b64a507eb011e778c49c7f861ec6
 shogun-notifier-	shogun: Merge pull request #1467 from tklein23/sort_features_refactoring
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Last bit of sort_features() refactoring
@sonney2k	lisitsyn, yeah that is why :D
@sonney2k	lisitsyn, was thinking he is a serial marriage type of guy
-!- iglesiasg [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
 shogun-buildbot	build #1898 of deb1 - libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb1%20-%20libshogun/builds/1898  blamelist: Thoralf Klein <thoralf.klein@zib.de>
@wiking	sonney2k: heheheh was thinking? :))
* wiking has a deadline :S
-!- iglesiasg [~nando@s83-179-44-135.cust.tele2.se] has quit [Read error: Connection reset by peer]
 shogun-buildbot	build #1322 of cyg1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cyg1%20-%20libshogun/builds/1322  blamelist: Soeren Sonnenburg <sonne@debian.org>, Kevin <kevinhughes27@gmail.com>
-!- iglesiasg [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@wiking	iglesiasg lisitsyn  HeikoS up for tomorrow's early meeting? :)
@lisitsyn	early is?
@wiking	mmmm check doodle
@lisitsyn	12 UTC?
@wiking	10-2 CET
@iglesiasg	wiking, was going to check right now
@lisitsyn	waaat?
@iglesiasg	but yeah, sure
@wiking	lisitsyn: not that long
@wiking	lisitsyn: anytime between that
@lisitsyn	what is CET
@lisitsyn	;D
@wiking	central european time
@wiking	GMT+2 atm
@lisitsyn	GMT+1?
@wiking	i thnk
@lisitsyn	agh shit
@wiking	mmm CEST
@wiking	it's now powersaving mode
@wiking	so i guess it's GMT+2
@lisitsyn	I hate time zones
@lisitsyn	hate hate
@wiking	lisitsyn: UTC/GMT +2 hours
@lisitsyn	so it should be 12-14 for me
@wiking	should be 12-4 yeah
@wiking	anytime between that
@lisitsyn	okay I am ok
@wiking	put on doodle which interval is good for ya
@lisitsyn	let me put it
@sonney2k	lisitsyn, GMT+2 I know that for sure. I only ever work w/ UTC
@lisitsyn	sonney2k: I jump from gmt+4 to gmt+5 back and forth all the time
@lisitsyn	due to mind disabled government
@lisitsyn	:D
@lisitsyn	so this makes me hate it more and more
-!- hushell [~hushell@c-98-232-178-161.hsd1.or.comcast.net] has joined #shogun
@wiking	sonney2k: server status? comment on msgpack? :D
@sonney2k	who is batman?
@sonney2k	wiking, msgpack?
@sonney2k	wiking, server still no news.. waiting for action
-!- iglesiasg is now known as batman_
@sonney2k	wiking, messagepack? sure feel free to write another reader/writer. All you have to do is supply a SerializableReader/Writer
@wiking	sonney2k: i know ... i was just thnking that since we have some problems with json itself... why not switch to some more standard lib...
@wiking	and drop the native json serialization
@sonney2k	wiking, well we are not forced to use json and it is good to have
@sonney2k	wiking, well json is a standard many people use
@sonney2k	yes it has flaws
@sonney2k	but java/.js web-people use it
@wiking	yeah but that's why i'm saying that let's use a lib for that
@wiking	like msgpack
@wiking	or avro
-!- batman_ is now known as iglesiasg
@sonney2k	wiking, not sure avro would work? Doesn't it need static schemas?
@wiking	sonney2k: autogen them? :)
 shogun-buildbot	build #1899 of deb1 - libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb1%20-%20libshogun/builds/1899  blamelist: Soeren Sonnenburg <sonne@debian.org>, Thoralf Klein <thoralf.klein@zib.de>
 thoralf	sonney2k: Damn.  I'm already using c++11 in my tests, but this buildbot isn't.
 thoralf	sonney2k: How do you handle this usually?  ifndef xxx?
@sonney2k	thoralf, yes
-!- lambday [67157f4c@gateway/web/freenode/ip.103.21.127.76] has quit [Ping timeout: 250 seconds]
 hushell	Did you get this error? tests/unit/lib/SGSparseVector_unittest.cc:215:73: warning: '>>' operator will be treated as two right angle brackets in C++0x [-Wc++0x-compat]
 thoralf	hushell: Its my fault.
 thoralf	hushell: Your compiler does not know c++09/c++11?
 hushell	thoralf: I think it should support, I am using g++4.6
 hushell	thoralf: I haven't fetch for few days. It works fine before
 thoralf	hushell: Do a checkout of something before the last merge. ;)
 thoralf	sonney2k, wiking: How can I disable c++11 while building?  I'd like to test my changes locally...
@wiking	thoralf: :D
 hushell	thoralf: Maybe you edit SET(HAVE_CXX11 0) in CMakeLists.txt
@sonney2k	thoralf, ask wiking he is the god of hell fire
 thoralf	hushell: Hmm... but then I also would need to remove the appended options from CXX_FLAGS.
* thoralf removed the whole block from CMakeLists.txt
 thoralf	Should work for now. :D
@sonney2k	thoralf, heh
@sonney2k	I totally don't get why some stuff in cmake cannot be -DTURNED_OFF=TRUE!
 thoralf	sonney2k: god of hell fire?  sounds like Prodigy or sth similar?
@lisitsyn	F-G INSTIGATOR
@lisitsyn	I AM FIRESTARTER
@lisitsyn	thoralf: the songs of my childhood!
 thoralf	Prodigy: Fire/jericho: "I am the god of Hell fire, and I bring you (fire)" :D
@sonney2k	thoralf, can you fix the test quickly or shall I?
 thoralf	sonney2k: I'm on it.  Will take a big unless I fix it by nesting two tests with #ifndef ...
 thoralf	s/bit/bit/
@sonney2k	thoralf, well you can just do > > (space!) and all good
@sonney2k	no need to ifdef
 thoralf	sonney2k: No, it's also about the use of auto and "extended initializers".
 thoralf	sonney2k: I tried insering spaces and it raised many new errors. ;)
@iglesiasg	pickle27, did you find many attacks to the English language in the notebook? :)
 pickle27	iglesiasg: I don't think so, I read mainly for content, do you want me to read it again for language?
@sonney2k	thoralf, you!
@sonney2k	hmmhh
@sonney2k	the cygwin stuff runs fine from cmdline
@sonney2k	no idea why it crashes w/ the buildbot
@sonney2k	wiking, running the installer for visual studio express on the bb now
-!- iglesiasg [~nando@s83-179-44-135.cust.tele2.se] has quit [Ping timeout: 268 seconds]
@sonney2k	why does this need 5GB?
 thoralf	sonney2k: https://github.com/shogun-toolbox/shogun/pull/1468 - but we should wait for travis.  I removed the tests, but I'm working on a real fix.
* sonney2k is going to regret this
* thoralf fell in love with c++09/11's "auto" type declaration - and now has to remove it.
 thoralf	What a pity!
-!- travis-ci [~travis-ci@ec2-107-22-100-33.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/10636281
-!- travis-ci [~travis-ci@ec2-107-22-100-33.compute-1.amazonaws.com] has left #shogun []
-!- votjakovr [~votjakovr@host-46-241-3-209.bbcustomer.zsttk.net] has joined #shogun
@sonney2k	microsoft visual studio express is loading user settings ... this may take a few minutes
@sonney2k	express!
@sonney2k	man once installed it wants to update itself
@sonney2k	brilliant technology
@sonney2k	wiking, now this crap is installed - so now what?
@lisitsyn	hahahaha
@lisitsyn	sonney2k: I guess you are cmaking stuff - just generate cmake project
@lisitsyn	err
@lisitsyn	VS project I mean
@HeikoS	wiking, around
@HeikoS	wiking, I can do until 1130 cest tomorrow
@HeikoS	wiking, so 10 start would be good for me. 9 is too early
@HeikoS	1030 even better
@HeikoS	So exactly the hour in between
@HeikoS	The two existing ones
 shogun-notifier-	shogun: Thoralf Klein :develop * a01097d / tests/unit/lib/SGSparseVector_unittest.cc: https://github.com/shogun-toolbox/shogun/commit/a01097da3f42b4e2a0f8e8bddc78d14c6b7b3ed0
 shogun-notifier-	shogun: Removed two big unit tests to fix the build.  (Used too many c++09/11 features like "auto" and extended initializers.)
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 4e3362c / tests/unit/lib/SGSparseVector_unittest.cc: https://github.com/shogun-toolbox/shogun/commit/4e3362c82d68b9c7fafea6879db2c1a7da9bf63d
 shogun-notifier-	shogun: Merge pull request #1468 from tklein23/build_hotfix
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Removed two unit tests to fix the build...
 shogun-buildbot	build #1534 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/1534  blamelist: Soeren Sonnenburg <sonne@debian.org>
-!- iglesiasg [~Fernando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@iglesiasg	pickle27: nah, checking for language sounds too boring, I guess it is at least understandable which is the idea :)
--- Log closed Tue Aug 27 00:00:32 2013
