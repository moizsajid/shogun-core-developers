--- Log opened Sun May 20 00:00:40 2012
-!- blackburn [~blackburn@188.122.250.167] has quit [Ping timeout: 252 seconds]
-!- hoijui [~hoijui@dslb-088-074-103-131.pools.arcor-ip.net] has joined #shogun
-!- shogun-buildbot [~shogun-bu@7nn.de] has quit [Quit: buildmaster reconfigured: bot disconnecting]
-!- shogun-buildbot [~shogun-bu@7nn.de] has joined #shogun
-!- gsomix [~gsomix@85.26.233.110] has joined #shogun
 gsomix	hi all
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- Francis_Chan [~Adium@59.108.60.58] has joined #shogun
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Ping timeout: 265 seconds]
-!- blackburn [~blackburn@188.122.250.167] has joined #shogun
-!- gsomix [~gsomix@85.26.233.110] has quit [Ping timeout: 265 seconds]
-!- pluskid [~pluskid@li164-218.members.linode.com] has joined #shogun
-!- Francis_Chan [~Adium@59.108.60.58] has quit [Quit: Leaving.]
-!- hoijui [~hoijui@dslb-088-074-103-131.pools.arcor-ip.net] has quit [Quit: Leaving]
-!- Francis_Chan [~Adium@58.194.224.108] has joined #shogun
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Client Quit]
 CIA-113	shogun: Soeren Sonnenburg master * rda70cf4 / (133 files in 19 dirs): Split up CLabels into various classes: - http://git.io/SwXTmQ
 blackburn	oh my gosh
 blackburn	sonney2k: dense?
 blackburn	is there sparse?
 shogun-buildbot	build #954 of libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/libshogun/builds/954  blamelist: sonne@debian.org
-!- vikram360 [~vikram360@117.192.174.108] has quit [Ping timeout: 250 seconds]
-!- vikram360 [~vikram360@117.192.188.28] has joined #shogun
 pluskid	blackburn: the new commits on CLabels splits seem to broke your recent DAMCLibLinear
 blackburn	pluskid: heh yes I know
 blackburn	working on it
 pluskid	cool thanks!
 pluskid	waiting for your quick fix to make the code compile again
 blackburn	here it comes
 CIA-113	shogun: Sergey Lisitsyn master * r788043e / (4 files in 2 dirs): Fixed compilation of DA MC Liblinear - http://git.io/lEuSMw
 blackburn	pluskid: should work now
 pluskid	thanks!
 blackburn	lets check if it is working still
 shogun-buildbot	build #955 of libshogun is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/libshogun/builds/955
 shogun-buildbot	build #853 of r_static is complete: Failure [failed test_1]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/r_static/builds/853  blamelist: blackburn91@gmail.com
 shogun-buildbot	build #874 of cmdline_static is complete: Failure [failed test_1]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/cmdline_static/builds/874  blamelist: blackburn91@gmail.com
-!- cronor [~cronor@e178177086.adsl.alicedsl.de] has joined #shogun
 shogun-buildbot	build #763 of octave_static is complete: Failure [failed test_1]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/octave_static/builds/763  blamelist: blackburn91@gmail.com
-!- pluskid [~pluskid@li164-218.members.linode.com] has quit [Ping timeout: 244 seconds]
 shogun-buildbot	build #840 of python_static is complete: Failure [failed test_1]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/python_static/builds/840  blamelist: blackburn91@gmail.com
-!- pluskid [~pluskid@111.120.55.200] has joined #shogun
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
 n4nd0	wow CLabels commit!
 n4nd0	I feel like a child in Christmas Day :D
 blackburn	hah
-!- blackburn [~blackburn@188.122.250.167] has quit [Ping timeout: 240 seconds]
@sonney2k	pluskid, any chance that you can drop using the std stuff in http://shogun-toolbox.org/buildbot/builders/libshogun/builds/955/steps/compile/logs/warnings%20%283%29 and fix the warnings?
@sonney2k	I know this is all religious std vs SGVector & stuff but hmmhh maybe you don't mind
@sonney2k	(too much)
@sonney2k	n4nd0, ok so we have a CLabels base class that should work with you SO framework...
@sonney2k	and pluskid you were right most of the effort is really in changing the whole system - splitting things up. I think I will need help from everyone to get things fully stable
 CIA-113	shogun: iglesias master * r27dd267 / src/shogun/classifier/QDA.h : + little doc QDA #418 - http://git.io/Unz_2g
 CIA-113	shogun: iglesias master * r21a5be9 / src/shogun/classifier/QDA.cpp : ~ change qda parameters->add to SG_ADD - http://git.io/DhFzTA
 CIA-113	shogun: Soeren Sonnenburg master * r0fbded0 / (src/shogun/classifier/QDA.cpp src/shogun/classifier/QDA.h): Merge pull request #533 from iglesias/qda - http://git.io/eG1_0Q
 CIA-113	shogun: Chiyuan Zhang master * rbf4e97f / (2 files): Added Margin Loss Decoder - http://git.io/drt5Kw
 CIA-113	shogun: Chiyuan Zhang master * r3fe856d / (2 files): Added modular interface for LLB Decoder - http://git.io/3NcPIQ
 CIA-113	shogun: Soeren Sonnenburg master * r6f79da5 / (4 files in 2 dirs): Merge pull request #534 from pluskid/multiclass-ecoc - http://git.io/a3n6zA
 pluskid	sonney2k: OK, I'll fix the warnings, but replace the std stuff with SG stuff is a bit non-trivial here because the use of std::set is rather heavy here. I can try to change things here at my best, but I think this would be at a lower priority
@sonney2k	pluskid, could you use shogun's set?
@sonney2k	the one from gsomix?
 pluskid	SGSet?
 pluskid	I'll look at it
@sonney2k	argh gtg
 n4nd0	sonney2k: yeah, I am adapting what I have so far to the new labels interface, thank you!
 pluskid	n4nd0: I'm afraid we should make everything runs again before we move on
 pluskid	for example, modular examples are broken
 n4nd0	pluskid: aham, too bad
 n4nd0	pluskid: I am going to take a look to them
@sonney2k	pluskid, sure
@sonney2k	I cannot do that alone
* sonney2k re
 pluskid	yes, cool if we all help to fix things
 pluskid	but should be careful not to do duplicated work :D
 n4nd0	pluskid: btw, do you remember what is the right solution to do when the "non-fast-forward updates were rejected" error pops up
 pluskid	push --force is OK
 pluskid	I tested that
 n4nd0	pluskid: I have been using lately the strategy you suggested once of deleting the remote branch a moment and then pushing again
 n4nd0	all right
 pluskid	that's OK, too
 pluskid	just a bit more steps
@sonney2k	pluskid, yeah difficult no idea how to avoid some overlap. I guess you have no problem because you are in a different timezone :)
@sonney2k	pluskid, btw are you in good health again?
 pluskid	sonney2k: hmm, maybe now I can declare that my cold is officially cured :D
 n4nd0	nice :)
 shogun-buildbot	build #956 of libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/libshogun/builds/956  blamelist: fernando.iglesiasg@gmail.com
@sonney2k	pluskid, for (int32_t i=0; i < part2.size(); ++i) is not the right fix
@sonney2k	part2.size() is unsigned
@sonney2k	so you would need to cast i and part2.size() to index_t
@sonney2k	pluskid, good to hear!
 pluskid	hmm? I changed it to for (index_t i=0; i < part2.size(); ++i)
@sonney2k	index_t is currently int32_t
@sonney2k	pluskid, ^
 pluskid	oops...
 pluskid	so I think I should use size_t
-!- cronor [~cronor@e178177086.adsl.alicedsl.de] has quit [Read error: Connection reset by peer]
 n4nd0	sonney2k, pluskid: is someone fixing python_modular/graphical examples?
@sonney2k	wiking wants it to be uint32_t
@sonney2k	n4nd0, no feel free
 pluskid	n4nd0: no AFAIK
@sonney2k	I am trying to fix the libshogun ones
 n4nd0	ok, then I start with them
@sonney2k	n4nd0, pluskid please note there is one catch with the new system:
 pluskid	sonney2k: I'll use size_t here and replace with index_t later when I replace std::vector with SGVector, OK?
@sonney2k	while e.g. svm uses BinaryLabels or KNN MulticlassLabels
@sonney2k	it is not so clear what apply() will return
@sonney2k	I decided that it should return CRealLabels
 pluskid	why?
 pluskid	Since Labels have confidence now, it can return BinaryLabels with confidence set properly, isn't it?
@sonney2k	for the SVm
@sonney2k	and CMulticlassLabels for KNN
@sonney2k	problem with the interface currently is that machines all return CLabel*
@sonney2k	pluskid, ok
 n4nd0	sonney2k: what is the idea that makes MulticlassLabels and RealLabels different?
 pluskid	sonney2k: I think we have two solutions: 1. a *strict* convention that binary machine return binary labels, MC machine return MC labels, etc; 2. use dynamic_cast when down casting Labels
 pluskid	or else brute force casting a wrong type object will give use mysterious errors that is difficult to identify
@sonney2k	pluskid, re labels - maybe - problem is the current evaluation works on labels so for computing ROC it compares real valued outputs with binary labels
 pluskid	hmm, seems lots of changes to the current code have to be done
@sonney2k	n4nd0, they have the same base class but accept different values: binary only +1/-1, mc 0...max_int, real labels anythin in R
 pluskid	btw, I find a minor problem when scanning the commits
 pluskid	I forgot ... let me remind ...
 n4nd0	sonney2k: aham, RealLabels must be for regression then
@sonney2k	n4nd0, yes
@sonney2k	argh gtg now
 n4nd0	I read the same description in the brief and got confused ;)
 pluskid	sonney2k: wait a min
 pluskid	MulticlassLabels.cpp:33
 pluskid	float64_t(label)!=labels.vector[real_i])
 pluskid	oh, no problem
 pluskid	my fault
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Ping timeout: 252 seconds]
-!- pluskid [~pluskid@111.120.55.200] has quit [Quit: Leaving]
-!- Francis_Chan [~Adium@58.194.224.108] has quit [Quit: Leaving.]
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- PhilTillet [~Philippe@157.159.42.46] has joined #shogun
-!- blackburn [~blackburn@188.122.250.167] has joined #shogun
-!- PhilTillet [~Philippe@157.159.42.46] has quit [Remote host closed the connection]
@sonney2k	pluskid, casting will be needed anyways if we want to have some kind of apply() interface
 blackburn	are you f-ing kidding? :D
 blackburn	line 57 dense labels
@sonney2k	pluskid, but I like the idea of using confidences and having the strict convention binary machine -> binary labels etc
 blackburn	 55 void CDenseLabels::init()
 blackburn	 56 {
 blackburn	 57 ????CDenseLabels::init();
 blackburn	hmmm
 blackburn	sonney2k: what should it do?
@sonney2k	blackburn, removed
 CIA-113	shogun: Soeren Sonnenburg master * rfa50f74 / (6 files in 2 dirs): fix libsvm example and don't call pure virtual method (indirectly in constructor) - http://git.io/wH2ANg
 blackburn	sonney2k: what is the difference between real and dense?
@sonney2k	blackburn, what do you think about pluskid's suggestion?
@sonney2k	<pluskid> +sonney2k: I think we have two solutions: 1. a *strict* convention that binary machine return binary labels, MC machine return MC labels, etc;
@sonney2k	this one ^
 blackburn	sonney2k: you mean confidences?
@sonney2k	blackburn, dense has pure virtual methods
@sonney2k	blackburn, yes returning binary labels for binary  machines
@sonney2k	so +1 / -1 only
 blackburn	I don't mind it
@sonney2k	and have the real valued outputs in confidences only
@sonney2k	it would drastically change evaluations
 blackburn	evaluations are pretty simple to change
@sonney2k	so you think we should go for it?
 blackburn	sonney2k: so should we change every example to real/binary labels now?
 blackburn	sonney2k: what is advantage?
@sonney2k	blackburn, it is less confusing
@sonney2k	I mean one would expect a binary label from a binary classifier
@sonney2k	and if one wants real valued outputs confidences or scores (or whatever we name it) make more sense
@sonney2k	it is a lot of work though
 blackburn	sonney2k: why it is listed that RealLabels are for multiclass?!
@sonney2k	?
@sonney2k	multiclass -> multiclass
 blackburn	 28 /** @brief Real Labels for multi-class classification
 blackburn	 29  *
 blackburn	 30  * valid values for labels are 0...nr_classes-1
 blackburn	 31  */
 blackburn	??!
 blackburn	oh okay it seems it is just a wrong doc
 blackburn	I was really confused with it :)
 blackburn	sonney2k: I'm ok with binary -> binary
 blackburn	we broke a lot of things already and it is the best moment to make it less confusing
 CIA-113	shogun: Soeren Sonnenburg master * r16581fb / src/shogun/labels/RealLabels.h : fix doc of reallabels - http://git.io/8J7YDQ
@sonney2k	blackburn, do you have time to do it?
 blackburn	sonney2k: to convert it to binary ?
 blackburn	yes
@sonney2k	it is quite intrusive
 blackburn	I need to get shogun back to work :D
@sonney2k	you will need to change the way apply works in all machines
@sonney2k	ie. set confidences there
@sonney2k	and then call sth like convert_to_binary or MC or whatever
 blackburn	??
@sonney2k	I am also not so sure yet how confidences look like for MC
@sonney2k	I mean these are not the outputs of all the ECOC machines...
 blackburn	sonney2k: for OvR it is quite clear
 blackburn	max margin
@sonney2k	what are the confidences?
 blackburn	just the max class margin is ok I think
 blackburn	max among classes I mean
 blackburn	it can be always changed
@sonney2k	max(score) you mean ok
 blackburn	depends how do you call it he
 blackburn	heh
@sonney2k	and for regression we don't have confidences
 blackburn	sonney2k: I think we should have (labels, confidences) constructor in real labels
@sonney2k	GPs will be though
 blackburn	agree?
@sonney2k	blackburn, I think in all labels it makes sense
 blackburn	ok lets do it
@sonney2k	hmmhh in binary one could have a confidences -> binary labels conversion function
@sonney2k	like label_from_confidence(threshold)
@sonney2k	and then it would do the +1/-1 assignment
 blackburn	I am afraid I do not really understand
@sonney2k	multiclass you need the (labels,confidences) pair
 blackburn	ah automagic labels from confidences
 blackburn	right?
@sonney2k	blackburn, a function that does sign(f(x)-threshold)
@sonney2k	yes
 blackburn	where can this threshold be used?
@sonney2k	I don't understnad
 blackburn	sonney2k: ok one more Q - why do we store +1 -1 as floats?
@sonney2k	it would be threshold=0 by default
 blackburn	why not zero thershould?
@sonney2k	blackburn, what else do you suggest?
 blackburn	BinaryLabels(SGVector<bool>, SGVector<float64_t>
 blackburn	)
 blackburn	and
 blackburn	BinaryLabels(SGVector<float64_t>)
 blackburn	ah ok base class
@sonney2k	blackburn, then you have lots of code duplication and overhead is really insignificant
 blackburn	hmm why do const appear here
 blackburn	sonney2k: so should we use const SGVector?
 blackburn	i'm confused with it
 blackburn	ok 4-1 and VODKA TIME
 CIA-113	shogun: Soeren Sonnenburg master * rc4aca39 / src/shogun/multiclass/ecoc/ECOCDiscriminantEncoder.cpp : Merge pull request #535 from pluskid/multiclass-ecoc - http://git.io/KViuMw
 CIA-113	shogun: Chiyuan Zhang master * r1d40518 / src/shogun/multiclass/ecoc/ECOCDiscriminantEncoder.cpp : Fix compile error. - http://git.io/4KZccw
 CIA-113	shogun: Chiyuan Zhang master * r323fcad / src/shogun/multiclass/ecoc/ECOCDiscriminantEncoder.cpp : Use size_t instead of index_t for std::vector - http://git.io/zoLaag
@sonney2k	blackburn, I never use use const :D
 blackburn	sonney2k: hmm in binary labels
 blackburn	sonney2k: will it work with const at all?
 blackburn	should work..
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Ping timeout: 248 seconds]
@sonney2k	hmmh I don't even know what it means there
 blackburn	sonney2k: that src label is not going to be modified
 blackburn	src vector*
@sonney2k	ahh but the ptrs
 blackburn	ptrs are not changed
 blackburn	so it would work I think
@sonney2k	I mean the things where they are pointing to
 blackburn	no they are not guarded by const
@sonney2k	so it is useless :D
 blackburn	not really it denies to e.g. change vector pointer
@sonney2k	but that ptr is copied anyway
 blackburn	yeah
 blackburn	sonney2k: so do you think binary labels should obtain binary from float64 vector?
 blackburn	by default
@sonney2k	hmm cool idea
@sonney2k	might be confusing though
@sonney2k	but actually why not!
@sonney2k	I mean if it is +1/-1 it won't hurt
 blackburn	sonney2k: but is this threshold really needed?
@sonney2k	blackburn, in constructor I would use the default =0 threshold
@sonney2k	but keep a function that does it in the more general way
 blackburn	sonney2k: yes I understand but what is the use case of say threshold = 9.5?
@sonney2k	fewer false positives
-!- gsomix [~gsomix@188.168.4.149] has joined #shogun
-!- gsomix [~gsomix@188.168.4.149] has quit [Client Quit]
 blackburn	heh
-!- vikram360 [~vikram360@117.192.188.28] has quit [Ping timeout: 252 seconds]
 blackburn	sonney2k: oops
 blackburn	linear machine returns binary labels ok
 blackburn	but linear regression??
-!- vikram360 [~vikram360@117.192.188.28] has joined #shogun
 shogun-buildbot	build #243 of nightly_all is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/nightly_all/builds/243
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
@sonney2k	blackburn, regression returns regression labels
 blackburn	sonney2k: how??
@sonney2k	we rename them back to regression
@sonney2k	ahh you mean because they share the apply function?
 blackburn	yes
@sonney2k	argh
 blackburn	heh
 blackburn	I'm currently getting libshogun examples back to work
@sonney2k	blackburn, only idea I have is a flag
@sonney2k	mark in the machine that it is a regressor
@sonney2k	and then return regression labels
 blackburn	is it really needed? a lot of work and I am not really sure it is needed
@sonney2k	the definition of 'needed' is YMMV
@sonney2k	I can tell that I liked pluskid's idea
 blackburn	sonney2k: currently I lost my confidence with everything that is going on in shogun
@sonney2k	as usual
 blackburn	if we break more things I can lost my confidence at all and that would slow down me
 blackburn	I believe we should get things to work first
 blackburn	n4nd0: can you help us?
@sonney2k	blackburn, problem really is that I do these big transitions mostly alone
@sonney2k	that is not good because I don't have much time
 blackburn	sonney2k: I do not understand why do you do it alone
@sonney2k	blackburn, well I asked whether you could do SGSparse
@sonney2k	not sure who else could help...
@sonney2k	it is all too deep IMHO
 n4nd0	blackburn: I am working on fixing python_modular/graphical
 blackburn	hah I do not think it is the case when you should blame me ;)
 n4nd0	blackburn: right now I am with some qda labels
 blackburn	n4nd0: could you please after focus on python modular in general?
@sonney2k	blackburn, I don't understand what you are saying
 blackburn	Multiclass/Real labels in place
 blackburn	sonney2k: as usual - nevermind ;)
 n4nd0	blackburn: sure
@sonney2k	I think we should do labels right now
 n4nd0	blackburn: let's try to ensure that not more than one is working on the same
@sonney2k	whatever right is
@sonney2k	another transition w/ labels few months later just sucks
 blackburn	n4nd0: I won't work on python modular
 blackburn	sonney2k: I do not like flag idea
 n4nd0	blackburn: congrats for the hockey by the way ;)
 blackburn	oh yeah thanks
 blackburn	red machine
@sonney2k	blackburn, why not? I like it. One can ask machines what types of problems they can solve
 blackburn	ok then lets focus on som? separate tasks
@sonney2k	that's pretty useful
 blackburn	some*
@sonney2k	I think I should figure out how I can get the typemap stuff to work such that certain machines return certain label classes
 blackburn	that sounds pretty impossible
@sonney2k	why?
 blackburn	you would always need actual type
@sonney2k	CLibLinear's apply function should just return CBinaryLabels
@sonney2k	so I can rename / change type
 blackburn	shit it is so crappy I'm getting mad
@sonney2k	other suggestions?
 blackburn	I'd say if I had
 blackburn	ok so what should I do
@sonney2k	blackburn, I would say do the confidence thing with labels
@sonney2k	and introduce a machine type flag in machines
@sonney2k	that each machine sets
 blackburn	sonney2k: why not to add KernelClassifierMachine
@sonney2k	I like that btw regardless of what we do with labels
 blackburn	to avoid adding apply to every f-ing class
 blackburn	KernelRegressionMachine
 blackburn	no idea
@sonney2k	blackburn, we are again having the problem not to have interfaces
 blackburn	KernelMachine can be an SGObject
 blackburn	but Classifier could be not an SGObject
 blackburn	with multiple inheritance we can set up proper apply here
@sonney2k	blackburn, hmmhh so we would have kernelmachine -> (kernelclassifiermachine, kernelregressionmachine)
 blackburn	no diamon
 blackburn	d
@sonney2k	multiclassmachine is somehow an exception
 blackburn	and easy way to indicate which problems machine can solve
 blackburn	another way is to add more crappy machines
 blackburn	I can not see any pitfall here
@sonney2k	I don't think swig will work for all target langs for that - but never tried
 blackburn	sonney2k: IRegressor with CRealLabels apply() , IClassifier with CBinaryLabels apply()
 blackburn	ehm
 blackburn	but impls..
 blackburn	okay it is not a solution it seems
@sonney2k	blackburn, well we don't have that problem w/ the current (new) labels system
 blackburn	sonney2k: would be pretty cool to have implementations for both regression and classify apply in kernel machine
 blackburn	and interface could tell which one to use
 blackburn	hmm wait that should be possible
 blackburn	with protected methods
 blackburn	sonney2k: do you understand?
@sonney2k	no
 blackburn	sonney2k: kernel machine could hazz apply_regression and apply_classify
@sonney2k	true
 blackburn	IClassifier would hazzzz
 blackburn	apply that calls apply_classify
 blackburn	and returns BinaryLabels
@sonney2k	but we don't need that
@sonney2k	if we have the machine type flag
@sonney2k	I think I can well live with that
 blackburn	sonney2k: but no crazy typemaps are needed than
@sonney2k	so machines that have multiple options just have an apply_{machine type}
@sonney2k	or maybe even all of them ahve
@sonney2k	have
@sonney2k	then we don't need typemaps or anything
@sonney2k	and from the C++ api one can still cast around as wanted
@sonney2k	'apply_classifier'
@sonney2k	'apply_regression'
@sonney2k	'apply_multiclass'
 blackburn	in the suggested solution each machine would have exactly that apply that is needed
@sonney2k	now I lost you
 blackburn	sonney2k: deriving from both IClassifier and KernelMachine would mean that we have BinaryLabels apply() that uses kernel machine method for that
@sonney2k	blackburn, again we don't know if MI is an option at all
 blackburn	should work I think
@sonney2k	so I would rather not use it here
@sonney2k	for pure C++ sure
@sonney2k	no idea about swig
@sonney2k	ahh and it would mean that we loose CMachine::apply()
 blackburn	don't we loose it already
@sonney2k	no
 blackburn	ok then flag in the only option probably
@sonney2k	we just return CBInaryLabels which is cast to CLabels
 blackburn	ok I'm defeated heh
-!- wiking [~wiking@huwico/staff/wiking] has joined #shogun
@sonney2k	so from C++ side one can check which type it is and cast back
@sonney2k	only for swig interfaces this is a problem that cannot type cast
@sonney2k	that is why I like having the apply_classifier etc methods
@sonney2k	and if we can have some typemap magic to still use apply() for the cases where there are no conflicts I would just do them
 blackburn	sonney2k: and rename apply_classifier to apply?
@sonney2k	yeah %ignore apply() / %rename ...
@sonney2k	actually not rename but something else
@sonney2k	blackburn, one more idea - apply gets an extra flag telling which type of labels are wanted
 blackburn	sonney2k: why?
@sonney2k	blackburn, for the kernelmachine case where you want to return binarylabels or regressionlabels
@sonney2k	one can just say apply(LT_BINARY)
@sonney2k	to get binary labels
@sonney2k	or apply(data, LT_BINARY)
@sonney2k	so no need for apply_classifier then
@sonney2k	...except for swig stuff
@sonney2k	I have to sleep now... we should continue discussing tomorrow hopefully with wikiking, n4nd0, pluskid
 n4nd0	agree
 blackburn	I am completely lost what to do now
 n4nd0	sonney2k: good night
 n4nd0	blackburn: I got a question here,
 blackburn	shoot
 n4nd0	qda.apply(data).get_labels() fails since get_labels is not defined for Labels
 n4nd0	but it is for MulticlassLabels
 n4nd0	what I would like to use here
 n4nd0	what is the good way to do this "casting" in python?
 n4nd0	should we defined some constructors in the derived class?
 n4nd0	like
 n4nd0	CMulticlassLabels(Labels CLabels)
 blackburn	oh
 n4nd0	maybe I am saying something stupid though
 n4nd0	this is in python_modular/graphical/qda.py
 blackburn	wait but why qda is multiclass?
 n4nd0	it works for multiclass
 n4nd0	yeah I know ... it should go to multiclass/ instead of classifier/
 blackburn	QDA is multiclass?!
 blackburn	LOL
 n4nd0	why are you so surprised?
 blackburn	I've never knew this
 n4nd0	:)
 blackburn	I thought it is binary just as lda
 n4nd0	no
 blackburn	our lda
 n4nd0	our lda is binary yes, sonney2k asked me about modifying that to sth similar to qda though
 n4nd0	but our qda works multiclass directly, no need for multiclass strategies
 blackburn	huh cool
 blackburn	I should try this
 n4nd0	just think of it, it is not that weird actually
 n4nd0	you are just fitting data into Gaussians
 n4nd0	labeled data
 blackburn	yeah not weird at all
 n4nd0	sorry, the other way round
 n4nd0	fitting Gaussians into data :P
 n4nd0	anyhow, what do you think about the issue I came with?
 blackburn	yeah wrong likelihood hehe
 blackburn	n4nd0: it is actually what we were discussing
 n4nd0	blackburn: can't we downcast in python somehow?
-!- vikram360 [~vikram360@117.192.188.28] has quit [Ping timeout: 250 seconds]
 blackburn	we can I think but I am not sure it is the solution
 wiking	baaaack
* wiking just arrived from the airport
 blackburn	heh welcome home
 wiking	thnx
 n4nd0	yeah welcome wiking
 wiking	i'll have to start reading logs
 n4nd0	did you have a good time in the conference?
 wiking	yeah it was nice
 wiking	but was more than enough
 n4nd0	wiking: prepare some coffe if you plan to read them :P
 n4nd0	in what sense?
 blackburn	OH SHIT WE WANTED TO DO DOC
 blackburn	*facepalm*
 n4nd0	I guess it is better to fix what we have now .... or?
 blackburn	yes fuck doc if we have everything b0rken
 n4nd0	I don't see how to approach this problem ...
 blackburn	yes I am in deep depression :D
 n4nd0	haha
 wiking	blackburn: i was just about to ask, how that went?
 blackburn	wiking: what went?
 wiking	documentation session
 n4nd0	blackburn: should we discuss about how to do this or wait for sonney2k?
 blackburn	wiking: we didn't do anything
 blackburn	:D
 blackburn	we need to fix that piece of
 blackburn	cake
 wiking	:)
 blackburn	n4nd0: oook let me try to think
 blackburn	it always hard for me
 n4nd0	ok
 n4nd0	so let's define the problem clearly first
 n4nd0	the problem I found is for the python interface
 n4nd0	apply() return Labels
 blackburn	we need to have general apply
 blackburn	but we need to not have general apply
 blackburn	cooooooooool
 n4nd0	ha
 n4nd0	I think that the solution to what I am talking about is just to downcast
 n4nd0	so I will go for doing a copy constructor
 blackburn	downcast is soooooo damn
 blackburn	ugly
 n4nd0	but we don't do it explicitily if we have the copy constructor
 n4nd0	we could make
 n4nd0	MulticlassLabels(qda.apply())
 blackburn	that sucks
 n4nd0	wy?
 n4nd0	oh
 n4nd0	why? haha
 n4nd0	afk
 blackburn	casting is not a pythonic way at all
 blackburn	it would be ok in java though
 n4nd0	but there is no cast there
 n4nd0	we are just creating an object
 blackburn	n4nd0: there should be a swig hack for that..
 n4nd0	without the need of the constructor?
 blackburn	yes it should be actual type not just clabels
-!- cronor [~cronor@g225026248.adsl.alicedsl.de] has joined #shogun
 n4nd0	blackburn: so you think that to do CMulticlassLabels::CMulticlassLabels(const CLabels& orig) is not a good approach
 blackburn	no having this constructor is ok
 n4nd0	mmm but one moment, where do we get the vector labels from?
 n4nd0	I mean, CLabels doesn't have it
 blackburn	:D
 n4nd0	all right, so was that the problem you were talking about?
 blackburn	yes
 blackburn	in general
 n4nd0	what possibilities do we have to solve this?
 n4nd0	taking this into account, I understand that we *need* that apply returns specialized labels
 blackburn	hmmm I suggest to rm -rf shogun
 n4nd0	haha
 n4nd0	wtf man, c'mon - we solve this ;)
 blackburn	I see no solution at all :D
 n4nd0	I see solution with templates
 n4nd0	CLabels is templated
 n4nd0	blackburn: what were the other possibilities you and sonney2k were discussing?
 blackburn	n4nd0: I guess they all are related to some casting
 n4nd0	blackburn: even if apply returns CLabels?
 blackburn	I suggested to add different apply's
 blackburn	but it makes apply() in CMachine useless
 blackburn	I like templates more..
 blackburn	n4nd0: another suggestion was to add interfaces
 blackburn	but not clear whether it can be used from swig
 n4nd0	blackburn: how to add those interfaces?
 n4nd0	CLabels is already an abstract class
 blackburn	n4nd0: class IClassifier { BinaryLabels* apply(CFeatures* data = NULL) { apply_classifier(data); }  }
 n4nd0	mmm I see
 n4nd0	I think this is a fun problem :P
 blackburn	n4nd0: I think we need a few bottles for that
 n4nd0	let's see which is the best solution we find
 blackburn	(of vodka you know)
 n4nd0	haha yeah, got you ;)
 blackburn	ballmer peak
 n4nd0	what?
 blackburn	http://xkcd.com/323/
 n4nd0	found it
 n4nd0	haha that's fun
 blackburn	n4nd0: with that 'interfaces' I've suggested we would lost CMachine::apply
 n4nd0	why?
 blackburn	because it is 'specialized' in machines
 n4nd0	to be honest what I like the most is to use templates here
 n4nd0	I am not sure this will solve all the problems
 n4nd0	because the thing is
 n4nd0	what if we define specialized methods in the subclasses
 n4nd0	how could they be used without casting the class to the subclass?
 blackburn	http://cs317320.userapi.com/v317320297/10f2/XqSlD4PcgpQ.jpg that's so damn sincere
 n4nd0	you see
 n4nd0	Sweden is a nice country to live in
 n4nd0	if you know what I mean ...
 blackburn	n4nd0: do you know why did he wear demitra's shirt
 blackburn	?
 n4nd0	no
 n4nd0	why?
 blackburn	n4nd0: demitra leaved national team in 2011 and he died in plane crash
 n4nd0	oh
 n4nd0	what is the accident where several hockey players died?
 blackburn	that crash of lokomotiv ice hockey club
 blackburn	yes whole team
 blackburn	okay about subclassing
 blackburn	we cannot specialize apply in kernelmachine
 blackburn	because kernelmachine is both for regression and classify
-!- cronor_ [~cronor@e177093001.adsl.alicedsl.de] has joined #shogun
 n4nd0	we should account for that too
 n4nd0	if apply always returns CLabels
--- Log closed Mon May 21 00:00:02 2012
