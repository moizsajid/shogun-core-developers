--- Log opened Thu Nov 21 00:00:12 2013
--- Day changed Thu Nov 21 2013
@wiking	ok
@wiking	so nooow
@wiking	before doing any other fucking thing in my life
@wiking	let's see this swig interface w/o libshogun compilation
@wiking	:))))
@iglesiasg	the adapters?
@iglesiasg	I mean, what lisitsyn  and you were talking about before
@wiking	naaah
@wiking	it's more like
@wiking	cmake hacking
@iglesiasg	ok
@wiking	how to compile swig interfaces
@wiking	w/o compiling libshogun
@iglesiasg	is matlab alive btw?
@wiking	(using the preinstalled one)
@wiking	iglesiasg: dunno how to generated the mex file
@wiking	until i dont know how to do that
@wiking	it's not usable
@iglesiasg	I am afraid I will be doing lot of matlab during my phd :|
@iglesiasg	all right, my cmake 2.8.9 is ready now
@wiking	iglesiasg: y u no scikit :D
@iglesiasg	wiking, I think the people  where I will be are Matlab people
@iglesiasg	they mentioned that in the interview
@iglesiasg	no idea if they will give me freedom about that though
@iglesiasg	but even if they do, it is probably better that I adapt
@wiking	mmm
@wiking	matlab man
@wiking	that's like 90s
@wiking	and rather beginning of 90s :P
@wiking	but it'snot your fault
-!- travis-ci [~travis-ci@ec2-54-205-88-49.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/14278824
-!- travis-ci [~travis-ci@ec2-54-205-88-49.compute-1.amazonaws.com] has left #shogun []
@wiking	but u should bring chaaange
 thoralf_	Woha.  Replacing DynamicObjectArray by DynArray<void *> worked instantly.  No broken tests.
@wiking	be the obama of ML
@wiking	thoralf_: woohooo
 thoralf_	so maybe replacing void by StructuredLabels, but should work fine.
@wiking	i mean seriously
 thoralf_	Okay, will continue tomorrow.
@wiking	we could start using std::list
 thoralf_	:)
@wiking	it's not more bloated than this
@wiking	:P
@iglesiasg	wtf my Shogun doesn't compile now
@iglesiasg	ProtobufFile.h
@wiking	hahahah
@wiking	ok
@wiking	do u really use protobuf?
@wiking	or just happen to have the library around?
@iglesiasg	thoralf_, I add the doc fix and will change the set_label maybe tom
@wiking	if not using it
@wiking	apt-get remove the libprotobuf-dev
@wiking	or whatever it is called
@iglesiasg	it might be here because of GraphLab
@wiking	or comment out the protobuf detection in CMakeLists.txt
@wiking	iglesiasg: comment then
@iglesiasg	and I shouldn't remove it then until my thesis is graded  :D
 thoralf_	iglesiasg: Don't do anything except the comment :P
@iglesiasg	could screw up new experiments if I need
* thoralf_ just refactors StructuredLabels
@iglesiasg	thoralf_, you are the man :)
@wiking	iglesiasg: comment out line 741-748 in CMakeLists.txt
@iglesiasg	I just wrote added to pre-allocate to "number of labels to pre-allocate"
@iglesiasg	wiking, it is ok. I will try tomorrow again in the office computer
@iglesiasg	this one takes too much time to compile :(
@wiking	iglesiasg: okok i'm just saying
@wiking	it's not a surprise it doesn't work
@wiking	we fucking broke develop atm
@wiking	;P
@wiking	but people can have fun with 3.0
@iglesiasg	I should go back to arch again soon
@wiking	yeah arch is cool
@iglesiasg	I have the feeling everything is much much slower with ubuntu
@wiking	i[m using arch on my raspi
@iglesiasg	I don't know if it even makes sense
@iglesiasg	oh nice
@iglesiasg	I have it with raspbian
@wiking	aaah outdated shiatz
@iglesiasg	doing ros stuff with it
@iglesiasg	and I already tried once to get ros in arch
@wiking	arch has much more updated packages
@iglesiasg	and was not fun
@wiking	hahehhehe
@wiking	well tit for tat
@iglesiasg	hehe yeah
@wiking	ok
@wiking	fuckit
@wiking	i'm gonna masacre now the cmakefile
@wiking	agaaain
 shogun-notifier-	shogun: Fernando Iglesias :develop * 9079856 / src/shogun/labels/StructuredLabels.h: https://github.com/shogun-toolbox/shogun/commit/90798560260a15596670f69529397fd1f564e85d
 shogun-notifier-	shogun: Minor doc improvement in StructuredLabels constructor
 shogun-notifier-	shogun: Fernando Iglesias :develop * 46e1bd5 / src/shogun/labels/StructuredLabels.h: https://github.com/shogun-toolbox/shogun/commit/46e1bd566a72d909d03722278de1a303e1e2cfb2
 shogun-notifier-	shogun: Merge pull request #1761 from iglesias/develop
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Minor doc improvement in StructuredLabels constructor
@iglesiasg	that was just a doc change so it should not kill anything :D
@iglesiasg	all right guys
@iglesiasg	good night
@iglesiasg	it was a pleasure
-!- iglesiasg [~iglesiasg@s83-179-44-135.cust.tele2.se] has quit [Quit: Leaving]
 shogun-buildbot_	build #2036 of deb3 - modular_interfaces is complete: Failure [failed test ruby modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb3%20-%20modular_interfaces/builds/2036  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot_	build #1961 of bsd1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/1961  blamelist: Soeren Sonnenburg <sonne@debian.org>, Fernando Iglesias <fernando.iglesiasg@gmail.com>
 thoralf_	src/shogun/base/class_list.cpp:673:125: error: cannot convert 'shogun::CFactorGraphObservation*' to 'shogun::CSGObject*' in return
 thoralf_	Grr.
 thoralf_	Dependencies on CSGObject are hidden in several places. ;)
 thoralf_	wiking: Any idea how to get StructuredData subclasses out of class_list?
 thoralf_	Houston, we've lost Serialization on StructuredData.
 thoralf_	total heap usage: 1,000,299 allocs, 299 frees, 32,033,787 bytes allocated
 thoralf_	32 Bytes/Float.
 thoralf_	wiking: Editing class_list fixed it... is there a blacklist I could extend?
-!- thoralf_ [~thoralf@91-66-33-4-dynip.superkabel.de] has quit [Quit: Konversation terminated!]
@wiking	yes
@wiking	or i think so
@wiking	src/shogun/base/class_list.cpp.py
@wiking	check this
-!- hushell [~hushell@c-50-188-141-210.hsd1.or.comcast.net] has quit [Ping timeout: 272 seconds]
-!- hushell [~hushell@c-50-188-141-210.hsd1.or.comcast.net] has joined #shogun
 shogun-buildbot_	build #2037 of deb3 - modular_interfaces is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb3%20-%20modular_interfaces/builds/2037
 shogun-buildbot_	build #123 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/123  blamelist: Soeren Sonnenburg <sonne@debian.org>, Fernando Iglesias <fernando.iglesiasg@gmail.com>
 shogun-buildbot_	build #121 of clang34 - thread analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/121  blamelist: Soeren Sonnenburg <sonne@debian.org>, Fernando Iglesias <fernando.iglesiasg@gmail.com>
-!- pickle27 [~kevin@24-212-221-132.cable.teksavvy.com] has joined #shogun
 shogun-buildbot_	build #140 of clang34 - static analysis is complete: Failure [failed analyse]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20static%20analysis/builds/140  blamelist: Soeren Sonnenburg <sonne@debian.org>, Fernando Iglesias <fernando.iglesiasg@gmail.com>
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has quit [Ping timeout: 248 seconds]
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
 shogun-buildbot_	build #624 of nightly_default is complete: Failure [failed notebooks]  Build details are at http://buildbot.shogun-toolbox.org/builders/nightly_default/builds/624
-!- pickle27 [~kevin@24-212-221-132.cable.teksavvy.com] has quit [Quit: Leaving.]
-!- zxtx [~zv@129-79-241-148.dhcp-bl.indiana.edu] has quit [Ping timeout: 245 seconds]
-!- zxtx [~zv@c-98-193-83-24.hsd1.il.comcast.net] has joined #shogun
-!- Saurabh7 [~Saurabh7@115.248.130.148] has joined #shogun
-!- Jagged [~NULL@vtluug/member/jagged] has quit [Read error: Operation timed out]
-!- Jagged [~NULL@vtluug/member/jagged] has joined #shogun
-!- Saurabh7 [~Saurabh7@115.248.130.148] has left #shogun ["Leaving"]
-!- lisitsyn1 [~lisitsin@mxs.kg.ru] has joined #shogun
 lisitsyn1	ah again
 lisitsyn1	sorry guys for gunfire haha
-!- lisitsyn [~lisitsyn@80.252.20.67] has quit [Disconnected by services]
-!- lisitsyn1 is now known as lisitsyn
-!- mode/#shogun [+o lisitsyn] by ChanServ
-!- lisitsyn1 [~lisitsyn@80.252.20.67] has joined #shogun
-!- lisitsyn1 was kicked from #shogun by lisitsyn [lisitsyn1]
-!- iglesiasg [~iglesiasg@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@wiking	lisitsyn: btw about the droping stuff: it's in a way already part of shogun.. check the computational part. there's a Run class where u could plugin basically anything u want
@wiking	but what really concerns me atm is this RealNumber bloated shit
@wiking	that we need 127x more space for storing a stupid double :P
@lisitsyn	haha
@iglesiasg	c'mon RealNumber is not be used for real
@wiking	iglesiasg: but essentially yes
@iglesiasg	what do you mean?
@wiking	well what do u store in RealNumber
@wiking	a double no?
@wiking	anything else?
@iglesiasg	yep, just a double
@iglesiasg	but RealNumber is just used in SO
@wiking	yeah i know
@wiking	but this is outrages
@wiking	outragous
@iglesiasg	haha ok
@wiking	i mean this is far from being optimal
@iglesiasg	but it is not used!
@iglesiasg	let's care about real things
@wiking	iglesiasg: thoralf is using it no? :)
@iglesiasg	wiking, no no
@iglesiasg	thoralf had the same problem but using other kind of labels
@iglesiasg	since the overhead is the same
@iglesiasg	or at least I understood that
@wiking	iglesiasg: anyhow i think we should do something with this huge overhead somehow
@wiking	if possible at all
@iglesiasg	it should be less now after the shrinking of the DynamicObjectArray
@iglesiasg	although I am not sure if just setting size 4 for all Parameter and ParameterMap is the best way to do this
@wiking	besser82: do u really dislike the idea of vpn between the shoung-ca and shogun's fatbot?
 thoralf	iglesiasg, wiking: Heard my name? ;)
* thoralf could change StructuredData to inherit from RefCount, nothing else.
 thoralf	Any objections?
 thoralf	Seems to work.
 thoralf	No more Parameter(Map) objects for each Label.
 thoralf	Only 28 bytes overhead/label
 besser82	wiking: not really, if vpn is the way: just do it ;)
 besser82	wiking: I just prefer ssh, because it's less cpu-comsuming
 besser82	wiking: There is no other reason, against vpn.  Just take the easier and working approach  :D
 besser82	sonney2k_: I'm heading down to get the cmake stuff running with the protobuf-thing and the use-procompiled-shogun-lib
@wiking	besser82: i was looking into this and i've seen that we should create ShogunConfig.cmake and ShogunConfigVersion.cake
@wiking	*cmake
 besser82	sonney2k_: It simply took longer, because I got some unforeseen job to accomplish and stuff
 besser82	wiking: I know my approach uses some ShogunConfig.cmake, introduces shogun.pc and shogun_config.h
@wiking	besser82: we already have config.h
@wiking	maybe that needs fixing
 besser82	wiking: as far as I've seen, yes
 besser82	wiking: because there are lot of definitions passed by cmake to the compiler, which should be in config.h and used from there...#
@wiking	besser82: go ahead with fixess :P
 besser82	wiking: and that config.h which is actually generated, gets generated from some external script, like version.h
 besser82	wiking: which both should be generated when running cmake-configure-stage
 besser82	wiking: instead of `make all`
@wiking	not the version.h
 besser82	wiking: ???
 besser82	wiking: what#s the problem with that?
 besser82	wiking: everything the autogen-script does can be done from cmake as well
@wiking	well version.h should be generated compile time
@wiking	and not configure time
 besser82	wiking: any special reason for that?
@wiking	well becasue the git rev version number can change
@wiking	after configure step
@wiking	obviously
@wiking	besser82: but this is already working like this in shogun
@wiking	so this is ok
@wiking	i mean version.h
 besser82	wiking: allright.
 besser82	wiking: but how the git-sha can change after configuring??? *confused*
@wiking	besser82: check this
@wiking	cmake/version.cmake
 besser82	wiking: will dive into...
-!- iglesiasg [~iglesiasg@s83-179-44-135.cust.tele2.se] has quit [Quit: Leaving]
-!- iglesiasg [~iglesias@2001:6b0:1:1da0:d5d3:7e38:9901:108c] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@iglesiasg	hi thoralf
@iglesiasg	I had to run before so I didn't answer, sorry about that
@iglesiasg	thoralf,  so at first sight what I see is that we would have to change the CDynamicObjectArray to a DynArray or so
@iglesiasg	but that should be fine
-!- sonne|osx [~sonne@f053047007.adsl.alicedsl.de] has joined #shogun
@wiking	sonne|osx: bazinga
 sonne|osx	wiking: good news everyone
 sonne|osx	whats up?
@wiking	notmuhc
@wiking	w8ing for besser82
 thoralf	iglesiasg: I already replaced it by DynArray, but it's not that trivial because (1.) CDynamicObjectArray took care about SG_REF/UNREF
@iglesiasg	thoralf, does RefCount clean memory automatically?
 thoralf	iglesiasg: and (2.) it seems that it's again consuming 5k/instance, but I need to check that.
@iglesiasg	thoralf, otherwise, what about using SGReferencedData instead
 thoralf	iglesiasg: It does not.  It's just a thread safe counter class.
 thoralf	sonne|osx: Did you revert your changes?  DynArray again allocates 5*1024 bytes for each label...
 sonne|osx	thoralf: I understand why but now how to fix it - did it compile for you last time (buildbot was unhappy so I tried to do it differently but failed obviously)
 thoralf	sonne|osx: you did something like "DynArray<xxx> foo(4);" -- my compiler complained, so I changed it locally to something like "DynArray<xxx> foo = DynArray<xxx>(4);", which worked well.
 thoralf	I did this while watching a movie, so I didn't check in depth.
 sonne|osx	thoralf: ahh ok then. maybe I should just do it this way then - or you do it if you have time now (search for set_granularity in the base/Param*.cpp)
 thoralf	I'll try.
 thoralf	set_granularity(int32_t g)
 thoralf	g=CMath::max(g,128);
 thoralf	LOL.
 sonne|osx	huh? why that stupid limit?
 sonne|osx	just drop it
 sonne|osx	I mean 1
 sonne|osx	should be the limit
 thoralf	Okay.
@iglesiasg	I think that a method to shrink the space is better than setting the granularity in Parameter
@iglesiasg	if for some reason in a Parameter object lot of elements are added to the list
@iglesiasg	it would be very slow if the granularity is that small
@wiking	heheh lol
@wiking	iglesiasg: have u read the mailinglist?
@iglesiasg	PrimalMosek?
@wiking	yeps
@wiking	i wonder wtf is happening there
@iglesiasg	not yet
@wiking	btw
@wiking	do we support svmlight input format -> SOSVM multiclass?
@iglesiasg	I haven't used that so AFAIK no
@iglesiasg	but it might be
 thoralf	iglesiasg: I think we should talk about "preallocated size on construction" instead of granularity...
 thoralf	iglesiasg: In most cases we either (a) need only small arrays or (b) we know in advance that it's going to be BIIIG.
@iglesiasg	thoralf, well not really
@iglesiasg	thoralf, that is the whole concept of dynamic arrays
@iglesiasg	thoralf, like dynamic resizing arrays. You can get amortized linear time insertion without even giving a preallocated size
 thoralf	Can you achieve linear size by only resizing a fixed number of elements?
@iglesiasg	what I mean with this is that IMHO is OK to talk about granularity here
 thoralf	Shouldn't something exponential happen wrt. the size happen?
@iglesiasg	thoralf, what? linear time you mean?
 thoralf	iglesiasg: For having linear time, you need to multiply the array size.
@iglesiasg	yes
 thoralf	But you're only adding K elements, for fixed K.
 thoralf	So no linear time anyway.
@iglesiasg	So if this granularity is not set, it is just set to a constant value?
 thoralf	128 per default
 thoralf	But this is not the point.
@iglesiasg	ok
@iglesiasg	what is it then? :)
 thoralf	The point is: why something so expensive on every SGObject creation.
 thoralf	The rest is only micro-optimization.
@iglesiasg	yes, that is true
@iglesiasg	probably Heiko has a good reason related to CV and model selection to use this Parameter attributes in SGObject
 thoralf	Or the point might be: Why does StructuredData extend SGObject
@iglesiasg	I have nothing against making StructuredData not extend SGObject
 thoralf	I tried it, but since serialization is encoded in the class name (CStructuredData), it makes a lot of pain to change this.
 thoralf	And we're losing SG_REF/UNREF.
@iglesiasg	thoralf, I don't see the serialization point, let me check the code
 thoralf	class_list.cpp.py
 thoralf	Automagic stuff.
 thoralf	class_list.cpp breaks as soon as you remove SGObject from StructData.
@iglesiasg	ok so pretty much the thing is that we cannot serialize CStructuredData if it is not SGObject
@iglesiasg	thoralf, so there are a couple of reasong to keep it as SGObject
@iglesiasg	thoralf, but the problem is that it takes too much memory
@iglesiasg	thoralf, what is the inconvenient with shrinking the memory used by the Parameter attributes in SGObject
@iglesiasg	I don't mean it to do *everywhere*
@iglesiasg	for instance, right now to me it seems reasonable to do it in the CStructuredData constructor
 thoralf	The memory will be allocated by the default constructor of DynArray.
 thoralf	So shrinking needs to realloc and eventually copy stuff around.
 thoralf	I will commit something that initializes Parameter/ParameterMap with smaller sizes, as a hot-fix.
 thoralf	160 Bytes instead of 5KiB
@iglesiasg	ok
@iglesiasg	thoralf, out of curiosity, when "shrinking needs to realloc and eventually copy stuff around", is that overhead relevant?
 thoralf	I think that (re)alloc is expensive and yields to memory fragmentation.  But it's shouldn't be relevant.
 thoralf	iglesiasg: Have a look: https://github.com/shogun-toolbox/shogun/pull/1762
 thoralf	sonne|osx as well
@iglesiasg	thoralf, yep, I opened it already. Looks good to me, let's see how does it looks for travis
 thoralf	Note that I didn't change the default size.
 thoralf	Only for usages within Parameter(Map).
-!- zxtx [~zv@c-98-193-83-24.hsd1.il.comcast.net] has quit [Ping timeout: 272 seconds]
 thoralf	Only 508 bytes per float now. :D
 thoralf	total heap usage: 11,000,328 allocs, 11,000,328 frees, 508,034,974 bytes allocated
 thoralf	1M entries.
 thoralf	So each label needs 11 (!) mallocs and uses 508 bytes.
@iglesiasg	thoralf, what labels are you exactly using btw?
 thoralf	Multilabels
 thoralf	Not yet committed.
@iglesiasg	what are they exactly?
@iglesiasg	a set of ints?
 thoralf	A vector of {0,1}^K
 thoralf	Formally.
@iglesiasg	all right
 thoralf	Implemented as a set of ints.
 thoralf	To make it sparse. :)
 thoralf	to exploit sparsity
@iglesiasg	is your K large?
 thoralf	7000
@iglesiasg	then it is good to make it sparse if labels are going to have to 1 just a few entries :)
@iglesiasg	good good
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Thoralf Klein :develop * 72f0bb1 / src/shogun/base/ (3 files): https://github.com/shogun-toolbox/shogun/commit/72f0bb15699f5b5abb90e49b045b97580ce803a9
 shogun-notifier-	shogun: Fixed initialization of DynArray in Parameter/ParameterMap to get memory footprint small:
 shogun-notifier-	shogun: DynArray will be instanciated 5 times for each SGObject (via Parameter/ParameterMap)
 shogun-notifier-	shogun: which introduced a memory overhead of 5kb per instance.  With this commit, the overhead
 shogun-notifier-	shogun: should be reduced to 160 bytes.
 shogun-notifier-	shogun: Fernando Iglesias :develop * fca253d / src/shogun/base/ (3 files): https://github.com/shogun-toolbox/shogun/commit/fca253db53149817a2fcdf5ba584d92366de11dd
 shogun-notifier-	shogun: Merge pull request #1762 from tklein23/develop
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Fixed initialization of DynArray in Parameter/ParameterMap to reduce memory footprint
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 22ba728 / src/shogun/base/DynArray.h: https://github.com/shogun-toolbox/shogun/commit/22ba728482a7adc4cef586e1b0cf84348a7ac900
 shogun-notifier-	shogun: 1 should be the lower bound
 sonne|osx	thoralf: you could even use one - would make sense IMHO
 sonne|osx	thoralf: I mean this is just done once for <10 parameters right so no reason to try to be fast
 shogun-notifier-	shogun: Fernando Iglesias :develop * ba1a837 / src/shogun/base/DynArray.h: https://github.com/shogun-toolbox/shogun/commit/ba1a8375d55524f20d353c1ca333931aa38d0833
 shogun-notifier-	shogun: Set to 1 granulatity minimum threshold in DynArray::set_granularity
 shogun-notifier-	shogun: Fernando Iglesias :develop * d8aab2f / : https://github.com/shogun-toolbox/shogun/commit/d8aab2fc464f0fc018aac9761d76404d13721555
 shogun-notifier-	shogun: Merge pull request #1763 from iglesias/develop
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Set to 1 granulatity minimum threshold in DynArray::set_granularity
 thoralf	sonne|osx: Yeah, but the memory overhead for small memory chunks is quite big, so it usually makes no difference if you allocate 1 or 20 bytes.
 sonne|osx	thoralf: it is still 3*8 bytes wasted * 4
 thoralf	Okay, let me check how many elements the array holds in average. ;)
 thoralf	Micro-optimization done right[tm] ;)
 sonne|osx	thoralf: why even try? I mean this is like 10 parameters / class max
 sonne|osx	so I guess we usually have 0-2 parameters
 sonne|osx	thoralf: but you know that the array is used here for convenience not optimization right?
 sonne|osx	thoralf: so that one can do SG_ADD( some parameter)
 sonne|osx	thoralf: anyway SGObjects are not small so one should not use them if you intend to have  very little payload
 sonne|osx	they are just not meant for that
 sonne|osx	one should rather use aggregated data types
 sonne|osx	I mean storing a real number as some CRealNumber is waste of resources
 sonne|osx	CRealVector or CRealMatrix or whatever is what one should use
 thoralf	sonne|osx: I'm not storing floats in StructuredData.  It's complex labels, but even in my case the overhead exceeded the payload by many orders.
 thoralf	complex as-in not-trivial
 sonne|osx	then CSGObjects are not waht you want
 thoralf	Btw., the average size of the DynArrays is 0 for StructuredData ;)
 sonne|osx	they have 8 pointers several bools
 sonne|osx	no size optimization at all
 thoralf	sonne|osx: "then CSGObjects are not waht you want" <-- That's right, but as I was using the SO framework of iglesias, I didn't have a choice.
 sonne|osx	so the right fix would be that StructuredData was not derived from SGObject
 thoralf	Yes.
 thoralf	I tried this, but it's not trivial.
 sonne|osx	question is what of SGObject does it need
 sonne|osx	iglesiasg: ?
 thoralf	First, compiling class_list.cpp failed, but I blacklisted this.
@iglesiasg	I think only REF and UNREF is actually used
 thoralf	Second, You have to care about REF/UNREF
@iglesiasg	and serialization too according to thoralf
 thoralf	It helps te rename the classes and remove the "C".
 thoralf	But still: Memory will not be freed automatically.
 sonne|osx	iglesiasg: well then use delete instead of unref and good? or is this an object shared among variius places?
 sonne|osx	thoralf: yes rule is - classes prefixed with C - are CSGObjects and will be serialized
 sonne|osx	etc
@iglesiasg	sonne|osx, where I have used it it was not shared
 sonne|osx	iglesiasg: so then easy fix right?
@iglesiasg	yes, I think so
 shogun-buildbot_	build #1962 of bsd1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/1962  blamelist: Thoralf Klein <thoralf.klein@zib.de>
 thoralf	iglesiasg: We have to take care a bit, since StructeredData is passed around in SO framework (argmax, etc.)
 thoralf	But it should help to take care and run valgrind a few times.
 sonne|osx	thoralf: I guess igleasias knows where it is initally set - in this object it has to be destroyed
@iglesiasg	it would basically be in the destruction of the labels
 thoralf	Yes, I think so.
 sonne|osx	iglesiasg, thoralf and when you set the object you have to delete the old one (make sure that the you do an init with NULL ...)
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * d52da29 / src/shogun/base/Parameter.cpp,src/shogun/base/ParameterMap.cpp: https://github.com/shogun-toolbox/shogun/commit/d52da29673ed829b285ebee0dc32062ce6951484
 shogun-notifier-	shogun: use 1 even
 thoralf	Damn.  I just prepared a PR for this. ;)
 shogun-buildbot_	build #1963 of bsd1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/1963  blamelist: Soeren Sonnenburg <sonne@debian.org>, Fernando Iglesias <fernando.iglesiasg@gmail.com>
-!- hushell [~hushell@c-50-188-141-210.hsd1.or.comcast.net] has quit [Ping timeout: 248 seconds]
@wiking	is there a fast way i can do Sparsefeatures->DenseFeatureS?
-!- thoralf [~thoralf@enki.zib.de] has quit [Quit: Konversation terminated!]
-!- thoralf [~thoralf@enki.zib.de] has joined #shogun
-!- iglesiasg [~iglesias@2001:6b0:1:1da0:d5d3:7e38:9901:108c] has quit [Quit: Ex-Chat]
@wiking	we dont have a from_sparse(SGSparseMatrix) converter in SGMatrix :S
-!- FSCV [~FSCV@201.161.7.110] has joined #shogun
-!- lisitsyn [~lisitsin@mxs.kg.ru] has quit [Quit: Leaving.]
 sonne|osx	wiking: do we have one in CDenseFeatures?
 sonne|osx	wiking: actually I guess only the other way round
@wiking	noup
@wiking	yes in indeed only one way
 sonne|osx	wiking: well sparse -> dense is very easy :)
@wiking	heheh indeed
@wiking	nevermind
@wiking	i could use sparsefeatures
@wiking	so it was ok
 sonne|osx	thoralf: we really should do the structureddata change
 thoralf	sonne|osx: Of course.  Do you have an agenda for this?
 shogun-buildbot_	build #124 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/124  blamelist: Thoralf Klein <thoralf.klein@zib.de>
 shogun-buildbot_	build #1964 of bsd1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/1964  blamelist: Soeren Sonnenburg <sonne@debian.org>
 sonne|osx	thoralf: agenda is you do it and I review the stuff :) I would prefer fixing cmake & protbuf
 thoralf	Ehrm. ;)
 thoralf	sonne|osx: What's the exact plan for this?  Removing base class SGObject from structured stuff.  Renaming subclasses so that they don't start with C (otherwise class_list.cpp will fail).  Replacing all SG_UNREF on labels by delete.
 thoralf	Anything else?
 thoralf	Any expected side effects?
 sonne|osx	thoralf: and init the data with NULL in labels and also free it before the setter is doing the set
 sonne|osx	no side effects if this is really only *internal* data
 sonne|osx	it cannot be exposed to e.g. python modular or so (otherwise ref/unref needs to work)
 shogun-buildbot_	build #335 of FCRH - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/FCRH%20-%20libshogun/builds/335  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot_	build #122 of clang34 - thread analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/122  blamelist: Thoralf Klein <thoralf.klein@zib.de>
 thoralf	sonne|osx: We somehow broke serialization ^
 sonne|osx	thoralf: you mean bug in DynArray with granularity 1?
 sonne|osx	don't see it yet though
 thoralf	http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/122/steps/test/logs/stdio
 thoralf	No, DynArray and tests are work locally.  Seems to be build-system related.
 sonne|osx	nah these are not really tests
-!- Saurabh7 [~Saurabh7@115.248.130.148] has joined #shogun
 shogun-buildbot_	build #141 of clang34 - static analysis is complete: Failure [failed analyse]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20static%20analysis/builds/141  blamelist: Thoralf Klein <thoralf.klein@zib.de>
@wiking	lol
@wiking	http://stackoverflow.com/questions/20122267/ifinite-was-not-declared-in-this-scope
@wiking	stackoverflow :)
@wiking	afaik we should really do something about
@wiking	cmath and math.h
@wiking	and btw:
@wiking	Math.h:1257:11: warning: 'finite' is deprecated: first deprecated in OS X 10.9 [-Wdeprecated-declarations]
@wiking	                        return finite(f);
@wiking	                               ^
@wiking	/usr/include/math.h:718:12: note: 'finite' declared here
@wiking	extern int finite(double) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_NA, __IPHONE_NA);
-!- thoralf [~thoralf@enki.zib.de] has quit [Quit: Konversation terminated!]
 shogun-buildbot_	build #125 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/125  blamelist: Soeren Sonnenburg <sonne@debian.org>, Fernando Iglesias <fernando.iglesiasg@gmail.com>
@wiking	fyi we have some sorts of memory leak in ./tests/unit/unit-SGObject
-!- lisitsyn1 [~lisitsyn@80.252.20.67] has joined #shogun
 shogun-buildbot_	build #123 of clang34 - thread analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/123  blamelist: Soeren Sonnenburg <sonne@debian.org>, Fernando Iglesias <fernando.iglesiasg@gmail.com>
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
@wiking	sonne|osx: ping.
@wiking	sonne|osx: is it ok if i change inline static int is_finite(double f)
@wiking	to static int is_finite(double f)
@wiking	just as like static int is_infinity(double f);
@wiking	?
 shogun-buildbot_	build #142 of clang34 - static analysis is complete: Failure [failed analyse]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20static%20analysis/builds/142  blamelist: Soeren Sonnenburg <sonne@debian.org>, Fernando Iglesias <fernando.iglesiasg@gmail.com>
-!- FSCV [~FSCV@201.161.7.110] has quit [Quit: Leaving]
@wiking	btw anybody here knows how to generate that stupid mex file for matlab static interface?
 shogun-buildbot_	build #126 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/126  blamelist: Soeren Sonnenburg <sonne@debian.org>
 sonne|osx	wiking: try mex
 sonne|osx	wiking: this is_finite stuff worked already with configure no idea how to scan for it with cmake
@wiking	sonne|osx: is it ok if i do it like that?
@wiking	inline -> static?
 sonne|osx	wiking: sure
 sonne|osx	wiking: wow - many people with the ifinite issue :D
 sonne|osx	and all trying to fix it?!
 sonne|osx	oopsi
 sonne|osx	there is a typo
 sonne|osx	ifinite(f); -> isfinite(f)
 sonne|osx	hmmh
 sonne|osx	we don't have ifinite in the code
 sonne|osx	something weird is going on there...
 shogun-buildbot_	build #124 of clang34 - thread analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/124  blamelist: Soeren Sonnenburg <sonne@debian.org>
 sonne|osx	doesn't look like it is our fault
@wiking	sonne|osx: here
@wiking	check this patch
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Viktor Gal :develop * 17babf2 / / (5 files): https://github.com/shogun-toolbox/shogun/commit/17babf2deb5c022396d0503a48d7e7de93b02fc6
 shogun-notifier-	shogun: Refactor is_nan, is_infinity and is_finite in CMath
 shogun-notifier-	shogun: Disable ProtoBuf detection
@wiking	sonne|osx: soon we should do a hotfix release
 shogun-buildbot_	build #143 of clang34 - static analysis is complete: Failure [failed analyse]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20static%20analysis/builds/143  blamelist: Soeren Sonnenburg <sonne@debian.org>
 shogun-buildbot_	build #1685 of cyg1 - libshogun is complete: Failure [failed configure]  Build details are at http://buildbot.shogun-toolbox.org/builders/cyg1%20-%20libshogun/builds/1685  blamelist: Viktor Gal <viktor.gal@maeth.com>
 shogun-buildbot_	build #1965 of bsd1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/1965  blamelist: Viktor Gal <viktor.gal@maeth.com>
@wiking	doh
@wiking	/usr/local/bin/ld: CMakeFiles/libshogun.dir/ui/GUIPluginEstimate.cpp.o: relocation R_X86_64_32S against `vtable for shogun::CGUIPluginEstimate' can not be used when making a shared object; recompile with -fPIC
@wiking	freebsd :S
@wiking	fpic detection is not working
-!- hushell [~hushell@c-50-188-141-210.hsd1.or.comcast.net] has joined #shogun
 shogun-buildbot_	build #336 of FCRH - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/FCRH%20-%20libshogun/builds/336
-!- zxtx [~zv@ool-2f110054.dyn.optonline.net] has joined #shogun
 shogun-notifier-	shogun: Viktor Gal :develop * ad0f48e / CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/ad0f48e150072e2236ab5ea0b6620014c7e33edc
 shogun-notifier-	shogun: Include CheckCXXSourceCompiles in CMakeLists.txt
 shogun-buildbot_	build #1966 of bsd1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/1966  blamelist: Viktor Gal <viktor.gal@maeth.com>
 shogun-buildbot_	build #127 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/127  blamelist: Viktor Gal <viktor.gal@maeth.com>
-!- iglesiasg [~iglesiasg@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
 shogun-buildbot_	build #343 of FC19 - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/FC19%20-%20libshogun/builds/343  blamelist: Viktor Gal <viktor.gal@maeth.com>
 shogun-buildbot_	build #125 of clang34 - thread analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/125  blamelist: Viktor Gal <viktor.gal@maeth.com>
 shogun-notifier-	shogun: Viktor Gal :develop * 66d819f / src/shogun/structure/CCSOSVM.cpp,src/shogun/structure/CCSOSVM.h: https://github.com/shogun-toolbox/shogun/commit/66d819f1bbd3649cb2afbcdc28c0e45ba48a5aaa
 shogun-notifier-	shogun: Small refactoring of CCSOSVM
 sonne|osx	wiking: what is the issue with is_nan etc? it was all working OK before we switched to cmake?!
 sonne|osx	wiking: ahh cool nice checks
 sonne|osx	wiking: you should just merge that and then we see if the cygwin bot is happy or not
@wiking	we'll see now what happens with cygwin
@wiking	sonne|osx: there was nothing wrong with is_nan just made it a bit more portable
* wiking has a hunch that some basic mathematical function is being broken atm...
@wiking	that's why ccsosvm not working anymore
 sonne|osx	wiking: if you had tests :P
@wiking	sonne|osx: mosek based...so wouldnt have helped
 sonne|osx	so useless stuff anyway
@wiking	we should have unittest for sparse_dot...
@wiking	wtf is this that there's no gettimeofday
 sonne|osx	woa
 sonne|osx	that is the seed for the rng
@wiking	sonne|osx: heiko style
 shogun-buildbot_	build #1686 of cyg1 - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/cyg1%20-%20libshogun/builds/1686
 sonne|osx	wiking: well we could fall back to time() if getttimeofday is not available
 sonne|osx	so cyg is happy
@wiking	noup
@wiking	Never use time() to initialize srand()
@wiking	google for this
 sonne|osx	why not
 sonne|osx	I mean we have the pid and other stuff mixed in too
@wiking	read the article
 sonne|osx	wiking: no good enough as a fall back - at least some randomness
@wiking	sonne|osx: /dev/urandom
@wiking	sonne|osx: dunno what could be on non UNIX stuff
 sonne|osx	you mean  non-linux
 sonne|osx	no lets not optimize for weird platforms
 sonne|osx	lets just use time
@wiking	sonne|osx: let's not
@wiking	/dev/urandom is totaly unix
@wiking	urandom is available in any normal unix system
 sonne|osx	wiking: any unix has gettimeofday so /dev/urandom doesn't help at all
@wiking	that is not from 1980s
@wiking	sonne|osx: yes it doesn
@wiking	gettimeofday and like
@wiking	is a very bad way to seed a prng
@wiking	as there's a high probabilyt
@wiking	that it makes totaly not rng
 sonne|osx	sure but it is just a seed
@wiking	so the whole purpose of PRNG is just being
@wiking	sonne|osx: yes that's why it's Prng
@wiking	and not RNG
@wiking	w/o a good seed
@wiking	no good random is possible
@wiking	with any prng
 sonne|osx	otherwise you would use /dev/random all the time
@wiking	sonne|osx: no
 sonne|osx	and wait 20 seconds to get another integer
@wiking	sonne|osx: because u want Prng
@wiking	meaning u wanna be able to have 'states'
-!- sonne|osx [~sonne@f053047007.adsl.alicedsl.de] has quit [Quit: sonne|osx]
 shogun-buildbot_	build #144 of clang34 - static analysis is complete: Failure [failed analyse]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20static%20analysis/builds/144  blamelist: Viktor Gal <viktor.gal@maeth.com>
-!- hushell [~hushell@c-50-188-141-210.hsd1.or.comcast.net] has quit [Ping timeout: 272 seconds]
-!- travis-ci [~travis-ci@ec2-23-20-94-251.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Fernando Iglesias's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/14312348
-!- travis-ci [~travis-ci@ec2-23-20-94-251.compute-1.amazonaws.com] has left #shogun []
 shogun-buildbot_	build #1967 of bsd1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/1967  blamelist: Viktor Gal <viktor.gal@maeth.com>
-!- Saurabh7 [~Saurabh7@115.248.130.148] has quit [Ping timeout: 264 seconds]
 shogun-buildbot_	build #128 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/128  blamelist: Viktor Gal <viktor.gal@maeth.com>
 shogun-buildbot_	build #344 of FC19 - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/FC19%20-%20libshogun/builds/344
-!- hushell [~hushell@8-12.ptpg.oregonstate.edu] has joined #shogun
--- Log closed Fri Nov 22 00:00:35 2013
