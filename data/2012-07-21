--- Log opened Sat Jul 21 00:00:17 2012
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has quit [Quit: Leaving.]
-!- blackburn [~blackburn@109.226.92.17] has quit [Quit: Leaving.]
-!- emrecelikten [~emre@176.40.251.10] has quit [Ping timeout: 276 seconds]
-!- puffin444 [187b4283@gateway/web/freenode/ip.24.123.66.131] has joined #shogun
-!- gsomix [~gsomix@188.168.2.62] has quit [Remote host closed the connection]
-!- gsomix [~gsomix@85.26.233.122] has joined #shogun
 gsomix	good morning
-!- puffin444 [187b4283@gateway/web/freenode/ip.24.123.66.131] has quit [Quit: Page closed]
-!- zxtx [~zv@ool-457e7550.dyn.optonline.net] has joined #shogun
-!- gsomix [~gsomix@85.26.233.122] has quit [Ping timeout: 246 seconds]
-!- rieck [~rieck@134.76.96.43] has joined #shogun
 droopy	rieck!!
-!- rieck [~rieck@134.76.96.43] has left #shogun []
-!- gsomix [~gsomix@83.149.21.227] has joined #shogun
-!- pluskid [~pluskid@li411-226.members.linode.com] has joined #shogun
-!- gsomix [~gsomix@83.149.21.227] has quit [Ping timeout: 252 seconds]
-!- rieck [~rieck@134.76.96.43] has joined #shogun
-!- gsomix [~gsomix@85.26.165.155] has joined #shogun
-!- gsomix [~gsomix@85.26.165.155] has quit [Ping timeout: 246 seconds]
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has joined #shogun
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has quit [Quit: Leaving.]
@sonney2k	haha droopy can you say droopy?
 droopy	sonney2k: there you go
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has joined #shogun
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has quit [Client Quit]
-!- emrecelikten [~emre@176.40.251.10] has joined #shogun
@sonney2k	wiking, please update your PR with the trivial changes such that I can merge it!
-!- emrecelikten [~emre@176.40.251.10] has quit [Client Quit]
-!- hoijui [~hoijui@dslb-088-074-122-056.pools.arcor-ip.net] has joined #shogun
-!- hoijui_ [~hoijui@dslb-088-074-122-056.pools.arcor-ip.net] has joined #shogun
-!- hoijui [~hoijui@dslb-088-074-122-056.pools.arcor-ip.net] has quit [Client Quit]
-!- hoijui_ [~hoijui@dslb-088-074-122-056.pools.arcor-ip.net] has quit [Client Quit]
-!- hoijui [~hoijui@dslb-088-074-122-056.pools.arcor-ip.net] has joined #shogun
-!- blackburn [~blackburn@109.226.92.17] has joined #shogun
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
 n4nd0	hi all
 blackburn	hey
 blackburn	n4nd0: how did you holidays go?
 n4nd0	blackburn: they were good!
 n4nd0	I have been out in the wild camping and so on, it has been fun :)
 blackburn	cool
-!- hoijui [~hoijui@dslb-088-074-122-056.pools.arcor-ip.net] has quit [Quit: Leaving]
-!- pluskid [~pluskid@li411-226.members.linode.com] has quit [Ping timeout: 264 seconds]
-!- pluskid [~pluskid@111.120.10.104] has joined #shogun
 blackburn	pluskid: hey
 blackburn	n4nd0: btw we with wiking wanted to test shogun on ILSVRC2012, wanna join?
 blackburn	I also would like to build a team to participate in kaggle stuff
 n4nd0	blackburn: I read about it in the mail wiking sent a couple of days in the list
 blackburn	exactly
 n4nd0	it sounds very good, I would like to be in, yes
 blackburn	wiking: ^
 blackburn	n4nd0: we both are just curious how to handle SUCH BIG data
 blackburn	138 Gb!
 blackburn	and actually now we need to come up with some features
 n4nd0	wow, 138 GB
 blackburn	I am going to come up with some fast HOG and wiking wanted to adapt FREAK
 blackburn	http://infoscience.epfl.ch/record/175537/files/2069.pdf I am looking forward to try FREAK actually
 blackburn	it is something faster and more accurate than SIFT/SURF
 pluskid	blackburn: hi!
 blackburn	pluskid: how is it going? you became rare here ;)
 pluskid	blackburn: I hang here, but rarely speak :D
 pluskid	struggling with some 300+ line matlab code...
 pluskid	matlab function
 blackburn	exactly like I do
 pluskid	to turn it into C++
 pluskid	haha
 droopy	HA
 pluskid	blackburn: what algor are you working on now?
 blackburn	pluskid: https://github.com/shogun-toolbox/shogun/blob/master/src/shogun/lib/slep/slep_solver.cpp that thing is just 8 matlab files (loc ~200) generalized into one solver
 blackburn	pluskid: well I am currently fixing bugs in recently introduced multitask algorithms ported from the MALSAR library
 blackburn	they are basically about the same
 blackburn	regularizers are different :)
 droopy	hrhr
 pluskid	blackburn: not better here :P, https://github.com/pluskid/shogun/blob/multiclass/src/shogun/multiclass/tree/RelaxedTree.cpp
 pluskid	two big functions
 blackburn	pluskid: btw we now can use eigen3, did you know?
 pluskid	blackburn: don't know :-/
 blackburn	pluskid: here is the example
 blackburn	https://github.com/shogun-toolbox/shogun/blob/master/src/shogun/lib/malsar/malsar_clustered.cpp
 blackburn	there are some double* but they are just for libqp interfacing
 pluskid	blackburn: eigen3 is a matrix library?
 blackburn	yes
 pluskid	cool!
 blackburn	vectorizing actually
 blackburn	so we can expect even some performance impact here
 pluskid	longing for a matrix library in shogun :D
 pluskid	and I guess this would be much easier to code than raw LAPACK
 blackburn	A*B is A*B
 blackburn	not cblas_dgemm(CblasColMajor,CblasNoTranspose, ... N,M,K
 blackburn	:D
 pluskid	then what about SGMatrix?
 pluskid	will it stay?
 blackburn	well just store everything in sgmatrices
 blackburn	but in solvers/algorithms
 blackburn	you may use eigen3
 blackburn	I don't like idea of having eigen3 matrices members
 pluskid	I see
 pluskid	anyway, such a good news!
 blackburn	actually if you want to treat SGMatrix as Eigen3 matrix
 blackburn	you may do that using Map<MatrixXd>
 blackburn	so it looks like a good idea for me to keep eigen3 only inside
 pluskid	hmm, that's reasonable
-!- gsomix [~gsomix@80.234.50.198] has joined #shogun
 gsomix	hi
-!- rieck [~rieck@134.76.96.43] has left #shogun []
-!- pluskid [~pluskid@111.120.10.104] has quit [Quit: Leaving]
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Quit: leaving]
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has joined #shogun
 blackburn	heiko: hey
 heiko	blackburn heyho
 blackburn	heiko: I am thinking how can I make multitask work with xval or at least subsets
 blackburn	heiko: can we know original indices of subset?
 heiko	nice
 heiko	well
 heiko	original indices?
 blackburn	or initial or any other word
 blackburn	:)
 blackburn	I mean
 heiko	You could find that out, however, its expensive
 heiko	why do you need that?
 blackburn	in multitask you have something liek
 blackburn	0:20 is first task
 blackburn	20:40 is second task
 blackburn	and if you apply to first 20 vectors
 blackburn	you have to use first learned w
 blackburn	or learned model generally
 heiko	cant you do that via the store_model_features?
 blackburn	let me try to think (it's hard for me) :D
 blackburn	heiko: what can I store?
 heiko	mmh
 heiko	I must admit that I dont really get the problem you have
 heiko	for doing xval, you would just need to train/test on different indices
 heiko	these come from the SplittingStrategy
 heiko	Now if you want only certain combinations, just build a new splitting strategy
 blackburn	no I need to tell machine 'it is the second task vector, use second model'
 heiko	which respects you taks etc
 heiko	you should do that via the indices
 heiko	but the cross-validation class just takes the indices and performs train/test
-!- rieck [~rieck@134.76.96.43] has joined #shogun
 blackburn	yeah
 blackburn	damn I need to rearrange vectors somehow
 blackburn	or to construct an explicit mapping
 heiko	I think the splitting strategy would be good for that
 blackburn	because currently it doesn't work with non contiguous tasks
 heiko	no idea...
 blackburn	heiko: I mean now I am using a vector [0,20,40]
 blackburn	to indicate 0:20 is the first task
 blackburn	if I get something random
 blackburn	like [second task vector, first task vector, second task vector, ... ]
 blackburn	it won't work at all
 blackburn	and I don't really like it :)
 heiko	but if you know which indices are which tasks
 heiko	then you could build training/test indices that reflect that
 heiko	right?
 blackburn	yeah
 blackburn	but still time to change things I think
 blackburn	indices vector would be better here..
 heiko	might be, yes
 heiko	blackburn, what do you think about the first section of the tutorial?
 blackburn	let me check
 blackburn	hmm it doesnt' complile here :D
 droopy	yep
 blackburn	heiko: okay so what do you mean first section?
 heiko	for statistical tests
 heiko	really?
 heiko	what error do you get?
 heiko	probably package missing
 blackburn	I just installed
 blackburn	all is ok now
 heiko	I meant more like style
 heiko	I more focussed on the algo basics rather than SHOGUN internals
 blackburn	looks cool
 blackburn	exactly
 heiko	and just saying see shogun class bla
 heiko	but we need a way of doing this
 heiko	I mean a uniform way
 heiko	I currently only added TODO's
 blackburn	well style is something subjective
 blackburn	but I like the style you use and it probably fits to mine
 blackburn	I'll add some stuff in next few days too
 heiko	kk
 heiko	How to reference shogun classes/methods?
 heiko	just mention name?
 blackburn	yeah I think so
 heiko	and then user can look up class reference
 heiko	ok
 heiko	lets put the class names in some courier font
 blackburn	well actually may be we can set up some reference
 heiko	yeah I thought so
 blackburn	yeah \textt
 heiko	but by hand=lots of work
 blackburn	tt
 blackburn	no why by hand
 blackburn	http://www.shogun-toolbox.org/doc/en/current/classshogun_1_1CBinaryFile.html
 heiko	could that be embeddedn in latex?
 blackburn	\defcommand[1]{\shogunclass}{\href{http://www.shogun-toolbox.org/doc/en/current/classshogun_1_1%1.html}{%1}}
 blackburn	try that
 heiko	k will do
 heiko	that might be an idea
 blackburn	ehm
 blackburn	\newcommand
 blackburn	now defcommand :D
 droopy	^_^
 heiko	or just put in url to class reference
 heiko	on dis
 heiko	disc
 heiko	or so
 heiko	dont know
 blackburn	no, why
 blackburn	just use that kind of command
 blackburn	\shogunclass{CBinaryFile} should work
 blackburn	let me try
 heiko	kk
 blackburn	a few mistakes here :)
 blackburn	oh the weather is sweet finally
 heiko	whether?
 heiko	 :)
 heiko	same here
 heiko	first sunny day in ages
 heiko	has been raining all the time
 blackburn	well opposite
 blackburn	was way too sunny :D
 blackburn	heiko: \shogunclass{anything}
 blackburn	heiko: I commited it
 heiko	thats supercool
 heiko	thanks
 heiko	is it also in \tt ? :)
 blackburn	yes
 blackburn	heiko: it points to shogun-toolbox doc
 blackburn	so if you click you see doc of the class *magic*
 blackburn	:)
 droopy	hrhr
 blackburn	heiko: I wonder whether anyone would be able to parse my english in that tutorial :D
 heiko	lol :)
 heiko	well we should correct each other
 heiko	and its a good chance to learn for you :)
 blackburn	I remember I had to fix a lot of wrong usages in my wannabe-jmlr-paper
 blackburn	heiko: I had one idea on authorship
 heiko	which is? :)
 blackburn	something like \authors{Heiko Strathmann} in section/part
 heiko	blackburn, I like the commadn you added
 blackburn	which is shown in footer
 heiko	ok, good idea
 blackburn	so user can kick ass of correct person
 blackburn	:D
 blackburn	heiko: about style or rather desing
 blackburn	design
 blackburn	I remember there was a cool package to set up section headers
 heiko	blackburn, theres the git blamelist for that :)
 heiko	but I agree anyway
 heiko	and I like fancy chapter headers
 heiko	like with capital letters
 blackburn	heiko: I actually like fonts
 blackburn	no
 blackburn	I love fonts
 blackburn	:D
 blackburn	heiko: http://www.tug.dk/FontCatalogue/mathfonts.html which do you like most?
 heiko	lol :)
 heiko	Well ,I think we should stay with the standard since people are used to it.
 heiko	But I love facy capital letters at section beginnings
 blackburn	how can people get used to font? ;)
 heiko	because everybody uses it
 blackburn	I find palatino much more readable than computer modern roman
 heiko	so it sorts in smoothly
 blackburn	heiko: just try it
 blackburn	\usepackage[sc]{mathpazo}
 heiko	dont know, lets just play around with that
 heiko	see what people think :)
 droopy	heiko, he
 heiko	can always change, nice thing about LaTeX
 blackburn	heiko: I just ran some script I used before but now with shogun compiled with optimizations
 blackburn	never thought it depends SO MUCH
 blackburn	10 times faster at least
 heiko	what?
 heiko	blackburn, what did you do?
 heiko	ah alright
 heiko	optimisations
 blackburn	yeah
 heiko	yeah these count massively
 heiko	take for example loops
 blackburn	I never thought so much
 heiko	when you dont optimize, i++ takes three operations
 heiko	++i just one
 blackburn	heiko: do you know whether gcc uses SSE here in loops?
 heiko	when you optimise, its always one
 heiko	no idea
 blackburn	heiko: if I had \infty time I'd analyze asm code
 blackburn	:D
 heiko	blackburn, I did that in uni intensively, completely boring, believe me, you dont wanna do that
 blackburn	heiko: why did you?
 heiko	I am a computer-scientist
 heiko	had to do it
 blackburn	:)
-!- gsomix_ [~gsomix@80.234.25.187] has joined #shogun
 heiko	I already changed lots of these courses to math, but couldnt avoid all :D
 blackburn	well I am too but I hadn't ;)
 heiko	lucky you!
 heiko	gotta have a coffee now, see you later!
 blackburn	see you
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has quit [Quit: Leaving.]
-!- gsomix [~gsomix@80.234.50.198] has quit [Ping timeout: 248 seconds]
 gsomix_	http://cat.shogun-toolbox.org.meowbify.com/
 CIA-18	shogun: Sergey Lisitsyn master * r6eea837 / (7 files in 4 dirs): Introduced random search model selection - http://git.io/SMuH5Q
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has joined #shogun
 blackburn	heiko: I added random search model selection
 heiko	blackburn, random search?
 blackburn	yeah :D
 heiko	what should that give? :)
 blackburn	no idea
 heiko	Actually, for high dimensions, this is some kind of genetical programming approach, where you randomly find a good estimate and then refine from there
 heiko	so useful  in conjunction with other methods :)
 blackburn	heiko: well let it be anyway
@sonney2k	blackburn, sure gcc uses sse123, mmx etc
 blackburn	I see
@sonney2k	blackburn, there is close to no gain to do assembly tweaks
@sonney2k	heiko, ^
 blackburn	sonney2k: no I meant different thing
@sonney2k	blackburn, for example I used a for loop to compute a dot product
 blackburn	it is useful to know what compiler produces
@sonney2k	vs. one that uses sse
 heiko	sonney2k, yeah, also its boring and can be done automatically by software which smart people wrote :)
@sonney2k	about the same speed
 heiko	sonney2k, what do you think about adding a test framework
 heiko	based on unit tests like googletest?
@sonney2k	but when you overoptimize it runs slower on other tasks
@sonney2k	heiko, I am not so convinced... won't enabling the tests we have be sufficient?
@sonney2k	I mean what is the gain?
 heiko	I mean a focus on small scale tests
 heiko	I write a method
 heiko	I add a test for that method
 heiko	like index conversion or so
 heiko	store_model_features
 heiko	with defined input output
 heiko	the test framework is for larger scale tests
@sonney2k	heiko, so sth like SVM cannot be tested then
 heiko	I am more interested on the engineering side , not so much on ML
@sonney2k	ok
 heiko	memory errors
 heiko	guaranteed input/output
 heiko	this stuff
@sonney2k	I understand then - however I can tell that these 'way too big tests' would cover these smaller ones somehow
 heiko	because most errors that pop up are exactly caused by this: somebody forgot a case ..
@sonney2k	at least the buildbot would tell us what failed
 heiko	Thats true, most errors are found
 heiko	however, it always takes ages to debug
 heiko	And so much code is not even tested at all
@sonney2k	well it would point us to the commit that broke *a* test
 heiko	In practice, errors are more complicated
 heiko	for example this mkl stuff recently
@sonney2k	but yes it would take more time to fix this than when you have such small tests
 heiko	It took quite a while till I found the method that was wrong: strore_model_features did a wrong job
 heiko	a test would have detected that
 heiko	I think so
@sonney2k	heiko, the problem here really is that we changed so much recently that basically all the 'big' tests were no longer working
@sonney2k	(think of serialization framework here!)
 heiko	yeah I know
 heiko	I think its a lot about actually running the code with defined input/output at least once
 heiko	so people would think more about stuff
 heiko	rather than quickly committing as soon as the first test case worked
@sonney2k	heiko, I can only tell that even blackburn doesn't always add an example to the code he added. And it is even more difficult with anyone submitting patches...
 heiko	I know, thats much more work
@sonney2k	people just give up
@sonney2k	because writing tests is not a fun taks
 heiko	I know
 heiko	but its crucial to *any* larger software
@sonney2k	you are right - that is why I require an example before I merge anything
@sonney2k	it is useless currently because tests are no longer enabled
@sonney2k	(as in not running)
 heiko	Another reason why I suggest it is that we currently dont really have a place for these kind of tests
 heiko	I am always commiting them to examples
 heiko	but actually many are not examples, way to complicated/technical
@sonney2k	for small tests we don't yes
 heiko	but rather just checks that everything works as I want it to
@sonney2k	in python modular I think examples are nice to show how things work and are great tests too
 heiko	yes they are great for detecting errors
 heiko	but its always hard to debug since you only know that this large example fails
 heiko	I think it would be worth so much if you knew that a method failed
 heiko	another thing: sometimes code is committed too fast. When you would have to write a test, you would think more about what you actually did there
 heiko	more of a incremental development
-!- rieck [~rieck@134.76.96.43] has quit [Quit: ZNC - http://znc.sourceforge.net]
@sonney2k	heiko, I don't disagree - I just don't know who would write those tests
-!- rieck [~rieck@134.76.96.43] has joined #shogun
 droopy	rieck :>
 heiko	When somebody writes code, it has to be tested anyway, people do that locally
 heiko	you can't program without tests
 rieck	droopy: old chap!
 droopy	what
 heiko	so why not adding that bit of extra work to nail it down
 heiko	I suggest a rule: each new method has to get a test
 heiko	just all code covered at least once
 heiko	its not that much work actually
 heiko	and since they are all small scale, its easy to write them
 heiko	since you already wrote the method
@sonney2k	heiko, yeah I use sth that I turn into an example examples (in python modular)
 heiko	yeah like that, but only small scale
 heiko	imagine every method had one of these
 heiko	bug tracing would be so easy
@sonney2k	well any method you modify and any method that gets added
 heiko	and methods would be more reliable
 heiko	yeah
 heiko	so over the time, we collect more and more
-!- rieck [~rieck@134.76.96.43] has quit [Client Quit]
 heiko	and also, one could make it madatory that all tests (also old ones) pass and have no mem-leaks
 heiko	=less new bugs
 heiko	(at least in my fantasy its like this :)
 droopy	*g* 8)
 heiko	well, its just a suggestion
 heiko	Now with all the new people, might be easier than a year ago
@sonney2k	I wouldn't mind - lets ask the others: blackburn, n4nd0, wiking - opinions on  new rule: "for any method you modify and any method that gets added a test is required"
 heiko	I would add: "with defined input/output assertions"
 blackburn	how?
@sonney2k	blackburn, leave aside the how for now.
 n4nd0	I share heiko's opinion, I think it is a good idea that will decrease the number of bugs introduced
 blackburn	I don't mind
@sonney2k	ok then - so heiko any ideas how to do that practically then?
 heiko	what about a new folder new to example called tests
 heiko	choose a free framework
 heiko	copy folder structure from libshogun
 heiko	and simply add units there
 heiko	add additionaly target to make
@sonney2k	heiko, so these would be all .cpp right?
 heiko	yeah
 heiko	Could add some for other languages but thats more complicated and I think the core ist most important
 heiko	modular could in fact be handled in examples, and usually one does not change things too much in there
 heiko	except for gsomix currently, but thats covered through new examples he makes
@sonney2k	so this would mean we have mini-unit tests and huge regression tests
 heiko	yeah
@sonney2k	gsomix_, btw - any news on the PR?
 blackburn	I actually agree we are BUG-O-TRONIC
 gsomix_	sonney2k, I want to add setters to my PR.
-!- rieck [~rieck@134.76.96.43] has joined #shogun
 wiking	heiko: still here?
 heiko	wiking, yes
 wiking	heiko: i've started off with the following structure
 wiking	add to each class a _unittest.cc implementation
 wiking	that has the unittests
 heiko	each class one .cpp file with tests for each method?
 wiking	and then just modified the Makefile.template that it complies it with different flags (i.e. addig the flags for gtest/gmock
 heiko	I would rather go for each shogun .cpp file gets one *_unittest.cpp
 heiko	instead of each class
 heiko	nice
 wiking	heiko: well that's the idea
 wiking	and then you have a main_unittest.cc
 heiko	but the tests should be in a different dir
 wiking	that calls all the tests
 wiking	heiko: i've tried that one as well
 wiking	like
 wiking	src/testing
 heiko	like a copy of the src dir
 heiko	one could symlink all the .cpp files
 wiking	but it's very bizzare to have the same dir structure
 wiking	just for the unittesting
 wiking	imho
 heiko	really? well, ok
 heiko	so same dir
 wiking	this way you have to create right next to your implementation
 wiking	your _unittest.cpp implementation as well
 wiking	but then again
 heiko	year, but it becomes a bit messy then
 heiko	many files
 wiking	this can change
 wiking	i'm ok with anything
 wiking	i've just started of with SGVector
 wiking	to define some unittest
 heiko	yeah, dont know, blackburn, sonney2k, ^
 heiko	yeah good place to start
 heiko	like multiply, fill with zeros etc
 wiking	yes
 wiking	exactly
 wiking	dot product
 wiking	etc.
 heiko	we should somehow add a memory test
 wiking	heiko: that's tricky
 heiko	that it *always* fails if there is a memory leak or something
 wiking	heiko: unittest is not meant for that
 heiko	I know
 wiking	heiko: but there are various solutions
 heiko	we could add a script to run all these with valgrind
 heiko	like blackburn did for the examples
 wiking	heiko: well in some way that's already there in examples/libshogun
 heiko	the thing is: it should be automatically enabled
 wiking	heiko: the problem is that gtest for example
 heiko	otherwise, one forgets
 wiking	does some tricky things
 wiking	and thus valgrind will sometimes start crying
 heiko	so valgrind complains about that?
 wiking	for no reason
 wiking	yes
 heiko	oh
 heiko	thats bad
 wiking	or at least this is what i've read about
 wiking	at some forums
 wiking	but there are other ways
 wiking	the problem is that those ones are system specific
 heiko	I think we should definately check the tests for memory in some way
 wiking	i.e. depends on the OS
 heiko	mh, other solutions?
 wiking	so for win there's a straightforward
 wiking	http://msdn.microsoft.com/en-us/library/e5ewb1h3(v=vs.80).aspx
 wiking	but that's really for M$
 wiking	aah way
 wiking	wait!
 wiking	i remember now
 wiking	so yeah i forgot
 wiking	boost.testing has an option
 wiking	for memory leak detectio
 wiking	http://www.boost.org/doc/libs/1_44_0/libs/test/doc/html/execution-monitor/user-guide.html
 wiking	buut that's actually m$ only as well
 wiking	so i'll push soon my 'gtest based' attempt for unittest into my repo
 wiking	so you can comment on it
 heiko	wiking, ok great work, we can still think of how to detect memory issues
 wiking	heiko: yeah i've googled some
 wiking	but w/o luck
 wiking	i think valgrind is still the best way to go in this case
 heiko	ok, well lets see how it behaves with gtest
 wiking	i mean osx has it's on way as well
 wiking	but that's as well osx
 wiking	and i dont think we want to handle all the OSes 1-by-1
 wiking	the funny thing about gtest is actually
 wiking	that you can even define that what should be the execution time of a given test
 wiking	so if the test doesn't run within that time it'll still report it as fail
 wiking	so it has some good stuff in there ....
 heiko	I agree with the OS's
 heiko	maybe thats second step
 heiko	basic tests first
 heiko	theres probably lot to discuss with the others on your patch
 wiking	but yeah i think basic unittesting would be already a good thing to have
 wiking	so that really we can point out if there's suddenly something broken
 wiking	heiko: yeah i've just felt that something should be done about it and didn't really felt for discussion
 wiking	we'll see when there's already something to discuss about
 heiko	agreed, nice! :)
 wiking	ok i'm aw now a bit to polish the example
 wiking	and then i'll send a mail to the list
 wiking	so that anybody can add their thoughts
 heiko	great work wiking, Ill try to add something tomorrow then
 wiking	heiko: okie
 blackburn	wiking: i'll add multiple output multiclass labels for task 1
 blackburn	we don't support it now actually
 blackburn	thanks %deity we have well designed multiclass ;)
-!- heiko [~heiko@host86-177-183-33.range86-177.btcentralplus.com] has quit [Quit: Leaving.]
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Quit: leaving]
 CIA-18	shogun: Sergey Lisitsyn master * r2b6dcd3 / (14 files in 3 dirs): Changed task indexing way of MALSAR based algorithms and task api in general - http://git.io/5eGMZA
 shogun-buildbot	build #84 of bsd1 - libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/84  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
 wiking	blackburn: yeey
 blackburn	wiking: what?
 wiking	on your prev message
 wiking	i didn't see it
 CIA-18	shogun: Sergey Lisitsyn master * r7a0f065 / (2 files in 2 dirs): Fixes for feature blocked logistic regression - http://git.io/jtO7tA
 shogun-buildbot	build #85 of bsd1 - libshogun is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/85
 gsomix_	sonney2k, around?
 wiking	bujjaaa
 wiking	this works \o/
--- Log closed Sun Jul 22 00:00:17 2012
