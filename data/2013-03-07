--- Log opened Thu Mar 07 00:00:04 2013
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Quit: leaving]
-!- FSCV_ [~FSCV@173.254.212.46] has quit [Quit: Leaving]
-!- eduvfsilva [~eduvfsilv@189-25-47-127.user.veloxzone.com.br] has joined #shogun
 shogun-buildbot	build #314 of nightly_default is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/nightly_default/builds/314
-!- eduvfsilva [~eduvfsilv@189-25-47-127.user.veloxzone.com.br] has quit []
-!- sumit [ca4eaca2@gateway/web/freenode/ip.202.78.172.162] has joined #shogun
-!- n4nd0 [~nando@n145-p185.kthopen.kth.se] has joined #shogun
-!- zxtx [~zv@cpe-75-83-151-252.socal.res.rr.com] has joined #shogun
-!- hoijui [~hoijui@dslb-092-078-043-220.pools.arcor-ip.net] has joined #shogun
-!- sumit [ca4eaca2@gateway/web/freenode/ip.202.78.172.162] has quit [Ping timeout: 245 seconds]
-!- n4nd0 [~nando@n145-p185.kthopen.kth.se] has quit [Ping timeout: 248 seconds]
-!- n4nd0 [~nando@n145-p185.kthopen.kth.se] has joined #shogun
-!- n4nd0 [~nando@n145-p185.kthopen.kth.se] has quit [Quit: leaving]
-!- blackburn [~blackburn@85.114.170.181] has quit [Quit: Leaving.]
-!- blackburn [~blackburn@85.114.170.181] has joined #shogun
-!- n4nd0 [~nando@n145-p185.kthopen.kth.se] has joined #shogun
 n4nd0	blackburn: indeed, from 0.98 to 0.958 seems a quite large
 n4nd0	I hope float precission is better than that :)
 blackburn	n4nd0: heiko fixed something about custom kernel - I hope that
-!- n4nd0 [~nando@n145-p185.kthopen.kth.se] has quit [Quit: leaving]
-!- hoijui [~hoijui@dslb-092-078-043-220.pools.arcor-ip.net] has quit [Read error: Operation timed out]
 wiking	booojaaaah
-!- n4nd0 [~nando@n145-p185.kthopen.kth.se] has joined #shogun
 blackburn	wiking: welcome back
 wiking	shitfucky ;) <phdwritingsessionon>
 wiking	and even my ssh is lagging
 blackburn	wiking: so working on a thesis?
 wiking	yeps
 wiking	somethinglikethat
 wiking	or at least tyring
 wiking	*trying
 blackburn	I see
 n4nd0	wiking: what's the name of your thesis?
 n4nd0	something latent :) ?
 blackburn	hah I know a few latent gays (I suspect so)
 blackburn	sorry couldn't resist :D
 wiking	:)
 n4nd0	hehe
 wiking	nice one
 wiking	:)
 blackburn	wiking: I remember you were curious about t-SNE
 blackburn	wiking: I arranged with laurens to GPL his Barnes-Hut-SNE and will push it very soon
 wiking	\o/
 wiking	woah cool
-!- FSCV [~FSCV@173.254.212.46] has joined #shogun
-!- heiko [~heiko@nat-164-89.internal.eduroam.ucl.ac.uk] has joined #shogun
-!- ashar799 [4e61ecae@gateway/web/freenode/ip.78.97.236.174] has joined #shogun
-!- n4nd0 [~nando@n145-p185.kthopen.kth.se] has quit [Quit: leaving]
-!- hoijui [~hoijui@141.23.80.177] has joined #shogun
 ashar799	Hi I was wondering if there are any plans to incorporate Gaussian Process Latent Variable Model (by Neil Lawrence) and Gaussian Process Dynamical Variable Model (Wang) for Dimensionality reduction
 ashar799	I am doing my MS thesis on implementing these two models for different data sets
 ashar799	and have seen that having more Dimensionality reduction techniques is one of the proposals for GSoc 2013
 blackburn	ashar799: we've got no concrete plans yet but we will consider that too!
-!- hoijui [~hoijui@141.23.80.177] has quit [Ping timeout: 252 seconds]
@sonney2k	blackburn, wiking, heiko - can any of you reproduce the custom kernel issue?
@sonney2k	(because I dont'...)
 blackburn	sonney2k: I can't
 heiko	sonney2k:  nope
@sonney2k	must be some very old version of shogun
@sonney2k	or even numpy....
 heiko	sonney2k: I suspect she just downloaded and compiled shogun but has an old version installed from the repository or so
@sonney2k	heiko, blackburn because it seems to me that the matrix' values are somehow shuffled in memory
@sonney2k	some kind of fortran/c order issue
 heiko	yeah, lets wait for her version :)
@sonney2k	so the 0.958 (that appears in the orginal numpy matrix) is at the wrong position
 blackburn	popular issue :)
@sonney2k	we had such bug but years ago...
@sonney2k	not even sure blackburn was still around :D
 blackburn	haha
 heiko	hehe :)
 blackburn	sonney2k: I have two years anniversary soon
@sonney2k	so before the dawn of the ages
@sonney2k	I can hardly remember the time before you were part of the team
@sonney2k	actually same holds for heiko...
 heiko	yeah, it has been a while :)
 blackburn	sonney2k: 2011-03-29 is the day I joined #shogun on a sleepless night to show my broken english
 blackburn	:D
 heiko	sonney2k: blackburn btw I am currently writing my gsoc project description
 blackburn	nice, I should do the same
 blackburn	and proposal
 heiko	proposal?
 blackburn	heiko: yes we should make a gsoc proposal
 heiko	blackburn: I see :)
 heiko	let me know where I can help
 blackburn	heiko: I'll create google doc for that I think
 heiko	good idea
 heiko	blackburn:  for the project, I think I will create a pdf since I need some math, and then post the abstract on the page along with the pdf
 blackburn	heiko: maybe mathjax?
 blackburn	http://lisitsyn.github.com/tapkee/methods/lle.html like that
 heiko	blackburn: agreed!
 blackburn	sonney2k: heiko: I received 'yes' from laurens - this means we can add t-SNE
 blackburn	the question is - should I put it to latest shogun before release?
 heiko	blackburn: what? :)
 blackburn	heiko: I was convincing him to GPL his code
 heiko	blackburn: I would not add anything right now, better fix bugs :)
 heiko	blackburn: Ah nice work!
 blackburn	heiko: yeah I would do the same
 blackburn	sonney2k: heiko: question two
 blackburn	I got jedi macros skills
 heiko	?
 heiko	blackburn:  thats good :) I hate macros
 blackburn	I think I can replace fields of our classes
 blackburn	and its getters/setters/sgadds
 blackburn	with just one macro may be
 blackburn	not for that version of course
 heiko	blackburn: example?
 blackburn	heiko: field(float64_t,width)
 heiko	blackburn:  the they got registered automatically?
 blackburn	yes and getters/setters are generated
 heiko	sounds nice
 blackburn	heiko: or even
 heiko	but, also a lot of work
 blackburn	field(float64_t,width,positive)
 heiko	positive?
 blackburn	yeah, means it will be checked
 blackburn	to be positive
 blackburn	heiko: take a look - I did somewhat simplified version of that in tapkee: https://github.com/lisitsyn/tapkee/blob/master/tapkee/tapkee_methods.hpp#L491
 heiko	that is cool stuff
 blackburn	heiko: I have >20 methods with 2-7 parameters each so macroses appeared as the only way to handle this without megaLoC
 heiko	blackburn:  but do you think its a good idea to do this for shogun?
 blackburn	heiko: I don't know - that's why I am asking
 heiko	blackburn: I would be afraid that everything will be broken for quite some time
 blackburn	heiko: yes that's '-'
 heiko	and that it is infinite work to apply this to all existing classes
 heiko	and that many bugs slip through our fingers
 heiko	since these things are usually a bit unpredictable
 heiko	also, doesnt it make debugging a bit complicated since you are not reading the code anymore?
 heiko	especially when mixed in
 heiko	blackburn: you will like this:
 heiko	http://googleblog.blogspot.co.uk/2012/06/using-large-scale-brain-simulations-for.html
 blackburn	heiko: getters/setters is a pure evil
-!- ashar799 [4e61ecae@gateway/web/freenode/ip.78.97.236.174] has quit [Quit: Page closed]
 blackburn	heiko: they ~never have bugs
 blackburn	heiko: and if they have - automagic resolve that
 heiko	blackburn: I like the part about reference counting for SGOs :)
 heiko	but I am a bit afraid of  this, the code you see will not be the code that the compiler sees anymore
 blackburn	heiko: that's good I can't see what compiler sees
 blackburn	I'd really like to not see new/delete and indexes
 blackburn	it is a great misconception such level means performance
 blackburn	I hope you don't think so :)
 heiko	blackburn: agreed, I hope you know what I meant
 heiko	blackburn:  I like the idea
 heiko	blackburn: so you think we should move on to a modern language for shogun? :D
 blackburn	heiko: it is kind of exceptional for me as I never debugged getters and setters
 blackburn	but they take so much space
 heiko	blackburn: true, but sometimes you dont want to have them
 heiko	eclipse can do them for you btw
 blackburn	heiko: no, it is different
 blackburn	generating and code folding is a halfway
 blackburn	heiko: well modern language is C++
 blackburn	I see no other alternative :)
 blackburn	even if I had resources to translate all the code - no idea which language could it be
 heiko	same
 heiko	probably google-go :D
 heiko	or my favourite: brainfuck
 blackburn	heiko: shakespeare
 heiko	haha :)
 blackburn	heiko: last year we were thinking about chef interface
 heiko	chef?
 blackburn	heiko: yeah there is a language
 heiko	i see
 heiko	btw interfaces:
 heiko	blackburn: matlab is the most important one and it is static only
 heiko	that is a shame
 blackburn	http://www.dangermouse.net/esoteric/chef.html heiko
 heiko	so much potential lost
 heiko	We should have a gsoc project to implement matlab for swig
 blackburn	heiko: I have nothing to say about that :) we should push it in swig
 heiko	(and shogun afterwards)
 heiko	same with R
 blackburn	but I guess matlab is quite shitty in that sense
 heiko	Matlab and R are the main languages used by the people who could use shogun
 heiko	blackburn:  really?
 heiko	I think it should be ok, the new matlab has object orientation and everything
 blackburn	heiko: I guess SWIG people just can't get some required info
 blackburn	proprietary stuff
 heiko	blackburn: reading a bit through the mailing lists, I understood that just nobody is doing it
 blackburn	really? I see
 heiko	there even was a student who did his project on this
 heiko	but sonney2k should know more about this
 blackburn	heiko: there is a SwigJS, huh!
 blackburn	heiko: I understand matlab is important but I do not know how to proceed
 heiko	blackburn: same, I hoped maybe sonney2k has an idea
 heiko	there also was this MSC project
 heiko	let me find the link
 heiko	initial code
 heiko	https://github.com/twiho/Matlab-in-SWIG
 heiko	thesis 1
 heiko	http://is.muni.cz/th/256412/fi_b/thesis.pdf
 heiko	thesis 2
 heiko	http://is.muni.cz/th/256594/fi_m/thesis.pdf
 heiko	blackburn: that is a lot of stuff to start with :)
 blackburn	heiko: it doesn't sound like a something easy
 blackburn	we should discuss it with swig guys
 heiko	blackburn:  indeed
-!- hoijui [~hoijui@dslb-092-078-043-220.pools.arcor-ip.net] has joined #shogun
 heiko	blackburn:  would be so good to have
 heiko	blackburn: you once mentioned something about openmp?
 blackburn	heiko: well, yes
 heiko	or was that openmpi?
 blackburn	heiko: no, openmpi is not really interesting for me
 blackburn	it is just implementation :)
 blackburn	of mpi standard
 heiko	my question is:
 heiko	if I have some parts of my algorithm that should be parallelised
 heiko	and the number of parallel parts is large
 heiko	is there anything I can do in shogun=?
 blackburn	heiko: pthreads is our traditional way
 heiko	but pthreads is restricted to one computer
 heiko	blackburn: do you have any idea how hard it would be to add the possibility that these "threads" are distributed within a cluster of computers?
 blackburn	heiko: MPI is the only way to do that
 heiko	blackburn:  have you used that?
 blackburn	yes
 heiko	blackburn: tell me your feelings about it
 blackburn	heiko: w/o some additional routines to send/recv messages I think the code would look like a mess
 heiko	ok
 blackburn	heiko: the thing I am mostly worried is that I am totally unsure it is possible to use SWIG+MPI
 heiko	so thats not a good idea
 heiko	blackburn: its just: parallelisation is fine. But if one wants to do somethign really large scale, one needs more than one computer
 blackburn	heiko: actually we should transform to client/server
 heiko	blackburn: maybe shogun is not the right boat for this
 blackburn	I think it would be awesome
 heiko	also most methods inside shogun dont really scale
 blackburn	heiko: bindings could stay but creating SVM would be to send a packet over a network
 heiko	blackburn:  I see
 blackburn	and then master shogun could create workers on cluster machines
 heiko	so you want to create kind of stub objects
 blackburn	yes
 blackburn	I feel 'eureka' in my head now
 blackburn	I didn't think about that in that mean before
 heiko	which methods could use this?
 heiko	svm certainly not :)
 blackburn	heiko: well it doesn't mean we should always work on cluster
 blackburn	if method supports that thing - run it on cluster
 heiko	yeah that would be sexy
 blackburn	heiko: even shogun name makes a lot of sense now for me :D
 heiko	so in the code, you just allocate workers
 blackburn	as if shogun takes the rule of workers
 heiko	and they are either distributed automatically, or executed locally
 blackburn	yes
 blackburn	shogun server + shogun bindings
 heiko	blackburn: that should not be too hard to implement in fact
 blackburn	they are loose coupled over a network
 blackburn	uh
 blackburn	heiko: isn't that a great idea? I get driven by it
 heiko	blackburn: yeah, I just wonder whether there is no framework for this, since it has certainly been done before
 blackburn	heiko: framework for what exactly?
 heiko	this structure
 heiko	of allocating workers
 heiko	for your tasks
 blackburn	heiko: MPI/MapReduce :)
 blackburn	a lot of
 blackburn	I believe it should be generalized
 heiko	yes, this is what I mean, why not use MPI?
 blackburn	heiko: I didn't say we shouldn't use MPI
 blackburn	shogun client (bindings) <-> shogun server <-> MPI backend
 blackburn	OR
 blackburn	shogun client (bindings) <-> shogun server <-> map reduce backend
 blackburn	anything you like :D
 blackburn	hmm should I left my job and do that ? :D
 heiko	blackburn: haha :)
 heiko	blackburn: so say we had that working. Which methods would be able to properly use it?
 blackburn	heiko: I do not know about machine learning
 heiko	blackburn: my linear time MMD would, it is X times faster for X additional workers
 heiko	but apart from that?
 blackburn	but I realize it could be a great framework
 heiko	if I implemented statistics stuff then this would also be great
 blackburn	heiko: even having everything in one worker *with capabilities* of doing that cluster later is just great
 blackburn	heiko: algorithms will come I think
 heiko	blackburn: thats true, but also very easy to achieve without the need to mess around with client/server/mpi stuff
 blackburn	heiko: with your own boilerplate code?
 blackburn	it is not a solution
 heiko	I run stuff on clusters all the time, thats very easy if you just use one process
 heiko	just upload program, write a 5 line allocation script and submit
 heiko	I agree it would be easier with a framework, but not that much that its worth to put all the effort into that
 blackburn	heiko: ha!
 heiko	But I really like the idea anyway
 blackburn	it is worth as some things are impossibru
 heiko	since you are right: algorithms can come then once this exists
 blackburn	you can't make MMD faster now, right?
 heiko	what do you mean?
 blackburn	heiko: with cluster
 heiko	with the shogun implementation, no
 blackburn	you'd be able to do that with proper framework
 heiko	yes
 heiko	thats why I asked, which methods would benefit
 heiko	since MMD is not so important for practical problems :D
 blackburn	heiko: main thing - you can write your script on your laptop but run somewhere else
 heiko	blackburn: agreed
 heiko	so how would this work
 blackburn	heiko: just stubs
 heiko	I have some interface class to the server
 heiko	and I can submit workers
 heiko	which have an interface to start/stop/result/bla
 blackburn	you don't care about workers
 blackburn	you mean internally?
 heiko	yes
 heiko	from implementation side of view
 blackburn	yeah something like that
 heiko	and with that I can implement my new SVM
 heiko	for example
 heiko	lets say multiclass svm
 heiko	with one against all
 blackburn	you define how workers should act
 blackburn	and how data should be distributed
 heiko	so I package all the different problems into one worker and submit
 heiko	wait
 heiko	and return locally
 heiko	and the server distributs them on any kind of machine
 blackburn	why one worker?
 heiko	either with shared memory or completely separate
 blackburn	yeah
 heiko	no each problem into one worker
 heiko	each classification task of the many
 blackburn	heiko: if we go crazy it could be even heterogeneous in means of technology
@sonney2k	heiko, blackburn about interfaces & swig...
 blackburn	5 MPI workers and some MapReduce farm and a GPU here
 heiko	blackburn: that would be certainly crazy :D
 blackburn	heiko: it sounds like a crazy dream but
@sonney2k	the issue I am having with swig & R is that the refcounting doesn't work
@sonney2k	which means one gets crashes or memory leaks
 blackburn	heiko: imagine speedups you can get
 blackburn	sonney2k: yeah I know about R
 heiko	sonney2k: I see, what do the swig people say to that?
 blackburn	sonney2k: the main concern is matlab
 heiko	blackburn, so this would be like matlab's parfor, even cooler would be if the workers could communicate, but maybe this is a bit too much for now. even the independent jobs on a cluster would help massively
 blackburn	heiko: no they *should* be able to communicate from the very beginning
@sonney2k	heiko, I reported that 2(3?) years ago but this one R maintainer did not really care. we would need to craft a minimal example showing the problem
@sonney2k	blackburn, mine is not matlab is *crap*
@sonney2k	I can easily live w/o matlab
@sonney2k	use octave
@sonney2k	same syntax same everything
@sonney2k	and blackburn what you are describing is e.g. http://graphlab.org/
 heiko	sonney2k: I agree, but we would reach a much bigger audience with a modular matlab binding
 blackburn	sonney2k: haha
 blackburn	sonney2k: invented a wheel again
@sonney2k	heiko, I don't see a problem doing it (no more than doing that for octave) but it needs someone with deep swig skills. if you look at the mailinglist archive of swig you would see that there was a guy Xavier sth (who wrote the octave bindings) with whom I tried to start this maybe 4-5 years back
@sonney2k	but then he left (also no longer maintaining the octave part)
 heiko	sonney2k: I see
 blackburn	sonney2k: well graphlab with language bindings :D
@sonney2k	heiko, I understand that some researchers still use matlab but that is not really my focus any longer at least
@sonney2k	haven't been using matlab for years and I am much happier with python ...
@sonney2k	it is fast has tons of bindings and free software
 blackburn	sonney2k: researchers are lame with real programming languages for some reason
 heiko	sonney2k: I like python too, but I cannot send it to people.
 heiko	sonney2k: even worse, the number of people who are using mac grows like crazy here
 blackburn	heiko: why? mac is ok for me
 blackburn	well I never used it :D
@sonney2k	heiko, but python and osx go well together
 heiko	sonney2k: blackburn:  about that parallel thing. graphlab has its focus a bit different. I think having some kind of independent parallel engine would be really helpful
 blackburn	sonney2k: idea is: objects in our bindings become stubs to represent objects in the serverspace
 heiko	sonney2k: I really dont want to get into this python-matlab or X-Y discussion, I just think it would be great to properly support it. But it seems tricky
 blackburn	server could run it as is or with some other backend
@sonney2k	blackburn, the issue with going massively parallel is that I don't have access to such cluster park
 blackburn	sonney2k: I'd like to keep this idea in mind and implement and prototype
 blackburn	and then see if it is nice
 heiko	blackburn: maybe we could have a separate branch or so
 blackburn	no
 blackburn	well client part yes
 blackburn	:)
 blackburn	but server-side should be from the blank I am afraid
 heiko	so?
@sonney2k	blackburn, well I am stuck on many core machines
 blackburn	okay my idea - I will try to implement the whole stack
 blackburn	with one distributable algorithm
 blackburn	but it would take months I think
 blackburn	sonney2k: we don't use either multicore or cluster machines
 heiko	blackburn, I dont know whether this should be so massive due to the lack of algorithms that exploit this
 heiko	I think if we had something that could handle independent jobs, this would help a lot
 blackburn	heiko: jobs should not really be independent
 blackburn	they should be independent as possible
@sonney2k	heiko, yeah sure I understand. I don't care about matlab though and it is >5 years since I've seen a really talented guy with whom one could have done this within 1-2 months
@sonney2k	and I don't have the time nor will to do it
@sonney2k	if at some point swig perfectly supports R / matlab we can easily switch to using it
 heiko	sonney2k: do you know the swig people?
 heiko	well?
@sonney2k	the only question that remains is what do we do with all the static interfaces?
 heiko	maybe we could push them to do something in gsoc
@sonney2k	heiko, not well enough
@sonney2k	I met some of them at gsoc mentor summit
 heiko	what are their current goals?
@sonney2k	heiko, no idea
@sonney2k	heiko, they just switched over to using github
 blackburn	oh finally :D
 heiko	sonney2k: I saw that  :)
@sonney2k	https://github.com/swig
@sonney2k	(and git)
 blackburn	I see no reason to use anything else
@sonney2k	they were on svn for years
 heiko	gsoc 2012 had a new module for java script
@sonney2k	so heiko blackburn - what do we do with the static interfaces?
 blackburn	https://dl.dropbox.com/u/10139213/shogun/tsne.png t-sne unrolls swissroll in a strange way :D
@sonney2k	these are becoming more and more obsolete...
 heiko	sonney2k: I dont know, I never added something until shortly. Wanted to add some MMD stuff and found it rather painful
 blackburn	sonney2k: drop :D
 heiko	l
@sonney2k	and the danger is that people think this is shogun
@sonney2k	I mean all shogun can do
 blackburn	haha yeah
@sonney2k	blackburn, yeah I would love to drop them
 blackburn	is sg('set_shit')
@sonney2k	or at least hide them
 heiko	sonney2k: hide
 heiko	many people are using shogun as an libsvm interface
 heiko	from matlab/R
@sonney2k	so there will be no (documented) configure option
 blackburn	sonney2k: could we separate them to another project?
@sonney2k	blackburn, yes sure
 blackburn	then lets do it this way
@sonney2k	heiko, but libsvm has a matlab interface too
 blackburn	sonney2k: 'sorry we can't support it, it is an outdated project'
 blackburn	haha shogun as a libsvm interface, really?
 heiko	sonney2k: I know, but there are not all those kernels right?
 blackburn	hehe!
 blackburn	heiko: if they are still willing to use it this way we just tell them to install that different thing
 heiko	blackburn: sonney2k agreed!
 heiko	sonney2k: blackburn, btw I will probably soon implement a little module into graphlab, and I am thinking of linking against shogun for kernel/feature implementations
@sonney2k	heiko, why not
@sonney2k	heiko, blackburn - we should release shogun 2.1
 blackburn	hah sure
@sonney2k	too bad wiking didn't push it :(
 heiko	sonney2k: have you seen this mkl bug?
@sonney2k	heiko, ?
 heiko	I updated the issue
 heiko	added an example
 heiko	to reproduce
 heiko	sonney2k: blackburn what is missing for 2.1?
 heiko	apart from removing warnings?
 blackburn	heiko: I am working on tapkee still.. no idea where to stop
 heiko	blackburn: just stop adding new things :)
 blackburn	I can't
 blackburn	heiko: chris added 'including more recent' algorithms to the paper
 blackburn	and I had to add a new algorithm because of that
 blackburn	:D
 heiko	blackburn: but that does not have to be in shogun2.1 right?
 blackburn	heiko: yes and now I am in trouble
 heiko	sonney2k: blackburn I got my MMD stuff finally ready, also tutorial updated, new tests/examples, and I commented on all the bugs and solved some, so from my side, we can go for it
@sonney2k	blackburn, heiko so waht is missing for shogun 2.1?
@sonney2k	I am under the impression we are in good shape for a release...
 blackburn	hahah guys have you seen that? http://www.youtube.com/watch?feature=player_detailpage&v=CL3jvaq-VO4
 heiko	sonney2k: I agree
 heiko	blackburn:  no
 heiko	not yet :)
 heiko	sonney2k:  have you heard something from the guy who impolemented the streaming basics?
 blackburn	it is not required to watch all 15 mins but the more you listen to it the more normal it becomes
@sonney2k	blackburn, terminate called after throwing an instance of 'tapkee::eigendecomposition_error'
@sonney2k	  what():  eigendecomposition failed
 blackburn	sonney2k: cool! where?
@sonney2k	we have some failing examples blocking the release...
@sonney2k	http://shogun-toolbox.org/buildbot/builders/nightly_default/builds/314/steps/test/logs/stdio
 wiking	sonney2k: i was just about to tell that maybe it'd be a good idea to switch on the bsd bot to clang instead of gcc
 heiko	wiking, hi !
 blackburn	sonney2k: how did that appear after perceptron?
 heiko	wiking, could you change the unit-tests to all be compiled/executed seperately? this would make things much easier
 wiking	heiko: whatyamean?
 wiking	heiko: aaaah
 blackburn	sonney2k: I don't mind to fix it but where it is..
@sonney2k	heiko, btw I wanted to comment on how examples are written in shogun and how they are documented
 heiko	wiking, so currently if you run make unit-tests
 wiking	heiko: why's that good?
 heiko	verything runs at once
 heiko	sonney2k: yes?
@sonney2k	heiko, you write your example in the undocumented/<lang>/ folder
 wiking	heiko: yeah that's the purpose of unit test
 wiking	heiko: i mean now i get waht you want
 wiking	heiko: each unit test is a separate executable
 heiko	wiking yes
 wiking	it's doable imho
 wiking	but still i dont see why's that good
 heiko	sonney2k: so since the unit-tests finally arrived the examples (at least mine) will change. less testing things, more illustration
@sonney2k	heiko, then you write the description of the example separetely in examples/descriptions
 heiko	wiking, if I add a new test and it fails I cannot run it isolated
 heiko	sonney2k: under the same name?
@sonney2k	it is then prepended to each example of the same name for each $LANG
 wiking	heiko: what if i make you selectable?
 wiking	heiko: so there's still only one executable
 wiking	heiko: but you can specify which test u wanna ran on command like
 wiking	like
 wiking	make unit-tests SGVector
 wiking	or something like that?
 heiko	sonney2k: I see
 heiko	wiking, yes that would be good
 wiking	and make unit-test would be doing the whole test by default
 heiko	wiking, also compile shogun with --enable-trace-mallocs and run the tests
 wiking	heiko: mmmm
 heiko	wiking: this will show loads of loads of memeory leaks
 wiking	where?
 heiko	wiking:  in configure
@sonney2k	heiko, so that is how it has been for a few years - now there is one exception: the examples in $lang/graphical
 wiking	or you mean it would be good to have tests runnning  --enable-trace-mallocs ?
 heiko	sonney2k: ok, thats good to know
@sonney2k	these are not documented
@sonney2k	heiko, examples should be written as functions and called
 wiking	heiko: bcoz the thing is the unit test flags really depends on ./configure flags... and that is pretty much up to the user...
 heiko	wiking: no, I just use trace-mallocs by default, and it creates this annoying output at the end
 wiking	heiko: ok i'll check
@sonney2k	heiko, this way we get integration tests for free!
 heiko	sonney2k: ok! I changed one of mine recently to that
 heiko	sonney2k: btw the graphical examples are a problem: the get outdated quite quickly
 heiko	since not detected by make tests
 heiko	but we cannot run them since they dont terminate alone
 heiko	any ideas for that?
@sonney2k	heiko, unfortunately no one is taking care of examples/integration tests
 heiko	sonney2k: these big tests?
@sonney2k	heiko, yes - very useful to know that the svm actually still produces the same result with this particular kernel and data :)
 blackburn	sonney2k: I will test it w/o arpack now
 heiko	sonney2k: indeed!
@sonney2k	heiko, and it is testing all the serialization stuff too btw
 heiko	sonney2k: what is the state of that?
@sonney2k	for each and every method
 heiko	sonney2k: I have to admit that I never looked at this
@sonney2k	heiko, look at http://shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/869/steps/test%20python_modular/logs/stdio
 heiko	sonney2k: so how does it work?
 blackburn	OOOOOOOOOPS
 heiko	how is each an every method tested?
 heiko	sonney2k: I added similar things to my unit-tests
 heiko	like the result on this fixed data has to be that
@sonney2k	heiko, go to shogun/tests/integration/python_modular
@sonney2k	there is tester.py
@sonney2k	and generator.py
@sonney2k	*very* small scripts
@sonney2k	generator.py does nothing more than run one example with the parameters specified in that example
@sonney2k	and write the output to a file
 heiko	sonney2k: I see thats why some examples have parameters
@sonney2k	tester loads that output and runs the example and really 1:1 compares the stuff
@sonney2k	like binary comparison
 heiko	sonney2k: so this is to ensure that methods do not change
@sonney2k	for this to to work you need deterministic algorithms
@sonney2k	that is no parallel stuff
@sonney2k	and init random number generator
@sonney2k	exactly
 heiko	I see
@sonney2k	and if they change
@sonney2k	just run generator.py with the example name that needs updating
 heiko	so I added a lot of assertions in the unit-tests for similar things: fixed seed, fixed data, assert result
 heiko	do you think its a bad idea to have two separate places where this is happening?
@sonney2k	heiko, yes
@sonney2k	just return the stuff in the function you want to see asserted
 heiko	sonney2k:  but how do I add the results
 blackburn	sonney2k: found a bug, soon to come
 heiko	sonney2k: I mean its not enough to just return it right? I need to specify the truth somewhere
@sonney2k	heiko, well you just run generator.py with that example once
 heiko	sonney2k: ok I see, this generates the files
 heiko	sonney2k: but there is one difference: I am comparing against matlab
 heiko	the tester compares against the program against itself
@sonney2k	the tester compares against what the generator has once witten out
 heiko	so the procedure would be, write example that works , compare with other implementation by hand, when correct, add integration test
@sonney2k	heiko, exactly
@sonney2k	that was my idea
 heiko	sonney2k: so then unit-tests should be more implementation things
 heiko	rather than results of numerical methods
 heiko	well, this goes hand in hand
 heiko	I think I will just add the integration tests additionally
 heiko	doesnt hurt to have the others
 heiko	sonney2k, blackburn, wiking I will go home now, long day, have a good evening!
 blackburn	heiko: see you
-!- heiko [~heiko@nat-164-89.internal.eduroam.ucl.ac.uk] has left #shogun []
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Soeren Sonnenburg :master * b837e0e / tests/integration/python_modular/ (2 files): https://github.com/shogun-toolbox/shogun/commit/b837e0e589b2ecd67385532d7a9b0bcdae3cf327
 shogun-notifier-	shogun: fix integration test directory
 shogun-buildbot	build #870 of deb3 - modular_interfaces is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/870
-!- heiko [~heiko@5ac1f59a.bb.sky.com] has joined #shogun
-!- sumit [ca4eaca2@gateway/web/freenode/ip.202.78.172.162] has joined #shogun
-!- heiko [~heiko@5ac1f59a.bb.sky.com] has left #shogun []
-!- hoijui [~hoijui@dslb-092-078-043-220.pools.arcor-ip.net] has quit [Ping timeout: 264 seconds]
-!- sumit [ca4eaca2@gateway/web/freenode/ip.202.78.172.162] has quit [Quit: Page closed]
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Quit: leaving]
--- Log closed Fri Mar 08 00:00:04 2013
