--- Log opened Thu Dec 08 00:00:48 2016
-!- zero1hac [~zerooneha@139.59.16.180] has quit [Ping timeout: 268 seconds]
-!- zero1hac [~zerooneha@139.59.16.180] has joined #shogun
@sukey	Pull Request #3575 "LinalgRefacotr - Fix GPU Vector/Matrix deep cloning"  opened by OXPHOS - https://github.com/shogun-toolbox/shogun/pull/3575
-!- CaBa [~Diu7saig@unaffiliated/caba] has quit [Ping timeout: 268 seconds]
-!- CaBa [~Diu7saig@unaffiliated/caba] has joined #shogun
@sukey	Pull Request #3534 "LinalgRefactor - Cholesky - CPU only"  synchronized by OXPHOS - https://github.com/shogun-toolbox/shogun/pull/3534
-!- praisethemoon [~praisethe@41.226.248.123] has joined #shogun
 CaBa	wiking: ping
@wiking	pong
 CaBa	wiking: good evening! :)
 CaBa	wiking: do you have any info on my 22:35:03 question for me? :)
@wiking	lemme se
@wiking	e
@wiking	[05:35]  <CaBa> wiking: is there any harm in calling init(l,r) multiple times, i.e. with different features?
@wiking	no
@wiking	it should be fine
@wiking	unless there's a bug
 CaBa	wiking: hm, ok
 CaBa	wiking: i'm trying to write kind of a wrapper class around a kernel, derived from the latter. it is meant to accept a different feature type and convert it whenever needed to the type accepted by the upstream kernel... which is the case (1) if the features change and (2) if an extra parameter changed
 CaBa	wiking: does that seem realizable to you?
@wiking	ah yeah
@wiking	sure
@wiking	although
@wiking	why not a preprocessor/
@wiking	?
 CaBa	wiking: can that be hooked in in a way such that it is re-run if a parameter of the kernel was changed through model selection?
@wiking	could you rephrase this question?
@wiking	https://github.com/shogun-toolbox/shogun/blob/develop/examples/undocumented/python_modular/preprocessor_normone_modular.py
 CaBa	wiking: i don't know what the design goal of the preprocessors in sg is. i was wondering if they are automatically called in certain situations
@wiking	http://beta.shogun.ml/api/latest/classshogun_1_1CFeatures.html#a53d5b6b17d8e4b44117d404b119faca6
 CaBa	wiking: when are those called?
@wiking	when you call force_preprocessing
@wiking	i meant apply_preprocessor
@wiking	on the features
 CaBa	wiking: i see. i don't think that interface is helping much here. i need something that is automatically rerun (or checks if it has to rerun) upon ::compute calls
@wiking	kernel normalizer? :D
@wiking	they are actually rerun
 CaBa	prior to the actual compute() logic ;)
 CaBa	wiking: oh, things like get_kernel_matrix() are parallelized...
@wiking	yes
 CaBa	wiking: my new compute() function isn't thread safe anymore
@wiking	:)
@wiking	then just set
@wiking	the num of threads
@wiking	to 1
 CaBa	CRITICAL should work, too, right?
@wiking	?
@wiking	critical?
@wiking	in what sense?
 CaBa	    #pragma omp critical
 CaBa	worked :)
 CaBa	wrapper seems to work fine now, at least so far...
@wiking	:)
@wiking	mmm
 CaBa	mmm?
@wiking	nevermind
 CaBa	critical about the critical? :D
@wiking	i mean i was about to say that we'll change
 CaBa	to c++11 threads?
 CaBa	:D
@wiking	the backend for kernel.cpp (get_kernel_matrix etc)
@wiking	nono
@wiking	omp
@wiking	so it's all good
@wiking	the commit is there
@wiking	feature/KernelOMP
@wiking	it's just that it introduces some fixes that reveals some bugs
@wiking	in the parallel random forest etc
@wiking	hence it hasn't got merged into develop yet
@wiking	but yeah because now
@wiking	the #pragma omp critical
@wiking	is only working by chance :P
 CaBa	why?
@wiking	because what if you compile the thing with clang
@wiking	:P
@wiking	then the #pragma omp critical
@wiking	will be ignored
 CaBa	yes, but it'll also be single-threaded then
@wiking	but the Kernel.cpp parallel things are implemented with posix threads
@wiking	no
@wiking	as you can see currently parallel stuff in kernel.cc
@wiking	*cpp
@wiking	are implemented using native posix threads
 CaBa	well then the lock is also ignore in gcc
@wiking	?
@wiking	lock
@wiking	?
@wiking	what lock?
 CaBa	my omp critical
@wiking	mmm gcc is for along time openmp ready
@wiking	:)
@wiking	so it wont be ignored
 CaBa	oh so the pthread code is only compiled when openmp is unavailable?
 CaBa	i thought there is pthread code
@wiking	no
@wiking	one has nothing to do with other
@wiking	but anyyyyyyyyyhow
@wiking	it's ok
@wiking	soon it'll be omp only
 CaBa	exactly.. so the pthread code will not care about openmp critical statemehts
@wiking	yes
 CaBa	even if theres openmp support
 CaBa	bbl, lunch
@wiking	if you only have PTHREAD
@wiking	but not openmp
@wiking	no
@wiking	if you have openmp support
@wiking	then it's find
@wiking	*fine
@wiking	as the pragma is not ignored
@wiking	but ok
@wiking	think about it
@wiking	and you'll see what i mean
@wiking	:)
-!- fhal3 [~fhal@my83-216-94-208.cust.relish.net] has quit [Read error: Connection reset by peer]
 CaBa	wiking: the pragma works even if the underlying code uses pthreads?
@sukey	Issue #3576 "Unable to install package on Ubuntu 16.04" opened by hrushikesht - https://github.com/shogun-toolbox/shogun/issues/3576
@sukey	Issue #3576 "Unable to install package on Ubuntu 16.04"- https://github.com/shogun-toolbox/shogun/issues/3576
-!- praisethemoon [~praisethe@41.226.248.123] has quit [Changing host]
-!- praisethemoon [~praisethe@unaffiliated/praisethemoon] has joined #shogun
 CaBa	wiking: switched to an std::mutex, that should cover either cases...
@sukey	Pull Request #3534 "LinalgRefactor - Cholesky - CPU only"  synchronized by OXPHOS - https://github.com/shogun-toolbox/shogun/pull/3534
-!- praisethemoon [~praisethe@unaffiliated/praisethemoon] has quit [Ping timeout: 250 seconds]
--- Log closed Fri Dec 09 00:00:50 2016
