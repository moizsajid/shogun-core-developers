--- Log opened Wed Jan 29 00:00:08 2014
--- Day changed Wed Jan 29 2014
@wiking	thoralf: i hope that the other unit tests (libmrm etc) are convex problems
@wiking	as they cannot solve non-convex problems
 thoralf	lol
 thoralf	At least they converge. ;)
@wiking	well that shouldn't mean anything
@wiking	if u test it on a non-convex example
@wiking	that's up to luck that it does anything meaningful
 thoralf	In the linear case it shouldn't be a big deal.
@wiking	?
 thoralf	Forget what I said.  It's simply wrong.
 thoralf	No excuse. ;)
@wiking	okey :D
 thoralf	Let me know if you can reproduce my observation...
 thoralf	Have a good night...
 thoralf	Zzz
-!- thoralf [~thoralf@91-65-136-138-dynip.superkabel.de] has quit [Quit: Konversation terminated!]
-!- FSCV [~FSCV@50.7.50.60] has quit [Quit: Leaving]
-!- zxtx [~zv@129-79-241-148.dhcp-bl.indiana.edu] has quit [Ping timeout: 252 seconds]
-!- Skg_ [82c2a6a3@gateway/web/freenode/ip.130.194.166.163] has joined #shogun
 Skg_	Hi, I was wondering if anybody would be able to help me out with an issue I've encountered. I've just built v3.1.1, and have encountered an issue while running through the modular tutorial (http://www.shogun-toolbox.org/doc/en/current/modular_tutorial.html). When I try and call the function Labels, I receive the error "Cannot create new instances of the type 'Labels'" - is there anything that I might have missed that would cause such 
 Skg_	Ah, as it turns out it's an issue with the tutorial - labels no longer exists, but there are binary/multiclass/regression labels available.
 Skg_	The tutorial also appears to have an issue with calling PerformanceMeasures - it looks like my shogun.evaluation does not include PerformanceMeasures.
-!- zxtx [~zv@c-98-223-196-32.hsd1.in.comcast.net] has joined #shogun
-!- Skg_ [82c2a6a3@gateway/web/freenode/ip.130.194.166.163] has quit [Ping timeout: 245 seconds]
-!- Skg_ [cba6ea41@gateway/web/freenode/ip.203.166.234.65] has joined #shogun
-!- besser82 [quassel@fedora/besser82] has quit [Ping timeout: 276 seconds]
 lisitsyn	argh -30C here I don't wanna get out
-!- Skg_ [cba6ea41@gateway/web/freenode/ip.203.166.234.65] has quit [Quit: Page closed]
-!- besser82 [quassel@fedora/besser82] has joined #shogun
-!- lisitsyn [~lisitsyn@80.252.20.67] has quit [Ping timeout: 252 seconds]
-!- benibadman [~benibadma@94.135.236.129] has joined #shogun
-!- zxtx [~zv@c-98-223-196-32.hsd1.in.comcast.net] has quit [Ping timeout: 252 seconds]
-!- zxtx [~zv@c-98-223-196-32.hsd1.in.comcast.net] has joined #shogun
-!- lisitsyn [~lisitsin@mxs.kg.ru] has joined #shogun
-!- benibadm_ [~benibadma@94.135.236.129] has joined #shogun
-!- benibadman [~benibadma@94.135.236.129] has quit [Ping timeout: 272 seconds]
-!- benibadman [~benibadma@94.135.236.129] has joined #shogun
-!- benibadm_ [~benibadma@94.135.236.129] has quit [Ping timeout: 245 seconds]
-!- benibadm_ [~benibadma@94.135.236.129] has joined #shogun
-!- benibadman [~benibadma@94.135.236.129] has quit [Ping timeout: 260 seconds]
@wiking	lisitsyn: :D
@wiking	lisitsyn: get a jacket :)
 lisitsyn	wiking: every cloth is double now :D
@wiking	lisitsyn: so change or not to change that is the question *now*
-!- votjakovr [~votjakovr@188.134.46.30] has joined #shogun
@wiking	hehe
@wiking	we need a spark interface :)
@wiking	lisitsyn: here?
-!- HeikoS1 [~heiko@pat-191-250.internal.eduroam.ucl.ac.uk] has joined #shogun
@wiking	HeikoS1: yo
 lisitsyn	wiking: ya
@wiking	lisitsyn: have u checked mesos or spark?
 lisitsyn	wiking: hmm no
@wiking	k
@wiking	:D
 HeikoS1	wiking: yo!
-!- lisitsyn [~lisitsin@mxs.kg.ru] has quit [Quit: Leaving.]
@wiking	HeikoS1: ok so the plan for the new backend is actualy this: spark or mesos
@wiking	HeikoS1: http://spark.incubator.apache.org/docs/latest/python-programming-guide.html
@wiking	check the Interactive Use part
@wiking	basically depending on a env variable
@wiking	it'll run your task either on a spark cluster (or mesos) or on 4 local cores :P
 HeikoS1	wiking: looks and sounds good, I will check this  out
-!- lisitsyn [~lisitsyn@80.252.20.67] has joined #shogun
-!- benibadm_ [~benibadma@94.135.236.129] has quit []
-!- iglesiasg [~iglesiasg@524AE0A7.cm-4-3d.dynamic.ziggo.nl] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Parijat Mazumdar :develop * ccd01c4 / / (12 files): https://github.com/shogun-toolbox/shogun/commit/ccd01c4ed7d60742af893115b879905090dfd97f
 shogun-notifier-	shogun: minor changes in KMeans
 shogun-notifier-	shogun: Fernando Iglesias :develop * 1bc8681 / / (12 files): https://github.com/shogun-toolbox/shogun/commit/1bc868162dad0f4d61552b66fef4c8fc8c2e49e6
 shogun-notifier-	shogun: Merge pull request #1831 from mazumdarparijat/fastkmeans
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: minor changes in KMeans
-!- lambday [67157c4d@gateway/web/freenode/ip.103.21.124.77] has joined #shogun
 lambday	HeikoS1: hi... there?
 HeikoS1	lambday: hi!
 HeikoS1	how are things?
 lambday	HeikoS1: hi.. things are good...
 lambday	HeikoS1: I was studying about multithread things.. and bumped into things like thread pooling... as lisitsyn was saying...
 lambday	HeikoS1: I was working on a prototype..
 lambday	which maintains a job queue
 lambday	and there are a bunch of working threads.. which wait for jobs to be available on that queue
 lambday	and as soon as they get jobs... they wake up and start executing
 lambday	this is the idea we initially had
 lambday	right?
 lambday	oh but before that.... your exams are over?
 HeikoS1	lambday: yeah that was the idea
 HeikoS1	lambday: exams are over
 HeikoS1	finally :)
 lambday	HeikoS1: how was it?
 lambday	hehhe :D
 HeikoS1	lambday: mixed
 HeikoS1	lambday: so yeah this could be a nice system of implementing the multithread stuff
 HeikoS1	maybe something easier would be good to start with as a prototype for the interfaces
 lambday	HeikoS1: yeah... and from what I checked out, c++11 has a really cool library for multithread things
 lambday	HeikoS1: and IMO its better if we could use that... cause pthread is too system specific...
 HeikoS1	lambday: I know, that might be useful
 HeikoS1	lambday: I dont know whether we are allowed to do that
 HeikoS1	lisitsyn: might have an answer to it :)
-!- HeikoS1 [~heiko@pat-191-250.internal.eduroam.ucl.ac.uk] has left #shogun []
-!- HeikoS1 [~heiko@pat-191-250.internal.eduroam.ucl.ac.uk] has joined #shogun
 lisitsyn	allowed to do what?
 lambday	HeikoS1: if the computation engine part is drawn out of shogun and put into an external library, then probably it can be...
 lambday	and we don't extend SGObject for these classes
 lambday	may be then??
 HeikoS1	lambday: we will still need an internal wrapper for things
 HeikoS1	so the first step is to write a very very easy multithread implementation
 HeikoS1	to finilise the interfaces
 HeikoS1	and then once that works think about the backend
 lambday	HeikoS1: currently what I wrote is an extension of CIndependentComputationEngine... (not fully working yet)
 lambday	but it pretty much does what we earlier discuss about
 lambday	calls the compute on job...
 HeikoS1	lambday: ok that sounds good
 HeikoS1	lambday: so, why dont we start with an openmp backend
 HeikoS1	that seems very simpole
 lambday	but for the "wait_for_all" method, it would have been really nice if we could have used c++11's future/promise things
 HeikoS1	with very simple queuing
 HeikoS1	lambday: ah yeah
 HeikoS1	lambday: maybe its a good idea to change that then
 lambday	HeikoS1: but it all depends on whether we can support c++11's std::thread
 lambday	:-/
 lisitsyn	why not?
 HeikoS1	lisitsyn: is shogun fully c++11?
 HeikoS1	then lets use that
 HeikoS1	as a first backend
 lisitsyn	HeikoS1: what's fully c++11?
 lambday	HeikoS1: we can check for its support
 lambday	like currently it does for a bunch of c++11 features
 HeikoS1	but still lets keep the interface in a way that things can be done from the modular interfaces
 lisitsyn	afaik it is supported on major compilers
 lisitsyn	so I'd not be afraid of it
 lambday	anyone with g++4.7+ should have it
 lambday	vc++ also supports std::thread now...
 lisitsyn	you probably know boost has threadpool
 lambday	yeah...
 lisitsyn	I bet it is worth to take some ideas from it
 lambday	haven't used it though
 lambday	HeikoS1: lisitsyn: so do you think I should send a PR with the current implementation of my thread pool things... and then may be we can discuss?
 lisitsyn	yeah sure
 lambday	I'll finish it soon then
 lisitsyn	just let me know when to take a look
 HeikoS1	lambday: yeah maybe thats a good idea
 lisitsyn	cause I am a bit
 lisitsyn	lost
 lisitsyn	:D
 HeikoS1	lambday: a working example (like kernel matrix) would be good also
 lambday	lisitsyn: hehe :D
 lambday	HeikoS1: yeah I thought of that...
 HeikoS1	since again interfaces are important, how to specify the parts
 HeikoS1	lambday, lisitsyn also talk to viking about the spark stuff he mentioned
 lisitsyn	damn it is fcking cod
 lambday	HeikoS1: another thing... the job.... I think we should use a callable object as job instead of making it a class...
 lisitsyn	cold*
 lambday	spark stuff?... sorry I am not updated :(
 lambday	lisitsyn: -10 degrees? :P
 lisitsyn	lambday: -30C
 lambday	fuck!! :-o
 lambday	HeikoS1: if we use job as a callable object, we can use std::packaged_task, functors, functions etc...
 lambday	in many cases making it a subclass of some generic job class would cause a lot of overhead
 lisitsyn	one great drawback of std threading stuff
 lisitsyn	in java you just extend it
 lambday	lisitsyn: what is it?
 lisitsyn	no way here
 lisitsyn	you just either use it or fck you
 lisitsyn	:D
 HeikoS1	lambday: yeah an object might be better
 HeikoS1	so its easier to use things
 HeikoS1	I agree
 lambday	lisitsyn: we'll have to think of some trade off then :-/
 lambday	HeikoS1: I was thinking of separating the computation part and do the experiments... and then post it somewhere, so that we can discuss...
 lambday	HeikoS1: to do the changes in the existing framework
 lisitsyn	also
 lambday	later we'll integrate
 lisitsyn	it would be cool to have it more implementation agnostic
 lisitsyn	I mean
 lisitsyn	std::thread won't work with mpi
 lisitsyn	but we can imagine thread is just mpi kind of thread
 lambday	ummm.. std::thread on linux uses pthread, right?
 lisitsyn	lambday: should be
 lambday	for a thread pool kind of scenario, we gotta spend some time on the job scheduling part... may be job queue won't be just a queue... but a priority queue or some other fancy DS
 lambday	cause not all jobs we'll be using would be independent
 lambday	but initially a simple queue would do..
 lambday	right?
 lambday	lisitsyn: yeah I think it does..
 lisitsyn	lambday: well it should have some queue but shouldn't know what queue
 lambday	ya... but there has to be some mechanism to specify our required computation order.... may be a DAG?
 lambday	thread pools would be computing different types of jobs
 lambday	I mean the threads in the pool
 lisitsyn	lambday: heh well yeah
 lisitsyn	it is the questiong
 lisitsyn	question*
 lambday	ya... somehow we gotta make it easy for the application programmer to just specify their required order... and submit different types of jobs to the engine... then just wait for all...
 lambday	ideally it should be that simple... :-/
 shogun-buildbot	build #48 of deb4 - python3 is complete: Failure [failed test python modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb4%20-%20python3/builds/48  blamelist: Fernando Iglesias <fernando.iglesiasg@gmail.com>, Parijat Mazumdar <mazumdarparijat@gmail.com>
 lambday	but anyway I will complete the current implementation with a simple queue (using std::queue) and then discuss may be?
-!- thoralf [~thoralf@91-65-138-183-dynip.superkabel.de] has joined #shogun
 thoralf	Heyhey.
 shogun-buildbot	build #411 of precise - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/precise%20-%20libshogun/builds/411
 HeikoS1	lambday, lisitsyn keep in mind the thing is called *independent jobs*
 HeikoS1	so thats just embarassingly parallel stuff
 lambday	HeikoS1: well, that would make it pretty simple then... I was wondering if we can use it in some other cases.. when a bunch of independent jobs has to be followed by another bunch of independent jobs..
 lambday	but initially that's too much to worry about :-/
 lambday	HeikoS1: things will work from modular interface as well.. we'll specify jobs from the modular interface as well.. engine will be there.. shouldn't matter what they use in the backend..
 HeikoS1	lambday: yeah ordering would be cool
 HeikoS1	lambday: but I think its kind of hard to specify that within the framwork
 HeikoS1	why not write the code this way
 HeikoS1	that uses the independent-for framework
 HeikoS1	sorry for my long delays  here btw ;)
 lambday	HeikoS1: no worries man!..
 lambday	HeikoS1: well, currently what we had in mind can only compute one bunch of independent jobs.. and then wait for all...
 HeikoS1	lambday: yes
 lambday	if we need another bunch... we'll have to create another engine..
 HeikoS1	yep thats true
 HeikoS1	ah you mean you want to combine things?
 lambday	HeikoS1: I was wondering if we can design it someway that we can use the same engine...
 HeikoS1	lambday: but thats just queuing isnt it?
 HeikoS1	since the engine has a certain capacity
 lambday	HeikoS1: but can we guarantee that a job from  job grup J1 {j11,j12...j1n} has computed *before* J2 {j21,j22,....j2n} in that case?
 lambday	I mean, say, if the result from job group J1 is used by the job group j2
 HeikoS1	lambday: I see
 HeikoS1	currently this is only possible via wait_for_all
 lambday	yeah
 lambday	but then also, we cannot check before computing some job of the second batch if the required result has already been computed
-!- parijat [671b082a@gateway/web/freenode/ip.103.27.8.42] has joined #shogun
 lambday	so if we want that flexibility...
 lambday	ummm..
 HeikoS1	lambday: I see
 HeikoS1	mmmh
 HeikoS1	I feel we should start with a replacement for the current parallel stuff
 HeikoS1	which is all just parfor basically
 HeikoS1	no dependencies
 HeikoS1	we can always add that
 lambday	parfor as in openmp style?
 HeikoS1	yeah just tasks that have independent parts
 HeikoS1	to unify this within shogun would already be a great improvement
 HeikoS1	lisitsyn: how would you represent categorical features in shogun?
 HeikoS1	lisitsyn: as strings?
 lisitsyn	HeikoS1: I think map<int,string> + int
-!- parijat [671b082a@gateway/web/freenode/ip.103.27.8.42] has quit [Client Quit]
 lambday	HeikoS1: I'll check this then.. currently keeping in mind regarding the kernel matrix computation part... if I can make this example working.. then voila!
 lambday	HeikoS1: instead of putting things in thread_param and get_kernel_matrix_helper, we;ll specify it as job.. and inside the get_kernel_matrix, create jobs and submit to the engine..
 lambday	this is what I had planned
 lambday	the main code would be easy to read..
 lambday	plus memory things can be handled using std::ref and std::move ...
 lambday	HeikoS1: lisitsyn: will brb after dinner
 HeikoS1	lambday: good plan
 HeikoS1	yeah if this works, we can translate a few of shoguns parallel things to this much cleaner approach
 HeikoS1	and if thats fine,  then we can start thinking about x-validation on a batch cluster backend like thing
-!- travis-ci [~travis-ci@ec2-107-20-100-146.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Fernando Iglesias's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/17851887
-!- travis-ci [~travis-ci@ec2-107-20-100-146.compute-1.amazonaws.com] has left #shogun []
-!- iglesiasg [~iglesiasg@524AE0A7.cm-4-3d.dynamic.ziggo.nl] has quit [Quit: Leaving]
-!- thoralf [~thoralf@91-65-138-183-dynip.superkabel.de] has quit [Ping timeout: 272 seconds]
@wiking	lambday: i've just suggested that maybe we should start moving on with the computing framework using spark...
@wiking	lambday: or at least do a mesos implementation of it
 lambday	re
 lambday	wiking: spark.. okay
 lambday	cool!!!
 lambday	wiking: so do you think it would be possible to come up with unified computation framework for multithread and cluster? like.. from an application programmer's point of view.. they will just have to use different engines... that's all
@wiking	lambday: well according to spark
@wiking	that's doable
@wiking	see http://spark.incubator.apache.org/docs/latest/python-programming-guide.html
@wiking	check the "Interactive Use" part
@wiking	you can either use spark like: MASTER=spark://IP:PORT ./pyspark
@wiking	or
 lambday	wiking: checking
@wiking	MASTER=local[4] ./pyspark
@wiking	for 'use four cores on the local machine'
 lambday	oh that's classic!
@wiking	so depending on the MASTER env variable
@wiking	u use various 'cluster' solutions
@wiking	which is what we want
@wiking	of course we'll have several drawbacks for this
@wiking	like creating a parallel for loop with openmp is very easy
@wiking	#pragma etc...
@wiking	but this way we'll have to implement our own way to do this
@wiking	to be able to handle both cases
@wiking	1) different cores but on one machine
@wiking	2) totally separated computing nodes
@wiking	so we'll have to have something like a function
@wiking	to do a parallel for loop
@wiking	and of course the biggest problem is that spark doesn't have c++ api :
@wiking	:D
 lambday	wiking: yeha....
 lambday	wiking: yeah I was just about to say that
@wiking	mesos does have
 lambday	everything has to be on py or java.. :-/
@wiking	lambday: mesos is c++ implemented so we can use that
@wiking	but then we loose all the good stuff of spark
 lambday	wiking: no way we can use it backwards? :P
@wiking	lambday: "If you want to pass data through an external C++ program, there's already an operation on Spark's distributed datasets (RDDs) called pipe(). You give it a command, and it will launch that process, pass each element of the dataset to its stdin, and return an RDD of strings representing the lines printed to the process's stdout."
 lambday	provide some wrappers and use swig?
@wiking	lambday: well java has JNI
@wiking	so it's possible of course
@wiking	but that's really a pain in the ass
 lambday	yep
@wiking	i've been working with JNI and it's really hell
 lambday	wiking: hmm... but the way you said it can both be used for multicore and cluster.. is really cool!..
 lambday	so for that much flexibility I wonder if we can take the pain
 lambday	I don't have much exp with JNI and not spark for that matter but I can check
@wiking	well
@wiking	i'll have to check this pipedrdd
@wiking	https://spark.incubator.apache.org/docs/0.6.2/api/core/spark/rdd/PipedRDD.html
@wiking	:)
@wiking	we could write the serializer for this :))))
 lambday	wiking: I'll check it out... play with it a bit
 lambday	lol python guide asks to read the scala part first :D
@wiking	mesos seems to be easy of course
@wiking	http://mesos.apache.org/documentation/latest/app-framework-development-guide/
 lambday	wiking: HeikoS1: I will come back in a few mins...
@wiking	https://github.com/zhgwen/spark_cpp_api
@wiking	hehehe
@wiking	kind of hard with the documentation
 lambday	HeikoS1: wiking back
 lambday	wiking: lol.. chinese?
 lambday	lol we shouldn't worry about that.. there are people among us who can help us with it :D
 lambday	wiking: would this help? http://spark.incubator.apache.org/docs/latest/running-on-mesos.html
@wiking	mmm well that's just how to run spark on mesos
@wiking	but that doesn't help us with having spark
-!- thoralf [~thoralf@91-65-138-183-dynip.superkabel.de] has joined #shogun
 thoralf	Re.
-!- votjakovr [~votjakovr@188.134.46.30] has quit [Quit: WeeChat 0.4.0]
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
-!- iglesiasg [~iglesiasg@524AE0A7.cm-4-3d.dynamic.ziggo.nl] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
-!- lambday [67157c4d@gateway/web/freenode/ip.103.21.124.77] has quit [Ping timeout: 245 seconds]
-!- chetna [0e8b5206@gateway/web/freenode/ip.14.139.82.6] has joined #shogun
 chetna	Hello :) I am really enthusiastic to contribute in the field of machine learning and projects on similar lines. Going through the idea page for GSoC-2013 I found many ideas which are related to the coursework I have persuaded back in my college. I would like to know how can I start working and hacking into the codebase for Shogun.
@iglesiasg	chetna, Hey, I suggest you to have a look to the initiation issues in GitHub
 chetna	iglesiasg: Could you please direct me to the link for the same.
@iglesiasg	chetna, https://github.com/shogun-toolbox/shogun/issues?milestone=none&state=open
@iglesiasg	click on the "entrance" label (initiation as I said before is not the right word)
@iglesiasg	you will find the label on the left hand side of the page
 chetna	iglesiasg: Thanks :) I'll look through the issues with the above mentioned tag :)
@iglesiasg	chetna, make a comment in the issue if you decide to start working on one, just so we avoid wasting manpower replicating work
 chetna	iglesiasg: For Sure :)
-!- chetna_ [0e8b5206@gateway/web/freenode/ip.14.139.82.6] has joined #shogun
-!- chetna [0e8b5206@gateway/web/freenode/ip.14.139.82.6] has quit [Ping timeout: 245 seconds]
-!- lisitsyn [~lisitsyn@80.252.20.67] has quit [Ping timeout: 245 seconds]
-!- chetna_ [0e8b5206@gateway/web/freenode/ip.14.139.82.6] has quit [Ping timeout: 245 seconds]
--- Log closed Thu Jan 30 00:00:16 2014
