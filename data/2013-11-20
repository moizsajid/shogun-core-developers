--- Log opened Wed Nov 20 00:00:32 2013
-!- zxtx [~zv@129-79-241-148.dhcp-bl.indiana.edu] has quit [Ping timeout: 248 seconds]
-!- zxtx [~zv@c-98-193-83-24.hsd1.il.comcast.net] has joined #shogun
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has joined #shogun
-!- benibadman [~benibadma@94.135.236.129] has joined #shogun
-!- benibadman [~benibadma@94.135.236.129] has quit []
-!- benibadman [~benibadma@94.135.236.129] has joined #shogun
-!- benibadman [~benibadma@94.135.236.129] has quit [Read error: Connection reset by peer]
-!- benibadman [~benibadma@94.135.236.129] has joined #shogun
-!- benibadman [~benibadma@94.135.236.129] has quit [Read error: Connection reset by peer]
-!- benibadman [~benibadma@94.135.236.129] has joined #shogun
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has quit [Quit: sonne|osx]
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has joined #shogun
 sonne|osx	wiking: lisitsyn1 - guys I am shocked
 sonne|osx	ben taskar died!
-!- lisitsyn [~lisitsin@mxs.kg.ru] has joined #shogun
 sonne|osx	lisitsyn?
 lisitsyn	sonne|osx: ich
 sonne|osx	you what is with your *1 ?
-!- Saurabh7 [~Saurabh7@115.248.130.148] has quit [Read error: Connection reset by peer]
 lisitsyn	sonne|osx: oh I keep forgetting to turn off irc at other machine
 sonne|osx	lisitsyn: I am shocked - Ben Taskar died!
 lisitsyn	sonne|osx: yes I told you yesterday
 lisitsyn	did you know him?
 sonne|osx	lisitsyn: didn't notice that you told me ...
 sonne|osx	yes of course
 sonne|osx	he was the structured output learning god
 lisitsyn	sonne|osx: http://www.shogun-toolbox.org/irclogs/%23shogun.2013-11-18.log.html in the end of the log
 lisitsyn	sonne|osx: I don't know any of his works unfortunately
 sonne|osx	all the SO stuff in shogun is using his formulation
 lisitsyn	oh
 lisitsyn	I see
-!- mode/#shogun [+o lisitsyn] by ChanServ
-!- lisitsyn1 was kicked from #shogun by lisitsyn [lisitsyn1]
* sonne|osx heard gunfire
@lisitsyn	haha
 sonne|osx	his tutorials at nips or icml about SO were really excellent
 sonne|osx	lisitsyn: and he was even younger than me o_O
@lisitsyn	sonne|osx: yeah that's kind of unfair people die that young
 sonne|osx	in particular when you don't smoke and your bmi is perfect
 sonne|osx	ohh well
@lisitsyn	sonne|osx: sometimes I think it doesn't matter whether you smoke or drink or whatever
 sonne|osx	I guess it matters but of course such sudden young deaths are more shocking and so more remembered
@lisitsyn	so many things affect you and you anyway just reduce chances not eliminate them
@lisitsyn	sonne|osx: are you back from being sick?
 sonne|osx	no :(
 sonne|osx	still fever
@lisitsyn	sonne|osx: oh I hope you will recover soon, you are sick for quite a few days already
 sonne|osx	lisitsyn: I only get the toughest sicknesses nowadays
@lisitsyn	sonne|osx: is there any reason?
 sonne|osx	lisitsyn: I am too strong for the weak ones :D
 sonne|osx	lisitsyn: and actually I got 2 diseases in a row one opening the doors to dr soeren :/
-!- Saurabh7 [~Saurabh7@115.248.130.148] has joined #shogun
 sonne|osx	besser82: any updates?
@wiking	i saw it yesterday
-!- Saurabh7 [~Saurabh7@115.248.130.148] has quit [Remote host closed the connection]
 sonne|osx	wiking: do we have some dev meeting now? or when?
@wiking	anybodcould
@wiking	could
@lisitsyn	wiking: ich!
 sonne|osx	no idea what this means
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has quit [Quit: sonne|osx]
@wiking	hoh
@wiking	so
@wiking	talk
@wiking	lisitsyn: here?
@wiking	sonney2k_: ping
@lisitsyn	wiking: yeahs
@wiking	ok sonney2k_ will be back i think in 2 minutes :)
@wiking	as i know from his 'quits'
@lisitsyn	wiking: lets see if you learnt good hypothesis
@wiking	:D
-!- iglesiasg [~iglesias@2001:6b0:1:1da0:28a3:b90c:4a85:f150] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@iglesiasg	hello hello
@wiking	hellooo
@wiking	we are still w8ing for sonney2k_
@iglesiasg	ook
@iglesiasg	aaah wait
@iglesiasg	we are doing the dev meeting now??
@iglesiasg	my very very bad totally missed that it was going to be now, sorry guys
@wiking	no worries
@iglesiasg	at 15:15 I am attending a thesis presentation, but I think we will done by that time
@wiking	hopefully
@wiking	depending on sonney2k_
@lisitsyn	iglesiasg: wiking: how can I knew that we will have meeting now? ;)
@lisitsyn	am I missing some mail?
@wiking	hehehe no
@iglesiasg	there was the doodle
@wiking	sonney2k_: just decided but he didn't even filled out
@wiking	:)))
@iglesiasg	hehehe
@wiking	and then he left
@wiking	:P
@lisitsyn	hahah
@wiking	anyhow there's tons of stuff we can talk now
@wiking	and sonney2k_ can read the logs no?
@wiking	+ join later
@iglesiasg	I am fine either way, waiting a bit longer or starting now
@wiking	either this or wait or postpone the meeting for another day?
@lisitsyn	well lets just talk about stuff that matters instead of managing meeting :D
@wiking	ok
@wiking	cool
@wiking	so we were already starting a discussion
@wiking	and sonney2k_ had an insight of that as well
@wiking	about chunking up libshogun
@wiking	as currently it's really redicolous how big the .so is
@lisitsyn	how do we chunk up?
@wiking	lisitsyn: he had the good idea of one lib per subdir under shogun
@wiking	so
@wiking	shogun/io
@lisitsyn	we should have been using some plugin architecture
@wiking	shogun/features
@wiking	shogun/label
@wiking	etc
@wiking	lisitsyn: shoulda coulda woulda
@lisitsyn	I don't really agree
@wiking	now we'll do the opposite way
@wiking	lisitsyn: well of course we cannot force this arch
@wiking	but we can go along this line
@wiking	trying to keep and then handle the exception
@lisitsyn	well I don't think it is a good way
@wiking	libshogun_machine would be a good idea
@lisitsyn	there is a bunch of relations between these .so's
@wiking	and then after libshogun_multiclass another?
@lisitsyn	yes
@lisitsyn	there is at least shogun base
@wiking	and of course there's a huge cross dependency between feature-machine-label
@lisitsyn	shogun linear machine
@lisitsyn	shogun kernel machine
@lisitsyn	shogun multiclass
@wiking	lisitsyn: yeah the question is how fine grained do we want to be
@lisitsyn	shogun instance based (knn and shit)
@wiking	i would go with the more the better
@wiking	to be something like gstreamer on the end
@wiking	each little fucking module is a separate .so
@wiking	and then if it's needed it's loaded into memory space
@wiking	but if not then it's not loaded at all
@wiking	this would be a vertical split i would say
@lisitsyn	and all 'apply' modules shoud be bsd
@lisitsyn	(I believe)
@wiking	but then i would go on the end (taking this in mind during design) to have a horizontal split
@wiking	exactly
@wiking	train-apply split
@lisitsyn	and they are AS fast as possible
@wiking	indeed
@wiking	multiproc
@wiking	multieverything
@lisitsyn	opencl whatever
@lisitsyn	openvx no idea
@wiking	yeah
@lisitsyn	some kind of adapters
@wiking	in whatever means
@wiking	but again
@wiking	have the gstreamer like pipelining
@lisitsyn	and one realtime module may be ;)
@wiking	that actually allows piping some modules to GPU
@wiking	some modules to openmax
@wiking	and shit like that
@lisitsyn	wiking: iglesiasg: I have one idea about training part then
@wiking	but to have this option we need to start drawing up an architecture
@lisitsyn	so actually a plenty of days is spent on porting shit together
@lisitsyn	I think we should develop a few 'adapters'
@lisitsyn	to allow training in say matlab
@lisitsyn	e.g.
@lisitsyn	you have shitload of matlab code
@lisitsyn	made by famous X researcher
@lisitsyn	if we want to be the most state of the art thing around
@lisitsyn	we could develop an interface
@iglesiasg	would an adapter be pretty much the same idea of a static interface?
@lisitsyn	that allows you to tie that matlab function
@lisitsyn	that trains model
@lisitsyn	iglesiasg: well I mean some skeleton that keeps static
@lisitsyn	like shogun_train_machine(..) function
@lisitsyn	but you tie things in that function
@lisitsyn	to that downloaded code
@lisitsyn	see what I mean?
@iglesiasg	more or less
@wiking	but what would u do with the return code?
@wiking	i mean how could u use that in shogun after
@wiking	or u dont care
@lisitsyn	wiking: well it runs matlab externally and retrieves learned model
@wiking	just somehow be able to push features+labels into an external code
@wiking	lisitsyn: but how do u know how to interpret that model?
@wiking	or it's up to the actual implementation
@wiking	?
@lisitsyn	wiking: you write that code
@wiking	ah ok got it
@lisitsyn	you just add one more layer
@wiking	yeah yeah i get it now
@lisitsyn	like shogun_train(..) and then retrieve the result
@lisitsyn	this way we can have basically everything
@lisitsyn	as 'plugins'
@wiking	yep
@lisitsyn	if there is no performance enough you rewrite it
@wiking	well yeah this would be then part of the whole new shogun slice-up task
@wiking	you can plug it in
@wiking	if it's really good stuff
@wiking	u can reimplement it in a more effective code
@wiking	or something
@lisitsyn	wiking: another kind of such an adapter is python adapter
@lisitsyn	and you run python code
@lisitsyn	wiking: so it is like integration platform
@lisitsyn	wiking: it is kind of big change
@lisitsyn	but I see it is like a good way to beat every library around
@wiking	yeap
@lisitsyn	if scikits has X
@wiking	that would be great to give some kind of a way
@wiking	to be able to call any sorts of external code
@wiking	yeah exactly
@wiking	not always reimplement everything
@wiking	rather just plug in some stuff that's already available elswhere
@lisitsyn	I don't know what to do about distributed computing
@lisitsyn	I don't have clear vision how should it be done
@wiking	lisitsyn: it's already on it's way
@wiking	needs a little be more interfacing
@wiking	but at the momemnt it's getting there
@lisitsyn	how?
@wiking	with the computing fw
@wiking	as part of one gaussian project
@wiking	we have this
@lisitsyn	ah
@wiking	src/shogun/lib/computation/
@lisitsyn	I need to check if it fits modern shit like hadoop and etc
@wiking	well that's it
@wiking	it's just an abstract interface
@wiking	heiko implemented that using some batch system
@wiking	to do parallel stuff
@wiking	i think he even shared the repo
@wiking	but i've started to try to use that
@wiking	on a hadoop env
@wiking	it'll need some change
@wiking	the thing is
@wiking	that we dont have a clear way to have for example views
@wiking	on features
@wiking	the current shogun/lib/computation/ fw works in a way
@wiking	that we dont share anything
@wiking	a JOB gets all the data in one package
@wiking	and that's it
@lisitsyn	well there is a lot of sharing
@wiking	and we dont have support for like
@wiking	ok here's a big feature
@wiking	feature matrix
@wiking	and i want just the first n element of it
@wiking	but in the meanwhile another node wants the second n element of it
@wiking	we dont support that atm
@wiking	just by copying
@wiking	see what i mean
@wiking	?
@lisitsyn	yeah sure we don't support views
@wiking	and for multitask
@wiking	either it is cluster
@wiking	or just
@wiking	more cores
@wiking	in one machine
@wiking	we need to support that
@wiking	views that are thread safe
@wiking	the substack arch at the moment is not thread safe at all
@lisitsyn	yeah and some things like parameters are completely unsupportable
@wiking	hehe
@wiking	but yeah i think we need to modify stuff in shogun/lib/computation/ in a way to be able to support in a unified way
@wiking	1 machine with several cores or n machine with n cores
@wiking	i mean the whole interface should be the same
@lisitsyn	I still think we should get rid of getters and setters :D
@wiking	lisitsyn: and then?
@wiking	public properties?
@lisitsyn	no, names
@lisitsyn	or objects representing them
@lisitsyn	or both
@wiking	ah ok
@wiking	so your previous idea?
@wiking	set('whatever', value)
@wiking	?
@lisitsyn	well I had a chance to try it
@lisitsyn	yeah
@wiking	or get('whatever property')
@lisitsyn	can't say I liked everything about it
@lisitsyn	the main thing is namespaces
@lisitsyn	you can't name that keyword 'width'
@lisitsyn	otherwise you disallow this word in the user code
@wiking	mmmm
@lisitsyn	but strings give you no info about type
@lisitsyn	and you have to get('whatever').as_integer() or whatever
@wiking	ih
@lisitsyn	doesn't look good either
@wiking	yeah that's nogood
@lisitsyn	getBy(keyword.whatever) is like an alternative
@lisitsyn	or any other namespace
@wiking	well we had an issue for this no?
@lisitsyn	yes
@wiking	we should continue brainstorming about this further there
@wiking	i'm just afraid of this typing problem
@lisitsyn	just trying to describe what I've learnt from experience
@lisitsyn	:)
@lisitsyn	typing is no problem if we use these instances to name parameters
@lisitsyn	it works in C++/java/python/whatever
@wiking	because afaik there's no way you can have something like: float get(string); int get(string);
@lisitsyn	yes there is no way
@wiking	c++ would die on this
@lisitsyn	no, I am speaking about
@lisitsyn	T get(const Keyword<T>& kw);
@iglesiasg	gtg guys, I will catch up later
@lisitsyn	it works in any language
@wiking	iglesiasg: okey
@lisitsyn	see ya
@wiking	lisitsyn: mmm
@lisitsyn	wiking: this works but you have to keep these 'keywords' in some separate namespace to avoid clashes
@wiking	so then you could get a Keyword<float> mykeyword? :)
@lisitsyn	yes of course
@wiking	cool
@lisitsyn	and get float
@lisitsyn	with no need to cast
@wiking	ok yeah
@wiking	i see now the problem
@wiking	i mean u know what's the problem with hits
@lisitsyn	wiking: name clashes is the most troublesome issue here
@wiking	*this
@wiking	that if u want to develop for this kind of program
@wiking	it's a fucking bitch
@wiking	as there's no way u can use any normal autocompletion
@lisitsyn	why?
@wiking	so u are like constantly reading the API
@lisitsyn	autocomplete should work not that bad
@wiking	what keywords does CKernel supports
@lisitsyn	ah
@wiking	so say you have CKernel k;
@wiking	and then you do
@wiking	k.<tab>
@wiking	u r fucked :)
@wiking	u get
@wiking	get(Keyword...)
@wiking	set(Keyword...)
@wiking	and then?
@wiking	u need to go to API ref manual
@lisitsyn	wiking: and k.cache_size
@wiking	to find out what keywords CKernel has in the first place
@wiking	lisitsyn: i suppose u can do that in python
@wiking	or u want to do this automapping?
@wiking	i mean autogen for c++ interface?
@lisitsyn	wiking: I don't know yet
@lisitsyn	wiking: autogen what?
@wiking	say CKernel has like n keywords
@wiking	well let's say we have an class
@wiking	let's call it CPlay
@wiking	and we know that it supports 3 different keywords
@wiking	then of course there's a way
@wiking	we could generate the interface
@wiking	that adds
@wiking	the methods for those keywords in c++
@wiking	to support
@lisitsyn	wiking: you don't have to generate any methods
@wiking	CPlay c; c.keyword_1 = 11.0;
@lisitsyn	ah no no I don't like it
@lisitsyn	it won't work in java
@wiking	or float k1_value = c.keyword_1
@wiking	lisitsyn: why not?
@lisitsyn	c.get(c.keyword_1)
@lisitsyn	wiking: you can't overload = in java
@lisitsyn	so won't work
@wiking	fucker
@wiking	lisitsyn: ah ok so then u still generate somehow the class interface
@wiking	to have
@wiking	c.keyword_1
@wiking	i mean i would go with generate it
@wiking	instead of relying on the developer
@lisitsyn	wiking: yeah probably it makes sense
@wiking	the developer should just do
@lisitsyn	but c.get(c.keyword) is ugly
@wiking	SG_ADD(parameter)
@wiking	and then from there we could generate what keywords are supported
@wiking	and that's it
@wiking	of course this is quite tricky
@wiking	because we rely on cpp implementation
@wiking	to generate the .h of the class
@lisitsyn	well not really tricky, it is ok I think
@wiking	see what i mean
@wiking	?
@lisitsyn	we put that into .h
@wiking	so you rely on implementation to have a definition of a class
@wiking	mmm
@lisitsyn	no, you declare them once in h
@wiking	i mean this would make things more clean i would say
@lisitsyn	wiking: but again, c.get(c.keyword) is ugly
@wiking	lisitsyn: ok let say there's a way to define them in .h
@lisitsyn	classifier.get(classifier.time_limit)
@wiking	lisitsyn: better idea? :)
@lisitsyn	ugly!
@lisitsyn	no
@wiking	true that it's shit
@lisitsyn	I doubt there is a way
@wiking	i mean better than
@wiking	c.funky_function_name_because_i_had_vodkaz_set(a)
@wiking	;)
@wiking	i mean somehow we should have an autogen between registered parameters
@wiking	and their setter/getter
@wiking	that's for sure
@lisitsyn	that's eay
@lisitsyn	easy
@wiking	lisitsyn: we could start with that
@wiking	and then take the next step
@lisitsyn	but I'd like to find a way around that c.get(c.shit)
@wiking	and in the meanwhile start thinking about d-ptrs
@wiking	because this switch
@wiking	should include that as well
@wiking	and then
@wiking	actually
@wiking	it's noooot that hard anymore
@wiking	because we could generate the whole api of the public
@wiking	class
@wiking	from the private class
@wiking	or something like that
@wiking	if private class gets more params
@lisitsyn	no, api should be public
@wiking	yeah but what i mean here
@wiking	is that we use the d-ptrs arch
@wiking	i.e. we have private classes
@wiking	where the real magic is being done
@lisitsyn	wiking: actually
@lisitsyn	remember scikit learn
@lisitsyn	that we compare to each minute
@lisitsyn	:D
@lisitsyn	how do they handle it
@wiking	dunno
@lisitsyn	they have keywords to set parameters
@lisitsyn	SVC(C=1.0)
@lisitsyn	like that
@wiking	ah yeah
@wiking	but that's really easy within python
@wiking	or we go with vargs as well? :)
@lisitsyn	wiking: but you don't know what parameters
@wiking	set(vargs...)
@lisitsyn	wiking: ah I have a way to support that in C++ actually
@lisitsyn	some kind of
@lisitsyn	I mean C=1.0
@wiking	http://www.cplusplus.com/reference/cstdarg/va_arg/
@wiking	that's it
@lisitsyn	no, trickery lies in overloading =
@lisitsyn	:)
@lisitsyn	wiking: but what I mean is
@lisitsyn	you have to check docz
@lisitsyn	to know how to call that sklearn.SVC
@lisitsyn	and people feel ok about it
@lisitsyn	may be we can be comfortable too
@wiking	mmm yeah true.. i just like if there's autocomplete
@wiking	so that i dont have to alt-tab all the fucking time
@lisitsyn	wiking: I know one way
@lisitsyn	wiking: we can put that into the doc of the get method
@lisitsyn	of each class
@lisitsyn	so adding new parameter doesn't change API
@lisitsyn	it changes doc
@lisitsyn	you look up what you need
@lisitsyn	and write it
@wiking	shiatz
@wiking	fucking docs
@lisitsyn	why not?
@wiking	yeah i get it
@lisitsyn	wiking: not that bad I'd say
@wiking	let's think about that more
@lisitsyn	wiking: ah and if we put that into docs
@lisitsyn	we don't put them to classes
@lisitsyn	we have separate namespace
@lisitsyn	you do
@lisitsyn	classifier.<tab>
@lisitsyn	and get
@lisitsyn	get(Keyword)
@lisitsyn	Returns the value of the specified parameter. Supported parameters are:
@lisitsyn	shogun.parameters.caching.size
@lisitsyn	shogun.parameters.caching.shit_ratio
@lisitsyn	shogun.parameters.shit.total_shit_ratio
@lisitsyn	wiking: ^
@wiking	mmm
@wiking	could work
@lisitsyn	yes it looks a bit better
@wiking	cool
@wiking	we just need to implement it :)
@wiking	what do we do with the slicing up?
@wiking	because as sonney2k_ pointed out
@wiking	it's all great
@wiking	until we have only c++
@wiking	and the problem rises
@wiking	when we start swiging
@wiking	because he tried swig modular thing
@wiking	but that was crashing for sonney2k_
@lisitsyn	wiking: yes it is kind of problem
@wiking	as swig has a support to generate separate .cxx instead of one monster cxx
@wiking	but apparently it's really unstable
@wiking	but maaaybe that's like swig 1.x
@wiking	and maybe it has matured ever since then
@wiking	i mean none of tried that nowadays
@wiking	*none of us
@lisitsyn	wiking: I see some drawback that is related to modularity
-!- Saurabh7 [~Saurabh7@115.248.130.148] has joined #shogun
@lisitsyn	if everything is that loosely coupled may be we should find a way to support that properly
@lisitsyn	i.e. everything is defined by global names but how do we call third party (or backported from newer versions) shogun classes
@wiking	hehehe
@lisitsyn	I have an algorithm called
@lisitsyn	SVCTOTOTOTOTOTO
@lisitsyn	how do I import it
@lisitsyn	if it wasn't around
@lisitsyn	but it is here now as .so
@wiking	:>
@wiking	well i think there's a lot we could learn abot this
@wiking	from gstreamer
@wiking	as they have a way
@wiking	i mean of course some standard ways
@wiking	you can develop any sorts of gstreamer plugin
@wiking	and it'll make sure that if 2 modules can work together it'll make it work together
-!- iglesiasg [~iglesias@2001:6b0:1:1da0:28a3:b90c:4a85:f150] has quit [Ping timeout: 245 seconds]
-!- hushell [~hushell@c-50-188-141-210.hsd1.or.comcast.net] has quit [Ping timeout: 265 seconds]
@wiking	woah fuck
@wiking	this is great
@wiking	http://docs.docker.io/en/master/api/docker_remote_api_v1.6/#docker-remote-api-v1-6
@wiking	we could easily use this for distrib stuff :)
-!- lisitsyn [~lisitsin@mxs.kg.ru] has quit [Quit: Leaving.]
-!- iglesiasg [~iglesias@n181-p223.kthopen.kth.se] has joined #shogun
-!- iglesiasg [~iglesias@n181-p223.kthopen.kth.se] has quit [Client Quit]
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has joined #shogun
 sonne|osx	wiking: no I just slept until now...
@wiking	sonne|osx: hihi
@wiking	sonne|osx: read the logs
@wiking	quite entertaining
-!- benibadman [~benibadma@94.135.236.129] has quit [Ping timeout: 272 seconds]
 sonne|osx	wiking: ok so I see some brainstorming about modularizing and setters/getters
 sonne|osx	wiking: I would want to add some more down to earth stuff
@wiking	cool
@wiking	add
 sonne|osx	allowing to compile interfaces w/o shogun src dir being available
 sonne|osx	and the d-ptr stuff
 sonne|osx	I think we need to have clean interfaces first - and I think *we* need to do this
 sonne|osx	not some student
 sonne|osx	it needs to be well thought through
 sonne|osx	when we have this the split up might be much more obvious
-!- Saurabh7 [~Saurabh7@115.248.130.148] has left #shogun ["Leaving"]
@wiking	indeed
@wiking	well this is interconnected imo
 sonne|osx	wiking: yeah but it is a lot of work too and I think we have to work on this together somehow - because it is a lot of work (the d-ptr stuff)
 sonne|osx	I mean it is if done well
@wiking	well
 sonne|osx	it is not if you just copy paste what we have now
@wiking	let's sketch up
@wiking	the work
@wiking	and we can slowly start crunching on it imo
 sonne|osx	yeah but before that I think the most important thing right now is to get into distributions
 sonne|osx	to become a standard
@wiking	yey true
@wiking	that means
@wiking	we need to be able to
@wiking	"17:53 < sonne|osx> allowing to compile interfaces w/o shogun src dir being available"
@wiking	:D
 sonne|osx	for debian yes - for fedora besser82 won't need it
@wiking	we dont have a problem with that "i dont know how many gigs of ram we can consume while compiling the package"
@wiking	?
@wiking	as far as i remember u told something about a limit
@wiking	that actually swig generated interfaces just eats up too much ram
 sonne|osx	wiking: we have a problem but at least each interface has different memory requirements
@wiking	hence we cannot have a package of those
@wiking	i mean official packages
 sonne|osx	IIRC last time compiling octave and swig made things go >3.5 G or so
 sonne|osx	so octave_modular might be problematic
@wiking	as obviously we can roll our own deb packages
@wiking	and there's no such limitation ;P
 sonne|osx	but we could try to limit things (say not wrap all classes / all data types) and use clang to compile
@wiking	well i guess first things first
@wiking	cmake patch
@wiking	to get things compiled separately
@wiking	besser82 is just overloaded with work so i guess we have to roll our own cmake hack :D
@wiking	sonne|osx: u still on sick leave?
 sonne|osx	wiking: yes
@wiking	sonne|osx: till?
@wiking	god knows only?
@wiking	hope nothing serious
 sonne|osx	yeah :/
@wiking	just a stupid flu
@wiking	get well
@wiking	and dont hack too much
@wiking	anyhow i'll check on this shiatz
@wiking	i just have too many things
@wiking	around me lately and too little time
 sonne|osx	wiking: no Tonsillitis
@wiking	but will try to give it a go today
@wiking	buuuuh
@wiking	i hate that
@wiking	sonne|osx: am i right that we are still failing with protobuf as well?
 sonne|osx	wiking: yes
@wiking	cool
@wiking	needs a fix as well
 sonne|osx	wiking: besser82 said taht he wanted to do this by monday
@wiking	well i guess he is just overwhelmed with other shiatz
 sonne|osx	but then no idea...
 sonne|osx	yeah
 sonne|osx	I know how to fix it
@wiking	how?
 sonne|osx	so I would just do it also avoiding the static lib
 sonne|osx	wiking: well I call the protobuf compiler my own
@wiking	sonne|osx: with the right flags ;)
@wiking	yeah i thought to do the same
 sonne|osx	well it only has one flag
@wiking	as i was really fed up with the inflexibility of that cmake wrapper
 sonne|osx	--cpp-out = directory to put output
 sonne|osx	and that's it
@wiking	sonne|osx: go for it i'd say
@wiking	as that script is just good for detecting the protobuf itself
@wiking	and do the rest normally
@wiking	like u suggested
@wiking	i had the same kind of problem with SWIG
 sonne|osx	wiking: yeah and all that is missing then is to add the 3 generated .h files to the shogun src's
 sonne|osx	and the .cc's to the stuff to be compiled
 sonne|osx	that's it
@wiking	that there was noooo fucking way to add ccache-swig to that cmake swig macro
@wiking	hence i've hacked my own
 sonne|osx	in some way shogun is special - it just has *many* deps ...
@wiking	well normal
-!- thoralf [~thoralf@enki.zib.de] has joined #shogun
@wiking	hahaha great bug by thoralf
@wiking	:DDD
 thoralf	Hey.
 thoralf	Whatever I do. ;)
 sonne|osx	guilty
 sonne|osx	by definition!
 sonne|osx	wiking: this reminds me that we need to finish the SGString* referenced data transition
 sonne|osx	wiking: and I guess Heiko is totally away until january
 sonne|osx	too bad
 sonne|osx	because we have like 5 pages of ideas written on some notebooks
 sonne|osx	what we could should do
@wiking	as well as supporting views for Features and Labels
 sonne|osx	and also for gsoc etc
@wiking	and of course try to think about how to port std::shared_ptr ;)
@wiking	lalala
@wiking	too many good stuff that is needed
 sonne|osx	exactly such things
 sonne|osx	all tons of work
@wiking	yeps
@wiking	i dont know if it's worth it
@wiking	as per se
@wiking	i dont see that many ppl using shogun
@wiking	and of course that's because we dont have package
 sonne|osx	yeah
@wiking	and eeeevery other ML library is like either
@wiking	pip install
 sonne|osx	and I think the best way to increase number of users
@wiking	or apt-get install
@wiking	and yes
 sonne|osx	is to have it prepackaged
 sonne|osx	and then also
@wiking	we neeed fucking native windows port:P
 sonne|osx	to get it used in teaching!
@wiking	sonne|osx: indeed
@wiking	sonne|osx: i'm already pushing some profs i know to do this
@wiking	they liked the notebooks
 sonne|osx	so I think our demos/notebooks should cover all textbook materials
@wiking	so lets see
 thoralf	sonne|osx, wiking: A good way to get more users is something like libsvm-train, libsvm-predict.
 sonne|osx	I am doing the same
 sonne|osx	and they all liked it
@wiking	sonne|osx: yeah for that we are like missing basic stuff like decision tree :)
 thoralf	We have tons of algorithms, but nothing out-of-the-box.
@wiking	thoralf: yeps
 sonne|osx	thoralf: naa
 sonne|osx	then they could use libsvm :D
@wiking	thoralf: i'm trying to push something like gstreamer pipelining
 thoralf	It would be easy to change some examples to look like this.
 sonne|osx	but sure one could have libsvm compatible interface but supporting all svms and kernels in shogun
 sonne|osx	(very easily)
 thoralf	wiking: gstreamer?  Isn't it audio stuff?
@wiking	thoralf: ./shogun input ! reader ! preprocessor ! ML algo ! outputmodel
@wiking	thoralf: yes but you can do a command line like that
 thoralf	Hehe.
@wiking	thoralf: gstreamer input ! demux ! decode ! push it into videobuffer
@wiking	and the library itself will make it sure
@wiking	that the stuff is converted into the right format etc
 sonne|osx	wiking: the more flexibility you allow the slower it gets :D  but I think underneath it is already like that
@wiking	and that the different modules are actually connected
 sonne|osx	you can choose the reader
@wiking	sonne|osx: heheh yeah but still this is pretty easy stuff
@wiking	we just need a handler for it
 sonne|osx	features an preprocessors
 sonne|osx	and ml algo and get output
@wiking	indeed
 sonne|osx	and get it evaulated by perf measure the way you want
 sonne|osx	...
@wiking	yeps
@wiking	that's the other pipeline
 sonne|osx	there just isn't a cmdline thing for that
 thoralf	Sounds a bit like over-engineering. :)
@wiking	thoralf: still there's a good reason why gstreamer is being deployed almost on any linux based multimedia machine
@wiking	thoralf: it's just well thought out and very modular
@wiking	you can easily plug in and out stuff
@wiking	and things are really loaded in dynamically
@wiking	so we dont need like a 500 megz shared lib to hang around in the memory
@wiking	just because we want to do evaluation on a model
@wiking	that actually would require 3 things
 thoralf	Every time I try something with shogun, I get need valgrind/gdb in the end.
@wiking	thoralf: hahahahah
 thoralf	That's no good user experience.
@wiking	thoralf: welcome to opensource :)
@wiking	thoralf: but true
 thoralf	lol
@wiking	thoralf: well the best thing is to generate for each gdb session another unit test :)
@wiking	just that it never happens again
@wiking	:P
 thoralf	I don't care about command line stuff as long it's segfaulting as hell. ;)
@wiking	:D
 thoralf	My example can easily converted to a test - but my primary objective is to check that it's not (Soerens words ;)) self-inflicted.
 thoralf	Btw., StructuredLabels is sucking as well.  Wasting memory and not giving it back.
-!- zxtx [~zv@c-98-193-83-24.hsd1.il.comcast.net] has quit [Ping timeout: 272 seconds]
 sonne|osx	thoralf: problem really is that the streaming feeatures did not survive the SGVector* refcount refactoring in healty shape - this whole thing needs conversion
 thoralf	sonne|osx: All my minimal examples do not even involve streaming features.
* thoralf is just entering another mine field: struct output stuff.
 sonne|osx	wiking: I think we have this modularity code wise but no good separation into packages
 sonne|osx	thoralf: that is hardly sth minimal though
 thoralf	sonne|osx: Which one are you talking about?
 sonne|osx	thoralf: structured output learning
 thoralf	https://github.com/shogun-toolbox/shogun/issues/1758, https://github.com/shogun-toolbox/shogun/issues/1759
 thoralf	That's what I found so far. ;)
 thoralf	There are other things related to StructuredLabels, but it's hard to track it down.
 thoralf	CStructuredLabels * sl = new CStructuredLabels(100);
 thoralf	Oops.
 thoralf	This one is my next suspect: CStructuredLabels * sl = new CStructuredLabels(num);  for (int idx=0; idx<num; idx++) { sl->set_label(idx, new CRealNumber(idx)); }}
 thoralf	Every added label consumes 5.8k of memory.
 thoralf	Only RealNumbers.
 thoralf	Stops working with 3M output labels on my laptop, since eats my 16G for breakfast.
 thoralf	And 3M outputs shouldn't be a big deal.
 thoralf	Woha!
 thoralf	new CRealNumber(1); <-- Does 5 (!) allocating of 1024 Bytes.
-!- zxtx [~zv@129-79-241-148.dhcp-bl.indiana.edu] has joined #shogun
 thoralf	Damn.
 thoralf	sonne|osx: I think we have a problem.
 thoralf	shogun/base/SGObject.cpp lines 1066-1069
 thoralf	Each parameter creates a DynArray of 1024 bytes.
 thoralf	And struct label inherits from SGObject
-!- benibadman [~benibadma@port-92-206-116-153.dynamic.qsc.de] has joined #shogun
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has quit [Quit: sonne|osx]
-!- benibadman [~benibadma@port-92-206-116-153.dynamic.qsc.de] has quit []
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has joined #shogun
@wiking	thoralf: we need serialization :S
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has quit [Quit: sonne|osx]
-!- lisitsyn [~lisitsyn@80.252.20.67] has joined #shogun
@wiking	lisitsyn: somebody just logged in to cloud from here: http://zeliade.com/
@wiking	:P
 lisitsyn	wiking: it happens :)
@wiking	lisitsyn: heheh .net quant fw :P
@wiking	so i guess he would be more interesed in the c# interface :P
 lisitsyn	wiking: you still thinking of quant stuff, are you? ;)
@wiking	http://www.risk.net/journal-of-risk-model-validation/technical-paper/2161296/model-validation-theory-practice-perspectives
@wiking	one of the authors ;P
@wiking	lisitsyn: yeah but fuck man
@wiking	we need like a super new language
@wiking	to do all those things we want
@wiking	in 1 clikc
@wiking	;P
@wiking	for sure the wolfram shit will solve it for us
@wiking	:DDD
@wiking	</irony>
 lisitsyn	wiking: I don't have any things I want :D
 lisitsyn	ahhah yeah wolframed
@wiking	lisitsyn: what do u mean?
 lisitsyn	wiking: I have absolutely no idea what is needed
@wiking	life
@wiking	and ML
@wiking	:D
@wiking	but the stuff we were talking about
@wiking	would be great to have
@wiking	like yesterday
@wiking	not in another 1 year
@wiking	although we must give some credit to ourselves
 lisitsyn	wiking: no idea! :D
@wiking	check this
@wiking	https://github.com/shogun-toolbox/shogun/wiki/Future-of-Shogun-Brainstorming
 lisitsyn	wiking: we should have been kaggling or whatever
 lisitsyn	to have some real tasks
@wiking	lisitsyn: well there's still some shiatz we could do with kaggle
 lisitsyn	I am currently having troubles with time but I still want to get to that some day
 lisitsyn	I can't be java programmer for ever :D
@wiking	lisitsyn: http://www.kaggle.com/c/dogs-vs-cats
@wiking	;P
@wiking	heheh time is a biatch
@wiking	here
@wiking	let's make 9k usd
@wiking	http://www.kaggle.com/c/yandex-personalized-web-search-challenge
@wiking	;d
@wiking	we have ziltch to do with ALS
 lisitsyn	yandex
 lisitsyn	hah
 lisitsyn	they were interested of hiring me
@wiking	hehehe
@wiking	great :)
@wiking	btw we could apply to be an apache incubator proj if we r interested
 lisitsyn	don't know about it
@wiking	well there are ups and downs for being such project
-!- thoralf_ [~thoralf@91-66-33-4-dynip.superkabel.de] has joined #shogun
 thoralf_	Heyhey.
@wiking	thoralf: hola amigo
 thoralf_	wiking: I read your comment, but I don't know whats best...
@wiking	thoralf_: well is it leaking now?
@wiking	or 'just' consuming too much memory? :P
@wiking	i mean i understand that having 1 fucking float
@wiking	is just crazy to have so much overhead
@wiking	hence we should do something about this
 thoralf_	wiking: The leak is caused by something else, so yes, it's leaking now.  But it's not related to this bloat. ;)
@wiking	yeah
@wiking	we are becoming a bloat machine :)
@wiking	it's almost like matlab
 thoralf_	My problem is that I cannot evaluate my data set.
@wiking	1 float = 1MB :P
 thoralf_	lol
@wiking	so yeah we should kill that
@wiking	or something
@wiking	cannot evaluate because?
 thoralf_	1 float = 5*1024 Bytes + something small to hold the float. ;)
 thoralf_	No enough memory.
 thoralf_	2M entries take 20GB of RAM.
@wiking	zep
@wiking	yep
@wiking	understand the pain
 thoralf_	I would try to solve it, but it's to close to shoguns internals...
-!- iglesiasg [~iglesiasg@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
 thoralf_	Hey iglesiasg
@iglesiasg	thoralf_, hi!
@iglesiasg	I came around because of your mails :)
@iglesiasg	so something is pretty bad with structured labels and dynamic object array, isn't?
 thoralf_	Yes.
 thoralf_	Different things.
 thoralf_	But you see the tickets. ;)
 thoralf_	Labels are bad as well.
 thoralf_	StructuredLabels inherit from CSGObject, but this need 5k/instance.
 thoralf_	So 2M RealNumber labels are taking 11GB.
@iglesiasg	Shit
@iglesiasg	I never thought about memory overload due to CStructuredData being a CSGObject
@iglesiasg	thoralf_, where do the 5k/instance come from? Is it because SGObject has many attributes?
 thoralf_	new Parameter(...)
 thoralf_	:)
 thoralf_	Parameter internally uses DynArray.
 thoralf_	Which pre-allocates 1024 Bytes.
 thoralf_	128 entries, 8 bytes each.
@iglesiasg	are all these 128 entires used?
 thoralf_	I could make it 16 entries, but that's all. ;)
 thoralf_	No, only pre-allocation.  I didn't check, but I'd say the array will hold about 5 entries.
 thoralf_	But reducing the pre-allocation is a poor fix. ;)
@iglesiasg	Do you think so?
@iglesiasg	Why?
@iglesiasg	not in general for DynArray of course
@iglesiasg	but maybe is something we have to fix in this use case
@iglesiasg	shrink the DynArray to the memory used
 thoralf_	But DynArray is used in many places.
 lisitsyn	oh we have one something like one virtual machine for a float
-!- sonne|osx [~sonne@f053043202.adsl.alicedsl.de] has joined #shogun
 lisitsyn	we are like hypervisor haha
 thoralf_	But I admit that your fix is pragmatic as hell. :)
 thoralf_	iglesiasg:
 thoralf_	lisitsyn: lol
@iglesiasg	thoralf, http://en.cppreference.com/w/cpp/container/vector/shrink_to_fit
 thoralf_	lisitsyn: Pooled floats with auto-failover.
@iglesiasg	I mean something like this
 lisitsyn	thoralf_: yeah why not, one instance of QNX to handle floats
@iglesiasg	thoralf, a method that allows to shrink, no that all DynArrays are automatically shrinked
 lisitsyn	imagine how stupid some parts of C++ are
 thoralf_	iglesiasg: Yeah, but we first need to decide what exactly is the bug. ;)
 lisitsyn	shrink to fit just appeared in C++11
-!- FSCV [~FSCV@201.161.7.110] has joined #shogun
 lisitsyn	before you had to copy it
 lisitsyn	:D
@iglesiasg	lisitsyn, "just"
 thoralf_	iglesiasg: Parameter stuff?  StructLabels?  CSGObject?
@iglesiasg	we are already in 2013 :D
@iglesiasg	finishing actually
 lisitsyn	iglesiasg: 2011 is way too late for such stupid things :)
@iglesiasg	lisitsyn, hehe I agree
 sonne|osx	iglesiasg: why does RealNumber have to be an SGObject?
@iglesiasg	sonne|osx, CStructuredLabels are basically a dynamic object array of CStructuredData
@iglesiasg	and CStructuredData is CSGobject
@iglesiasg	one could not make CStructuredData inherit from CSGObject, but then we lose advantages like using SG_REF/UNREF
@iglesiasg	thoralf_, I am actually not aware how the Parameter stuff works, do you know about it?
 thoralf_	iglesiasg: No, nothing.
@iglesiasg	ok
 thoralf_	I just debugged into it.
 thoralf_	sonne|osx: What about a class that only cares about SGREF/UNREF methods to inherit from?
@iglesiasg	thoralf_, I am checking CSGObject atm, I see there several Parameter*
 thoralf_	sonne|osx: Would instantly solve the complete issue (exept that we're putting floats into objects, but it's the way SO works ;))
@iglesiasg	thoralf_, yeaah, putting float into objects is overkill indeed. But there is actually no real reason to use SO with the CRealNumber apart from debugging purposes, right?
@iglesiasg	if your labels can be put into a real number, then you don
@iglesiasg	you don't have structured output, why to use SO then :P
 thoralf_	No, RealNumber was just for the minimal example.
 thoralf_	I'm using something else.
@iglesiasg	I understand
@iglesiasg	thoralf_, soo, let's see if I got the issue correctly, the problem is that Parameter has a DynArray inside, and every CSGObject has some Paremeter attributes
 thoralf_	Yes.
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 0e503de / src/shogun/base/Parameter.h: https://github.com/shogun-toolbox/shogun/commit/0e503dee1eaef2038b6bcd86b5271c4a612605b5
 shogun-notifier-	shogun: slightly decrease memory requirements of (unused) parameters
@iglesiasg	and due to memory allocation of the DynArray, that takes much memory
 thoralf_	sonne|osx: Yeah. ;)
@iglesiasg	hehehe we just got the fix
 thoralf_	iglesiasg: S?ren was tired of argueing ;)
@iglesiasg	so what are these m_params in Parameter suppose to hold
 thoralf_	iglesiasg: Okay, now the next problem: StructuredLabels->set_label(...)
@iglesiasg	I think it is related to the model selection stuff
@iglesiasg	all right, next then!
 shogun-buildbot_	build #2476 of deb1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/2476  blamelist: Soeren Sonnenburg <sonne@debian.org>
 thoralf_	iglesiasg: https://github.com/shogun-toolbox/shogun/issues/1759
 thoralf_	set_label does not increase num_labels.  This has different side effects.
 thoralf_	first: since it thinks, the array is empty, it doesn't free it.
 thoralf_	second: I cannot check how many entries are in it (found it accidently with paranoid assertions)
@iglesiasg	thoralf_, well, the thing is that in this case add_label should be used
@iglesiasg	thoralf_, but I understand that the API should support set_label well
@iglesiasg	let me try to remember why I decided to separate add_label and set_label
 thoralf_	set_label maybe should be renamed "replace_label" and assert that the entry is already set. ;)
@iglesiasg	it makes lot of sense
 sonne|osx	thoralf_: that is not really a fix - it is just not a good thing to use the framework like this - IMHO it should rather be high-level solved
 thoralf_	Why I need set_label(): When doing computations in parallel, the order of add_label() is not determined.
 sonne|osx	as in you have a vector of real numbers
 sonne|osx	not just a single number
 thoralf_	sonne|osx: My data is some self-cooked Multilabel stuff.
 sonne|osx	I mean it is clear that SGObject has a huge overhead
 thoralf_	RealNumber was just a show-case.
 sonne|osx	I think realnumber should only be used when you have a handful of dims
 sonne|osx	for all the rest you should introduce other high-level objects
 thoralf_	I have a MultiLabel-Output per Input.  Multilabel internally uses vectors of ints, no objects.  So my problem is just having outputs for 2M inputs.
 sonne|osx	anyway memory footprint should be down quite a bit
@iglesiasg	thoralf_, so I agree with renaming set_label. However, thinking about the parallel computations, DynamicObjectArray does not seem to be thread-safe at all. Maybe I am wrong?
 thoralf_	sonne|osx: You just removed 4k/instance.  Not bad. :)
 thoralf_	iglesiasg: If the array-size is known in advance, no resizing takes place.  So threads are no big deal.
 thoralf_	iglesiasg: Problem occurs when resizing.
@iglesiasg	true true
@iglesiasg	out of curiosity in any case, does it become relevant to parallelize label insertion??
 sonne|osx	iglesiasg: of course not
 thoralf_	Creating *one* multilabel is expensive
 sonne|osx	nothing is thread safe if not otherwise noted
 thoralf_	When creating 8 at a time, this helps a lot.
 thoralf_	1 Multilabel consists of >>100 dimensions.
 sonne|osx	iglesiasg: it is like any java collection - not thread safe
@iglesiasg	I see (both of your points guys :)
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * c9e6013 / src/shogun/base/ParameterMap.h: https://github.com/shogun-toolbox/shogun/commit/c9e60139ba35e55a3734d0a67c868ae9addbf69d
 shogun-notifier-	shogun: reduce overhead in parameter map
 shogun-buildbot_	build #2477 of deb1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/2477  blamelist: Soeren Sonnenburg <sonne@debian.org>
@iglesiasg	thoralf_, I am thinking about this
@iglesiasg	thoralf_, so how does DynamicObjectArray handles if you try to set, say, element 5 but none of the previous elements 0-4 are already set?
 thoralf_	iglesiasg: https://github.com/shogun-toolbox/shogun/issues/1758 ;)
 thoralf_	I'm about to create an array and assign it to dynamicobjectarry just after prediction.
 thoralf_	A minefield.
@iglesiasg	well that is not exactly what I said, but it is indeed another issue :D
 thoralf_	set_element() obviously assumes that the element already exists, but doesn't check.
 thoralf_	Didn't know all this up front.  Running into one mine after another... as usual.
 sonne|osx	thoralf_: I think they just need to be null'd and all good
 thoralf_	iglesiasg: But, answering your question: It's possible to set it - the array will be extended to the needed size.
 thoralf_	sonne|osx: Yeah.
-!- travis-ci [~travis-ci@ec2-54-205-106-73.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/14276293
-!- travis-ci [~travis-ci@ec2-54-205-106-73.compute-1.amazonaws.com] has left #shogun []
 thoralf_	sonne|osx: But it's not that easy due to the resizing.
 thoralf_	sonne|osx: Many error-sources.
@iglesiasg	thoralf, extended using nulls I guess
 sonne|osx	thoralf_: actually the get element there is scary
 sonne|osx	no resizing will happen there
 sonne|osx	so it can be an out of bounds access indeed
 thoralf_	Nono, two different points. ;)
 sonne|osx	if you in your example do set_element(NULL, 500); it would be a real issue
 thoralf_	first: setting elements to null prevents the UNREF(undefined value)
@iglesiasg	thoralf, I think that for your use case the easiest is going to be if you create your own thread-safe queue :D
 thoralf_	iglesiasg: Well, having an array and using openmp to iterate; every iteration stores one index.  No problem with threads. ;)
 thoralf_	second: no checking is done at all
@iglesiasg	thoralf, easy peasy then --- use than openmp array with several threads for the object creation, and then just one thread that takes elements from this array and puts them into StructuredLabels using add_label
@iglesiasg	thoralf_, what do you think_
@iglesiasg	?
 thoralf_	iglesiasg: I know - this thing is already solved.
 thoralf_	iglesiasg: Just the set_label() just nagged me.
@iglesiasg	all right then
@iglesiasg	yeah sure, we should fix this
@iglesiasg	but first the DynamicObjectArray issue probably
-!- travis-ci [~travis-ci@ec2-54-205-106-73.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/14277215
-!- travis-ci [~travis-ci@ec2-54-205-106-73.compute-1.amazonaws.com] has left #shogun []
-!- hushell [~hushell@c-50-188-141-210.hsd1.or.comcast.net] has joined #shogun
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * f037955 / src/shogun/base/ (4 files): https://github.com/shogun-toolbox/shogun/commit/f0379552057d98cbee46e56ac3ebb4a269449e3c
 shogun-notifier-	shogun: dynamically set reduced granularity
 shogun-buildbot_	build #2478 of deb1 - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/2478
 thoralf_	iglesiasg: So am I right that we won't fix set_label() -- would it make sense to remove it?
 shogun-buildbot_	build #1960 of bsd1 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/1960  blamelist: Soeren Sonnenburg <sonne@debian.org>
 thoralf_	iglesiasg: It can only be used properly if we either initialize the array with NULL or forcing the caller to take care of what has been added so far...
@iglesiasg	thoralf_, yes, I think it is best to remove it
@iglesiasg	maybe set_element filling in with nulls makes sense for DynamicObjectArray, but I don't see how it would for StructuredLabels
@iglesiasg	thoralf_, let me try to remove it and see if there are many dependencies
 thoralf_	One second.
@iglesiasg	ok
 thoralf_	If we only have add_label() - does it make sense to initialize the StructLabels with a target size?
 thoralf_	No checking is done; the array grows automatically...
-!- FSCV [~FSCV@201.161.7.110] has quit [Quit: Leaving]
 thoralf_	No more difference between storage size and number of elements.
@iglesiasg	well, the num_labels is used in the DynamicObjectArray constructor
@wiking	nyihaaa
@wiking	fuckshitatz
@iglesiasg	I guess it reduces the number of resizes
@iglesiasg	wiking, everything all right there? :D
@wiking	nada
@wiking	any solutions? :)
@wiking	iglesiasg: been workng on 5 different things today
@wiking	fuuuck yeeaaah!!!
@iglesiasg	superman
@wiking	45G     indexing/destination/indexes/default/freebase/data/index/
@wiking	so i have 45 gigs which is just fucking inverted index for solr
@wiking	niiiize
 thoralf_	iglesiasg: Right, well.  Mind to add a line of documentation for that?
@wiking	anybody has a spare 45 gigs
@wiking	? :)
 thoralf_	iglesiasg: The API doc for the constructor.  num_labels -> reallocate_size
@wiking	with link unlimited BW
 thoralf_	preallocate
 thoralf_	wiking: Ehr.  How much traffic to you expect?
 sonne|osx	thoralf_:  could you please submit this as a test https://github.com/shogun-toolbox/shogun/issues/1758
@wiking	thoralf_: well i guess 10-20 downloads/day
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 6bfb8fc / src/shogun/lib/DynamicObjectArray.h: https://github.com/shogun-toolbox/shogun/commit/6bfb8fc42ba384b8435917629e76d5c780d2245f
 shogun-notifier-	shogun: potential fix for #1758
@iglesiasg	thoralf_, the StructuredLabels doc already mention it!
@iglesiasg	thoralf_, is it the DynamicObjectArray one which doesn't?
@iglesiasg	@param dim1 dimension1 is not very deep indeed...
 thoralf_	iglesiasg: Oh!
 thoralf_	iglesiasg: I read this, but I understood it differently.
 thoralf_	iglesiasg: I though it's the storage size - wasn't aware that it might grow.
 thoralf_	wiking: Too much, sorry. ;)
@wiking	thoralf_: heheh thought so
 thoralf_	wiking: Having unlimited traffic at work, but 500G/day... hmm.
@wiking	thoralf_: well i guess that would the harder days
@wiking	but i cannot assure
@wiking	that it's much less
 thoralf_	What's in this index?
@wiking	as it's the index half of freebase.com
@wiking	cool stuff man
 thoralf_	Oh, wow.
@wiking	semantic web is my second favourite thing after shogun
 thoralf_	Crazy shit.
 thoralf_	How did I miss that?
@wiking	thoralf_: heheh dunno
@wiking	it's fucking cool
@wiking	apache has some cool tools for semantic web
@wiking	only shame is that it's java
 sonne|osx	thoralf_:  please check if that fixes the issue preferably by making it a test!
 thoralf_	sonne|osx: The memory issue?  It's hard to test...
 thoralf_	A test could be to set ulimit to something low and then let the script create 100000 RealNumbers. ;)
 thoralf_	==3226==   total heap usage: 44,000,328 allocs, 322 frees, 2,032,034,974 bytes allocated
 thoralf_	for 4M RealNumber entries
 thoralf_	That's nice.
 thoralf_	Only 1016 bytes per float.
@wiking	that's crazy lot
@wiking	sizeof(double) = 8 bytes :)
@wiking	it's just 127 times more :P
@wiking	that's far from optimal i would say
@wiking	thoralf_: do u use swig or directly c++?
 thoralf_	C++
@wiking	thoralf_: u could just throw out the public CSGObject for StructuredData
 thoralf_	It saved me 80% compared to before.  :)
@wiking	thoralf_: still...
@wiking	mmm w8
 thoralf_	wiking: Yes, that's what everyone said... I'll try tomorrow. ;)
@iglesiasg	wiking, mmm I just rebased I am getting something weird with cmake
 thoralf_	Losing SG_*REF would be bad.
@wiking	thoralf_: but r u DynamicObjectArray
@wiking	i mean
@iglesiasg	cannot find source file: OBJECT
@wiking	iglesiasg: update your cmake
@wiking	:P
@wiking	thoralf_: so you'll have problem with DynamicObjectArray
@wiking	as it's storing                 DynArray<CSGObject*> m_array;
@iglesiasg	wiking, 2.8.7 here and minimum is 2.8.4
@iglesiasg	wiking, which one should I use?
@wiking	so it won't be able to do store StructuredData if it's not inherited from SGObject
@wiking	:<
@wiking	iglesiasg: 2.8.8+
 thoralf_	wiking: Damn.
@wiking	iglesiasg: we are breaking develop branch everywhere
@wiking	in any possible way
@wiking	;)
 thoralf_	wiking: Why?  How does it depend on SGObject?
@wiking	that's like sonne|osx and my work for the last couple of days
 thoralf_	Because of ref/unref or why?
@wiking	thoralf_: this is in src/shogun/lib/DynamicObjectArray.h
@wiking	private: /** underlying array */ DynArray<CSGObject*> m_array;
@wiking	so u see
 thoralf_	Oh.
 thoralf_	void*? ;)
@wiking	ihehehehe
@wiking	use a different DynArray and u r fine
@wiking	i mean
@wiking	dont use DynamicObjectArray
@wiking	but use DynArray
@wiking	and u r done
@iglesiasg	wiking, arrgh the one in ubuntu repos is 2.8.7
@wiking	more or less
@iglesiasg	you killed me for 0.0.1
 thoralf_	wiking: Nice.
@wiking	iglesiasg: see the hack in .travis
@iglesiasg	haha
@wiking	thoralf_: then again we need to do something about this bloat machine
@wiking	:)))
 thoralf_	iglesiasg: wiking is right.  No need to wrap dynarray by dynobjectarray.
@wiking	iglesiasg: sudo apt-add-repository -y ppa:kubuntu-ppa/backports
@wiking	iglesiasg: and u r good to go
@wiking	after that just
@wiking	sudo apt-get update
@wiking	sudo apt-get upgrade
@wiking	and it'll install u cmake 2.8.9
 thoralf_	wiking: I'll check tomorrow.
@iglesiasg	doing doing
 thoralf_	Good night!
@iglesiasg	wiking, shall we change minimum cmake version then?
@wiking	thoralf_: thnx for reporting this major bloat
@wiking	iglesiasg: eventually yes :D
@iglesiasg	thoralf_, Good night! Thanks for detecting all this mess :)
--- Log closed Thu Nov 21 00:00:12 2013
