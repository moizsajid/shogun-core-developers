--- Log opened Tue Aug 25 00:00:51 2015
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * c059905 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/c059905ce580601052c33b23d9dcbdef12bc16dd
 shogun-notifier-	shogun: Use container-based infrastructure on travis
-!- travis-ci [~travis-ci@ec2-54-205-32-242.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77087552
-!- travis-ci [~travis-ci@ec2-54-205-32-242.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * 3800c3f / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/3800c3f2db5458e13dc3b3880e08cda34a0379b6
 shogun-notifier-	shogun: Use container-based infrastructure on travis
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77087844
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has left #shogun []
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77087844
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * 7d459d8 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/7d459d81ee7ccded1b5cc9d064b010284c69a5e2
 shogun-notifier-	shogun: Use container-based infrastructure on travis
-!- travis-ci [~travis-ci@ec2-54-205-32-242.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77088720
-!- travis-ci [~travis-ci@ec2-54-205-32-242.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * df983be / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/df983be9d5eb03a3de5c80b3c15f2c9acbae3265
 shogun-notifier-	shogun: Use container-based infrastructure on travis
-!- travis-ci [~travis-ci@ec2-54-205-32-242.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77089430
-!- travis-ci [~travis-ci@ec2-54-205-32-242.compute-1.amazonaws.com] has left #shogun []
-!- travis-ci [~travis-ci@ec2-23-20-27-217.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77089430
-!- travis-ci [~travis-ci@ec2-23-20-27-217.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * a7e45bd / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/a7e45bdbf854dda0b45f369c81124d5afcbc809e
 shogun-notifier-	shogun: Use container-based infrastructure on travis
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77089758
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * 1dc8936 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/1dc8936876b3503f2b949822df247582a2fada0a
 shogun-notifier-	shogun: Use container-based infrastructure on travis
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77090172
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has left #shogun []
 shogun-buildbot	build #1039 of nightly_default is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/nightly_default/builds/1039  blamelist: Wu Lin <yorker.lin@gmail.com>
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77090172
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * 457a723 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/457a72303d7ebd5d698c85216944dec1cf14c579
 shogun-notifier-	shogun: Use container-based infrastructure on travis
 shogun-notifier-	shogun: Fix OSX travis job
-!- travis-ci [~travis-ci@ec2-23-20-27-217.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77091798
-!- travis-ci [~travis-ci@ec2-23-20-27-217.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * 57129eb / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/57129eb3b2317cb3cbb554748385430e68059981
 shogun-notifier-	shogun: Use container-based infrastructure on travis
 shogun-notifier-	shogun: Fix OSX travis job
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77092419
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * a2ade09 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/a2ade093cd0249f54e3d1415fccde54f645c1af2
 shogun-notifier-	shogun: Use container-based infrastructure on travis
 shogun-notifier-	shogun: Fix OSX travis job
 shogun-notifier-	shogun: Viktor Gal :feature/travis_dockerization * 35f8b24 / .travis.yml: https://github.com/shogun-toolbox/shogun/commit/35f8b24f4c990906f87371f13ebb22cdcfba931f
 shogun-notifier-	shogun: Use container-based infrastructure on travis
 shogun-notifier-	shogun: Fix OSX travis job
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Viktor Gal's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77095952
-!- travis-ci [~travis-ci@ec2-54-158-195-91.compute-1.amazonaws.com] has left #shogun []
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
-!- lambday [c40f1069@gateway/web/freenode/ip.196.15.16.105] has joined #shogun
-!- mode/#shogun [+o lambday] by ChanServ
-!- PirosB3 [~pirosb3@host150-239-dynamic.23-79-r.retail.telecomitalia.it] has joined #shogun
-!- PirosB3 [~pirosb3@host150-239-dynamic.23-79-r.retail.telecomitalia.it] has quit [Ping timeout: 250 seconds]
-!- PirosB3 [~pirosb3@host101-234-dynamic.247-95-r.retail.telecomitalia.it] has joined #shogun
 lisitsyn	lambday: hey
 lisitsyn	around?
@lambday	lisitsyn: aye, sir!
 lisitsyn	sorry we failed to catch up
 lisitsyn	lambday: I am a bit chaotic but want to tell about some technique no
 lisitsyn	now
@lambday	lisitsyn: absolutely man
 lisitsyn	so we have some raw pointers here
 lisitsyn	we can introduce SafePtr<T>
 lisitsyn	guess what it does? ;)
@lambday	how is that different from std::unique_ptr<T>
 lisitsyn	no memory management
 lisitsyn	just one check
 lisitsyn	it is not null
@lambday	lisitsyn: okay! but doesn't your Maybe<T> serves the same purpose?
 lisitsyn	hmmm no not really
 lisitsyn	Maybe is optional value
 lisitsyn	SafePtr or whatever we call it is
 lisitsyn	it is a pointer and it is not null
@lambday	lisitsyn: so we'll have to explicitly clean it up?
 lisitsyn	that's the only thing we know about it
@lambday	okay
 lisitsyn	lambday: remember that talk by sutter
 lisitsyn	unless you do memory management it is raw pointers
 lisitsyn	but I think it makes sense to go forward and make a precondition
@lambday	lisitsyn: yes.. raw pointers are nice when you're not dealing with it's lifetime
 lisitsyn	like a type that says
 lisitsyn	this pointer is safe
 lisitsyn	use it
@lambday	lisitsyn: alright - hmm makes sense
 lisitsyn	lambday: ok so I can add it while we are here
 lisitsyn	its like a random thought
@lambday	lisitsyn: yeah
 lisitsyn	lambday: and one other thing is array/region whatever
@lambday	lisitsyn: but I think we should lay down the design properly - implementation can be done later
 lisitsyn	just the same thing with size
@lambday	lisitsyn: just the same thing with size?
 lisitsyn	ah I am about array
 lisitsyn	lambday: my idea is like
 lisitsyn	no * in code
 lisitsyn	:D
@lambday	so an array would be like what, SafePtr<int> arr = shogun::make_safe<int>(size);
 lisitsyn	I think we need SafeArray
@lambday	different class is required/
@lambday	?
 lisitsyn	yeah to support []
 lisitsyn	and size
 lisitsyn	would make sense
@lambday	why not use std::vector<SafePtr<int>>
 lisitsyn	it transfers memory
@lambday	oh deep copy
@lambday	okay
 lisitsyn	say you want to reuse 3rd to 7th elements of some vector
 lisitsyn	you just create array/region whatever
 lisitsyn	you get bounds checking and it is not null
 lisitsyn	but you don't manage ownership here as well
@lambday	lisitsyn: what if the array that I created from that vector gets deleted?
 lisitsyn	kaboom
@lambday	:D
 lisitsyn	lambday: that's why I think we should make them as scoped as possible
@lambday	see, when thing is shared, we should use plain std::shared_ptr
 lisitsyn	yes
@lambday	or Some<T> :D
 lisitsyn	yes
@lambday	that's our wrapper for that IIRC
 lisitsyn	yes just the same thing
 lisitsyn	with prettier name (as I believe)
 lisitsyn	I hate two words
 lisitsyn	Ptr
 lisitsyn	and Param
 lisitsyn	they are like cut to death versions of real words Pointer and Parameter
@lambday	except std::make_some :D that sounds not so good :D
@lambday	shogun::get_some lol
 lisitsyn	lambday: it's just some and Some
 lisitsyn	some for function and Some for type
 lisitsyn	as of now
 lisitsyn	:)
@lambday	jk
@lambday	that's alright
@lambday	BTW I was thinking a bit regarding tag and I think with tag+string the API would be really ugly
@lambday	so from API's perspective, I like Property<T>
@lambday	or Parameter<T>
 lisitsyn	why?
 lisitsyn	not that ugly ;)
@lambday	see, for a python user, it would make sense to use obj.set("width", 2.56) and obj.get("width")
@lambday	but in c++ we can't do that
@lambday	I mean, you gotta pass the type tag
@lambday	in getter
@lambday	which makes it ugly
@lambday	I was further thinking, we should reduce getters setters as much as we can
@lambday	:D
@lambday	check this - https://github.com/shogun-toolbox/shogun/issues/2880
@lambday	e.g. we have *io, *parallel, *version in SGObject as public members, and then we provide accessors - which is not really required I think (or maybe I am missing some point here)
@lambday	http://www.idinews.com/quasiClass.pdf
@lambday	lisitsyn: http://stackoverflow.com/questions/8447972/how-to-combine-auto-gettersetter-with-pimpl-design-pattern-in-a-public-api-inte#
@lambday	this is pretty much our Property<T> plan
 lisitsyn	hmm
 lisitsyn	lambday: I am not really getting the idea
 lisitsyn	how to reduce get/set
@lambday	lisitsyn: for certain things, yes we need those
 lisitsyn	lambday: we can probably use some kind of data-driven api
@lambday	lisitsyn: http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html this is a good article
@lambday	lisitsyn: in this article they show how to reduce these accessors
@lambday	tl;dr; accessors are not really OO.. so with some proper design, we can probably reduce the number of accessors...
 lisitsyn	glanced over it
 lisitsyn	can't see real solution ;)
 lisitsyn	yeah with smart design anything is doCoolThing();
 lisitsyn	lambday: probably we don't need Property
 lisitsyn	Property<T>
 lisitsyn	but Property
 lisitsyn	I mean we can hide its type
 lisitsyn	we can allow to put anything here
@lambday	yeah but while accessing how to recall that type?
 lisitsyn	lambday: well they are mostly convertible
 lisitsyn	I mean you just ask you need float
 lisitsyn	or vector
@lambday	lisitsyn: I'm lost
 lisitsyn	asFloat
 lisitsyn	asInt blabla
@lambday	so it's as<T>
 lisitsyn	yes
 lisitsyn	I mean you don't really retrieve values often
 lisitsyn	if you need its string representation it is easy
@lambday	not as a user, but within algorithm we do, right?
 lisitsyn	yeah within algorithm we can use something faster
@lambday	how? c++ doesn't have default :D can't restrict access within package
@lambday	friends
 lisitsyn	well we don't need to hide it
 lisitsyn	its just not the usual way :)
 lisitsyn	that's why I like tags
 lisitsyn	you can do it fast with tags
@lambday	tags are good until I do obj.get("width", Tag<float64_t>())
@lambday	or obj.get<float64_t>("width")
@lambday	both are bad
 lisitsyn	hmm not really
@lambday	:(
 lisitsyn	lets find some live editor
@lambday	cloud9
 lisitsyn	http://collabedit.com/22tjt
 lisitsyn	lambday: ^
 lisitsyn	lambday: so not that ugly?
@lambday	yep it looks better,
@lambday	if we can remove that self->shit thing then it will be better
@lambday	so maybe keep Tags in the main class
@lambday	and vars in the pimpl
@lambday	(or do tags contain the vars? )
 lisitsyn	I like self-> :D
 lisitsyn	it is pretty explicit to say where I get it
 lisitsyn	lambday: ok better? ;)
@lambday	lisitsyn: yep that's better
@lambday	so external classes would use as get(svm->max_iterations)
@lambday	looks fine
 lisitsyn	svm.get(svm.max_iterations)
 lisitsyn	lambday: ok that's the idea
@lambday	hmm
@lambday	lisitsyn: this looks fine
 lisitsyn	lambday: we need object in tag to remove the need of registering it manually
@lambday	lisitsyn: okay that makes sense
 lisitsyn	when you create tag you create it inside object so miss is not possible
 lisitsyn	like you have tag but forgot to tell its sgobject to use that tag
@lambday	alright this looks good
@lambday	lisitsyn: how does model selection work in this?
-!- PirosB3 [~pirosb3@host101-234-dynamic.247-95-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
 lisitsyn	lambday: should be easy
@lambday	lisitsyn: we should use another class for that
@lambday	instead of Tag, say ModelTag or so
 lisitsyn	why?
@lambday	lisitsyn: but you're not specifying on which params model selection can run
@lambday	we need the functionality as well
 lisitsyn	lambday: what about this?
@lambday	looks cool - but we need to specify that max_iteration has can be used for xval
@lambday	that's why I was saying that we need another Tag for those which supports that
@lambday	lisitsyn: I will brb in 10 mins..
* lambday afk
 lisitsyn	lambday: I explicitly told him to select max_iteration
 lisitsyn	unless I want to find best value I am quiet ;)
* lambday re
@lambday	lisitsyn: yeah but what stops me from using it on a variable, which shouldn't be optimized?
@lambday	lisitsyn: like as of now, we have this MS_AVAILABLE, MS_NOT_AVAILABLE thingi
 lisitsyn	lambday: hmmm why to do that?
@lambday	lisitsyn: also, wu needs different optimization for variational parameter
@lambday	lisitsyn: I mean, we need red errors when someone tries to use a param in MS that shouldn't be there
 lisitsyn	ok but no need for another type
 lisitsyn	should be other way
@lambday	make Tag<T,bool> :D
 lisitsyn	nah
 lisitsyn	bool always transforms to int/enum/blabla
@lambday	lisitsyn: we also need to have the scope for adding different policies for optimizing
@lambday	lisitsyn: https://github.com/shogun-toolbox/shogun/issues/2880
 lisitsyn	don't get it
@lambday	lisitsyn: variational parameters are optimized differently
@lambday	at least from what I understand
 lisitsyn	I am not sure I get the difference
 lisitsyn	from the api
@lambday	lisitsyn: yeah api-wise it will look similar
@lambday	lisitsyn: this also does that enable/disable thing wu was talking about
@lambday	since you're explicitly mentioning all the parameters and their range - rest are disabled
 lisitsyn	ye
@lambday	lisitsyn: alrighty - this looks cool
 lisitsyn	ok lets save it somewhere
@lambday	yeah
 lisitsyn	lambday: https://gist.github.com/lisitsyn/eeef976ba270da456e3f
@lambday	cool
@lambday	what else do we need for SGObject?
 lisitsyn	hmm not sure
@lambday	parameter map
@lambday	which is already there
@lambday	but see in SGObject normal parameters and model parameters are stored differently
@lambday	lisitsyn: why was the set_is_generic() was required? for serialization?
 lisitsyn	no idea
-!- lambday [c40f1069@gateway/web/freenode/ip.196.15.16.105] has quit [Quit: Page closed]
@wiking	asdf!
@wiking	fuck system tap and ubuntu
-!- PirosB3 [~pirosb3@host101-234-dynamic.247-95-r.retail.telecomitalia.it] has joined #shogun
-!- lambday [6a3386ac@gateway/web/freenode/ip.106.51.134.172] has joined #shogun
-!- mode/#shogun [+o lambday] by ChanServ
-!- PirosB3 [~pirosb3@host101-234-dynamic.247-95-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
@besser82	lisitsyn, yo?
@besser82	https://github.com/shogun-toolbox/shogun/pull/2899
@besser82	Any objections to get that merge'ed?#
 lisitsyn	besser82: no if it doesn't break
@besser82	tests are fine
@besser82	might introduce API-changes...
@besser82	like renaming all `initialize`-funcs
@besser82	but will fix issue #2766  ;)
@besser82	so I'll get it done ^_^
@besser82	lisitsyn, ^
 lisitsyn	yeah ok then
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Elijah Rippeth :develop * e10b026 / src/shogun/ (31 files): https://github.com/shogun-toolbox/shogun/commit/e10b026756db0257863054bb77f00130034cd693
 shogun-notifier-	shogun: Fix #2766. Change 'initialize' to a more meaningful method name.
 shogun-notifier-	shogun: Elijah Rippeth :develop * 97b201f / / (10 files): https://github.com/shogun-toolbox/shogun/commit/97b201f2b0533e93f711aa08a9f31d52db6bdcd2
 shogun-notifier-	shogun: Fix examples.
 shogun-notifier-	shogun: Elijah Rippeth :develop * c0b2aa1 / / (8 files): https://github.com/shogun-toolbox/shogun/commit/c0b2aa15e82c277cd048194fa7a4760538105127
 shogun-notifier-	shogun: Fix more tests and examples.
 shogun-notifier-	shogun: Bj?rn Esser :develop * 432a191 / / (47 files): https://github.com/shogun-toolbox/shogun/commit/432a191f3d46c3af3fde28247e8dcf19b3676e4b
 shogun-notifier-	shogun: Merge pull request #2899 from erip/fix_2766
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Fix issue 2766. Changed all 'initialize' methods names
-!- travis-ci [~travis-ci@ec2-54-81-159-216.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Bj?rn Esser's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/77200128
-!- travis-ci [~travis-ci@ec2-54-81-159-216.compute-1.amazonaws.com] has left #shogun []
 shogun-buildbot	build #1067 of FCRH - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/FCRH%20-%20libshogun/builds/1067  blamelist: Elijah Rippeth <elijah.rippeth@gmail.com>, Bj?rn Esser <bjoern.esser@gmail.com>
 shogun-buildbot	build #52 of FC22 - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/FC22%20-%20libshogun/builds/52  blamelist: Elijah Rippeth <elijah.rippeth@gmail.com>, Bj?rn Esser <bjoern.esser@gmail.com>
-!- lambday [6a3386ac@gateway/web/freenode/ip.106.51.134.172] has quit [Ping timeout: 246 seconds]
 shogun-buildbot	build #2690 of deb3 - modular_interfaces is complete: Failure [failed csharp modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb3%20-%20modular_interfaces/builds/2690  blamelist: Elijah Rippeth <elijah.rippeth@gmail.com>, Bj?rn Esser <bjoern.esser@gmail.com>
 shogun-buildbot	build #672 of deb4 - python3 is complete: Failure [failed test python modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb4%20-%20python3/builds/672  blamelist: Elijah Rippeth <elijah.rippeth@gmail.com>, Bj?rn Esser <bjoern.esser@gmail.com>
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
--- Log closed Wed Aug 26 00:00:52 2015
