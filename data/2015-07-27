--- Log opened Mon Jul 27 00:00:10 2015
-!- shaochuan [~shaochuan@c-50-184-81-180.hsd1.ca.comcast.net] has joined #shogun
-!- shaochuan [~shaochuan@c-50-184-81-180.hsd1.ca.comcast.net] has quit [Ping timeout: 252 seconds]
-!- HeikoS [~heiko@90.195.245.132] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@90.195.245.132] has quit [Quit: Leaving.]
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
-!- shaochuan [~shaochuan@2601:647:4600:fac5:e97f:35a0:bfa0:fc28] has joined #shogun
-!- shaochuan [~shaochuan@2601:647:4600:fac5:e97f:35a0:bfa0:fc28] has quit [Ping timeout: 246 seconds]
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has joined #shogun
-!- shaochuan [~shaochuan@c-50-184-81-180.hsd1.ca.comcast.net] has joined #shogun
-!- shaochuan [~shaochuan@c-50-184-81-180.hsd1.ca.comcast.net] has quit [Ping timeout: 264 seconds]
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
-!- HeikoS [~heiko@90.195.245.132] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- ajph [~ajph@unaffiliated/ajph] has left #shogun ["Textual IRC Client: www.textualapp.com"]
 lisitsyn	HeikoS: hey
 lisitsyn	stammtisch today rye?
-!- HeikoS [~heiko@90.195.245.132] has quit [Quit: Leaving.]
-!- shaochuan [~shaochuan@2601:647:4600:fac5:e97f:35a0:bfa0:fc28] has joined #shogun
-!- shaochuan [~shaochuan@2601:647:4600:fac5:e97f:35a0:bfa0:fc28] has quit [Ping timeout: 244 seconds]
-!- xwize [892c01ae@gateway/web/freenode/ip.137.44.1.174] has joined #shogun
 xwize	why do I need svn to cmake this!?!?!? ngraargh
@wiking	?
@wiking	u dont need svn at all to cmake anything :)
 xwize	I'm on windows and I need to build an x64 version, I've never used this before, I tried cmake . and after a while it complains about svn checkout of MSIntTypes
@wiking	aaaah
@wiking	noo
@wiking	atm shogun will not compile on windows natively
 xwize	X_x
@wiking	u r better of compiling that on linux
 xwize	but I'm doing all my dev on windows, which is my native OS, and I can't virtualise because I'm using the GPU and I need full performance
@wiking	mmm sorry then :(
@wiking	that svn stuff was a first attmept to get shogun compiled with visual studio... but it's not even near to be done
 xwize	darn
 xwize	I was looking forward to using this! I guess I should find something else
@wiking	yeah or help in porting it to windows :)
 xwize	sorry, I'd like to help but I'm sort of in a hurry and my own project is giving me grey hairs
@wiking	yeah sorry again windows natively isn't supported atm
-!- HeikoS [~heiko@dab-yat1-h-1-2.dab.02.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS1 [~heiko@217.138.5.14] has joined #shogun
-!- HeikoS [~heiko@dab-yat1-h-1-2.dab.02.net] has quit [Ping timeout: 244 seconds]
-!- xwize [892c01ae@gateway/web/freenode/ip.137.44.1.174] has quit [Quit: Page closed]
-!- HeikoS1 [~heiko@217.138.5.14] has quit [Quit: Leaving.]
-!- HeikoS [~heiko@217.138.5.14] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@217.138.5.14] has quit [Ping timeout: 265 seconds]
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has joined #shogun
-!- HeikoS [~heiko@nat-187-200.internal.eduroam.ucl.ac.uk] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Sergey Lisitsyn :develop * f00e611 / CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/f00e611c1d831e384235238f75db4cea64885b43
 shogun-notifier-	shogun: Remove inline-functions option
 shogun-notifier-	shogun: Sergey Lisitsyn :develop * 5bd5d07 / CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/5bd5d07fb4e14582da91b71608a73a35c9957bb9
 shogun-notifier-	shogun: Merge pull request #2868 from lisitsyn/bugfix/yosemite_clang
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Remove inline-functions option
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
 lisitsyn	HeikoS: hey
@HeikoS	lisitsyn: hey there
 lisitsyn	HeikoS: I glanced over optimizers PRs
 lisitsyn	I have no idea :D
 lisitsyn	I have a feeling it has too much pointer juggling
 lisitsyn	and code could be reduced
@HeikoS	yeah
@HeikoS	lisitsyn: I was asking you because you have a good idea of how to build elegant c++ code
@HeikoS	what wu is doing is a bit crazy
@HeikoS	like 5 new classes
@HeikoS	for things like cost functions
@HeikoS	etc
 lisitsyn	HeikoS: ok we need faster chat because I constantly forget commenting PRs
 lisitsyn	HeikoS: one approach I find quite good is
 lisitsyn	to write test/example first
 lisitsyn	and then write the api to satisfy it
 lisitsyn	we need a few use cases
 lisitsyn	say
 lisitsyn	we have a function blabla, want to minimize it
@HeikoS	I see
 lisitsyn	I think this could be better
@HeikoS	The thing is that Wu wants things to be modular
@HeikoS	and I agree on that
@HeikoS	so his approach is just taking the OOP way
@HeikoS	but all these objects onherit from CSGobject
@HeikoS	so we get like 800 lines of code per class
 lisitsyn	OOP is not the best way you know
@HeikoS	yes
 lisitsyn	sometimes we just need a function
@HeikoS	exactly
@HeikoS	this is what I had in mind
 lisitsyn	there is no need for interface of the function we minimize
@HeikoS	yep
 lisitsyn	and
 lisitsyn	actually
@HeikoS	could you saw a few things on this in the PR?
 lisitsyn	HeikoS: yeah but I am not sure how should we turn wu into the right way
 lisitsyn	I mean we risk to overcriticize :)
 lisitsyn	HeikoS: do you have good understanding what's the goal?
@HeikoS	yes
@HeikoS	GPs have different objective functions
@HeikoS	and there are different way to optimise
@HeikoS	so he wants to do that from a base class
@HeikoS	but I feel that function pointers should do things here
@HeikoS	lisitsyn: he can take critic
@HeikoS	lisitsyn: the thing is I cannot merge these giant PRs
@HeikoS	I have no idea
 lisitsyn	I have a suggestion
 lisitsyn	to not use shogun things for this optimizers
 lisitsyn	at all
 lisitsyn	I mean use simple (maybe even C) api
 lisitsyn	what do you think?
-!- travis-ci [~travis-ci@ec2-54-163-170-244.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Sergey Lisitsyn's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/72853431
-!- travis-ci [~travis-ci@ec2-54-163-170-244.compute-1.amazonaws.com] has left #shogun []
 lisitsyn	I fell in love with C api
 lisitsyn	it is much cleaner just always :D
 lisitsyn	I would even write tapkee in C today
@HeikoS	maybe
 shogun-buildbot	build #30 of FC22 - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/FC22%20-%20libshogun/builds/30  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
@HeikoS	lisitsyn: depends on the details
@HeikoS	lisitsyn: could you have a look in the PR?
 shogun-buildbot	build #1045 of FCRH - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/FCRH%20-%20libshogun/builds/1045  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
@HeikoS	I also feel Wu should probably draw a class diagram to discuss things
 lisitsyn	ok let me comment
 shogun-buildbot	build #2710 of bsd1 - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/bsd1%20-%20libshogun/builds/2710  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
 shogun-buildbot	build #2667 of deb3 - modular_interfaces is complete: Failure [failed csharp modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb3%20-%20modular_interfaces/builds/2667  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
 lisitsyn	HeikoS: ok commented
 shogun-buildbot	build #653 of deb4 - python3 is complete: Failure [failed test python modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb4%20-%20python3/builds/653  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
@wiking	boooo
@wiking	fuck i wont be able to be awake again for stammtisch
 lisitsyn	wiking: ae
@wiking	ye
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has joined #shogun
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has quit [Client Quit]
-!- yorkerlin [b8af2f1e@gateway/web/freenode/ip.184.175.47.30] has joined #shogun
 yorkerlin	hi
 yorkerlin	lisitsyn, please take a look at the comments I wrote at https://github.com/shogun-toolbox/shogun/pull/2876
 lisitsyn	yorkerlin: hey
 lisitsyn	sure
 lisitsyn	yorkerlin: ok I have a suggestion how can we simplify design
 yorkerlin	ok
 lisitsyn	what if we write the code that uses that 'library'
 lisitsyn	not-yet-existing
 lisitsyn	I mean how do you see it being used
 yorkerlin	I think it is a tool for ML developers
 lisitsyn	do you see it as a standalone thing?
 yorkerlin	what do you mean standalone thing?
 lisitsyn	I mean if you write that thing so it can be compiled without shogun
 lisitsyn	it could be better
 lisitsyn	people could take it and use
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has joined #shogun
 lisitsyn	and you don't have to bother with our interface oriented things like our own map and sgvector
 yorkerlin	ic, should I use std lib for vector?
 yorkerlin	std::vector?
 lisitsyn	yorkerlin: no I mean you would be free to use whatever you want to
 yorkerlin	yes. if we do not use sgvector, the framework can be complied without shogun
 yorkerlin	and cmap
 lisitsyn	yorkerlin: there is also a cool technique to write C++ code under C api
 lisitsyn	it speeds up compilation and make it usable from say python
 lisitsyn	I don't suggest just telling you variants
 yorkerlin	any reference
 lisitsyn	ok let me find
 yorkerlin	lisitsyn, did see the comments about learning rate and descenupdater? (function pointers seem to be not enough)
 lisitsyn	yorkerlin: hmm didn't find it yet, ok let me send you one thing
 yorkerlin	ok
 lisitsyn	yorkerlin: do you feel like glancing over a book?
 yorkerlin	yes
 lisitsyn	I have been reading a cool book on C++ API
 lisitsyn	just a sec
 yorkerlin	API Design for C++?
 lisitsyn	yap
 lisitsyn	yeap*
 yorkerlin	ok, I have a copy of the book.
 lisitsyn	ah
 lisitsyn	ok :)
 lisitsyn	ok lets get back to this thing then
 yorkerlin	ok
 lisitsyn	I have got another idea meanwhile
 yorkerlin	:)
 lisitsyn	I have seen some pretty design here at my job
 lisitsyn	:)
 lisitsyn	so if we have some optimizer
 lisitsyn	it could be good idea to split mutable and immutable parts
 yorkerlin	hmm, good suggestion
 lisitsyn	yorkerlin: so you could create some class that contains all state of optimizer
 lisitsyn	current pointer, gradient
 lisitsyn	err sorry
 lisitsyn	pointer=point :)
 yorkerlin	state, u mean the mutable part?
 lisitsyn	yes
 lisitsyn	basically anything you need to stop and resume
 lisitsyn	so that other parts are just a matter of configuration
 yorkerlin	yes. one issue is learning rate, gradient update, penalty have many choices.
 lisitsyn	ok as I can see
 lisitsyn	LR, gradient, penalty just modify this mutable state
 yorkerlin	yes
 lisitsyn	so we can just make them a functions over mutable state
 lisitsyn	a set of functions
 lisitsyn	it would be less clutter I think
 lisitsyn	interfaces are ok but they bloat code a bit
 lisitsyn	in java they are the only way
 lisitsyn	but here we can make it shorter
 yorkerlin	so these set of functions should share the same function definition, right?
 lisitsyn	yeah
 yorkerlin	for example void fun1(int a,int b), void fun2(int a, int b)
 lisitsyn	just a sec
 lisitsyn	hmm I am not sure now
 lisitsyn	probably functions are not that good because we can mix them up
 yorkerlin	let me give an example
 yorkerlin	for inverse scaling learn rate, learning_rate = eta0 / pow(t, power_t), where t is the times we call get_learning_rate(...), eta0 and power_t must be given by users or default value.
 yorkerlin	for const learning rate, learning_rate=const_learning_rate, const_learning_rate is given by users or default value
 lisitsyn	https://gist.github.com/lisitsyn/32bb2a13aacd9cbf9b1b
 lisitsyn	yorkerlin: something like that?
 yorkerlin	ok. I am look at it
 lisitsyn	yorkerlin: I mean optimizer would be pretty generic
 yorkerlin	yes
 lisitsyn	I'll be around later, like in a hour
 yorkerlin	ic.
 lisitsyn	going home :)
 yorkerlin	ok see then
 lisitsyn	see you a bit later
-!- shaochuan [~shaochuan@2601:647:4600:fac5:e97f:35a0:bfa0:fc28] has joined #shogun
-!- shaochuan [~shaochuan@2601:647:4600:fac5:e97f:35a0:bfa0:fc28] has quit [Ping timeout: 246 seconds]
@HeikoS	yorkerlin: hi!
 yorkerlin	hi
@HeikoS	yorkerlin: good to catch you, how are things?
 yorkerlin	good. lisitsyn suggested another way to implement the framework.
@HeikoS	yorkerlin: just reading through the logs
@HeikoS	yorkerlin: do you see why I am a bit concerned about the current structure?
 yorkerlin	because of  CSGObject ?
@HeikoS	yorkerlin: yeah thats one thing
@HeikoS	yorkerlin: whenever we add a new class that inherits from CSGObject, we get a few hundred lines of code to compile
 yorkerlin	ic
@HeikoS	yorkerlin: and all the overhead from the base class that we dont need
@HeikoS	yorkerlin: only objects that are directly exposed via the interfaces should inherit from this class
 yorkerlin	one issue is how to deal with serialization
@HeikoS	yorkerlin: the other thing is the sheer number of classes. The OOP approach here is a bit convoluted in my eyes
 yorkerlin	if we do not use CSGObject as the base class
@HeikoS	yorkerlin: how do you mean?
@HeikoS	yorkerlin: can use CSGObject for the main class, and make it have pointers to the data where needed.
@HeikoS	yorkerlin: but things like cost functions do not need to be serialised, or?
 yorkerlin	I am not sure how the  serialization work in shogun. I think CSGObject take care of the serialization work.
@HeikoS	yorkerlin: yes thats what it does
 yorkerlin	that is why I use the CSGObject as the base class
@HeikoS	yorkerlin: btw I agree that it is bad to have global variables
@HeikoS	yorkerlin: just want to avoid the number of classes exploding
 yorkerlin	I think lisitsyn suggested another way https://gist.github.com/lisitsyn/32bb2a13aacd9cbf9b1b/revisions
@HeikoS	yorkerlin: yeah this seems cleaner, question is: would it work here?
@HeikoS	It seems like this would allow to flatten out the code a bit
 yorkerlin	yes. I think so. however, there will be many classes (eg, l2penlaty, const_learning_rate, gradient_updater)
 yorkerlin	if we want to combine them
@HeikoS	yorkerlin: if they are not extending CSGObject, all this is fine
@HeikoS	yorkerlin: they are only used internally right?
 yorkerlin	yes
@HeikoS	not from say Python
@HeikoS	its just for the GP code developers
 yorkerlin	in fact we can do this http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html
 yorkerlin	not just for gp
@HeikoS	yorkerlin: agreed!
@HeikoS	on my todo list for long time ;)
@HeikoS	yorkerlin: so but back to the classes
 yorkerlin	ok
@HeikoS	if you need a state, you can just define a simple class
@HeikoS	no difference to c-structs in fact, these things almost look the same in memory
@HeikoS	aprt from v-tables if you have purely virtual methods
@HeikoS	so you can do these things as long as they are not exposed via serialisation or Python/SWIG
 yorkerlin	about the serialization thing. maybe we can document how the serialization works
@HeikoS	and you can use constructors and init methods of the CSGObject-based classes to set up the right combination of loss, etc
@HeikoS	yorkerlin: sure
@HeikoS	yorkerlin: Though I have the intention to drop this anyways
@HeikoS	yorkerlin: but: it works like this:
@HeikoS	yorkerlin: CSGObject has two methods for this: save_serializable, and load_serializable
@HeikoS	All parameters that were added by SG_ADD macro are serilaised
@HeikoS	easy as that
@HeikoS	thats why you have to register parameters
@HeikoS	they methods themselves look horrible and contain a lot of code
@HeikoS	that is why adding a new CSGObject class to Shogun increases compile time quite abit
 yorkerlin	so if we do not use CSGObject as base class, when dserializable, we need to new the instance. right?
 yorkerlin	deserializable
@HeikoS	yorkerlin: how do you mean?
 yorkerlin	how does the deSerialization work
@HeikoS	we can only de-serialise CSGObject files
@HeikoS	the way it works is:
@HeikoS	empty instance is created (init method is called, so class knows all the pointers)
@HeikoS	and load_serializable allocates and populates the memory of its parameters
@HeikoS	yorkerlin: it is pretty horrible to be honest. I am for dropping serialisation
 yorkerlin	let me give an example for inverse scaling learn rate, learning_rate = eta0 / pow(t, power_t), where t is the times we call get_learning_rate(...), eta0 and power_t must be given by users or default value.
@HeikoS	yorkerlin: in my MCMC code (python) learning rates are functions of t
@HeikoS	yorkerlin: and the main class calls them with increasing values of t
 yorkerlin	however, there are many learning rate methods.
@HeikoS	but I see, you mean there are paramters given by users
 yorkerlin	const learning rate, line search methods,
 yorkerlin	inverse scaling learning rate
@HeikoS	and they all have different parameters, so we cannot just use an enum
@HeikoS	because then the main class would have to store all parameters
@HeikoS	I see
 yorkerlin	the problem is if a new learning rate method is added, we may need to modify the main class :(
@HeikoS	yorkerlin: agreed that is not good
@HeikoS	yorkerlin: but CSGObject as base class is neither a good idea
@HeikoS	yorkerlin: will users change the type of learning rate?
@HeikoS	yorkerlin: how many learning rates will there be?
@HeikoS	yorkerlin: in many places in Shogun, such situations are solved via an enum and a switch in the main class
 yorkerlin	users (I mean, developer) have to init a learning rate instance
@HeikoS	see QuadraticTimeMMD
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
 yorkerlin	the issue is learning rate may contain mutable variables.
@HeikoS	I see
 yorkerlin	if we dp serialization and do deserialization
@HeikoS	yorkerlin: question is: how many learning rates will there be?
@HeikoS	yorkerlin: and do they have different numbers of parameters?
@HeikoS	if there are just 3-4, and then it is unlikely to add another one, these can go into the main class
@HeikoS	yorkerlin: its not like a kernel, where there are hundreds of possibilities
 yorkerlin	if we do not add linear search methods (for batch minimizers), there are 4 learning rate methods
@HeikoS	how many parameters do they have?
@HeikoS	how many more could there be?
 yorkerlin	if we add line search methods,
 yorkerlin	at least 3 more methods
@HeikoS	yorkerlin: but all of them are one-liners as functions, not?
@HeikoS	yorkerlin: what are the mutable parts of the learning rate?
@HeikoS	iteration number is not really part of learning rate for example
 yorkerlin	 for inverse scaling learn rate, learning_rate = eta0 / pow(t, power_t),
 yorkerlin	r
 yorkerlin	t is the mutable
 yorkerlin	variable
 yorkerlin	eta0, power_t are also mutable I think
@HeikoS	but can't t be provided by the caller?
 yorkerlin	you need store t in the caller
@HeikoS	t is a parameter to any learning rate, isnt it?
@HeikoS	so then why not a static function where the eta0 and the power_t parameters are fixed?
@HeikoS	like
@HeikoS	lambda t: eta0/t**power_t
@HeikoS	and eta0 was defined before
@HeikoS	curried
 yorkerlin	for SGD, it is possible. for GD, I am not sure yet
@HeikoS	yorkerlin: what would be a problem there?
 yorkerlin	In line search methods for GD or batch minimizer, we may need to try guess the learning rate
 yorkerlin	using https://en.wikipedia.org/wiki/Wolfe_conditions
@HeikoS	yorkerlin: where would that guessing happen and based on which information?
 yorkerlin	gradient and variable from the cost function
@HeikoS	but thats part of another class then
@HeikoS	not part of the learning rate, so needs to be passed
 yorkerlin	yes
@HeikoS	yorkerlin: but then again, one can go back to a static function as all information is passed by the caller
@HeikoS	and the caller needs to know the parameters of the learning rate anyways (otherwise he cannot modify)
 yorkerlin	yes. again, if a new method is proposed, the static function  may be changed.
@HeikoS	so that breaks the modular structure anyways as two leaf classes need to know each others instance, no?
 yorkerlin	if we are ok fine with that
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
@HeikoS	yorkerlin: my optinion is that this doesnt happen often, so I would go with that.
@HeikoS	yorkerlin: but:
@HeikoS	it's your code, I just wanted to have a discussion on this
@HeikoS	lisitsyn should also give his opinion here
@HeikoS	just to make sure these things are consciously decided
 yorkerlin	another thing is momentum update
@HeikoS	yorkerlin: details?
 yorkerlin	for momentum update, we need to store a corrected_gradient. for plain update, we do not need to store  the correct_gradient
 yorkerlin	if we go futher using inexact Hessian information, we may need to store the information
 yorkerlin	I mean the caller cannot store all these information
@HeikoS	yorkerlin: if the learning rate class were to store that, where would it get it from?
 yorkerlin	gradientupater should store the needed information
 yorkerlin	oh, momentum update is not learning rate
@HeikoS	yorkerlin: I am confused
 yorkerlin	I agree with you that learning rate can be use some static functions
@HeikoS	yorkerlin: btw: do you have an idea how other strongly typed optimisation toolboxes solve these issues?
 yorkerlin	let me find some
@HeikoS	yorkerlin: just asking, since I don't
@HeikoS	the gradient information in the momentum are only helper variables right?
@HeikoS	I mean they do not need to be visible to the outside
@HeikoS	and they do not need to be serialised
@HeikoS	so I guess we could just use classes that dont inherit from CSGObject
 yorkerlin	however, the gradient information in the momentum is mutable
@HeikoS	yorkerlin: sure, but that is only read/written during the algorithm
@HeikoS	so no serialisation happening then, right?
@HeikoS	yorkerlin: I gotta go now, good talking to you
 yorkerlin	for increamental inference, may be not
 yorkerlin	ok
@HeikoS	yorkerlin: maybe have another chat with sergey
@HeikoS	and lambday
 yorkerlin	ok
@HeikoS	he is really good in these things
@HeikoS	maybe send him an email, he might not have seen the discussion in the PR
@HeikoS	yorkerlin: Im back tomorrow, we could chat then again
 yorkerlin	the issue all come form "serilization and then  deserilization"
 yorkerlin	ok
@HeikoS	yorkerlin: keep in mind we might drop it
@HeikoS	yorkerlin: but yeah you are right
@HeikoS	yorkerlin: lets just avoid to inherit from CSGObject if possible. Only the main interfaced classes need to
@HeikoS	yorkerlin: take care, bye
 yorkerlin	ok
 yorkerlin	8
 yorkerlin	for incremental inferce, we first do minimizer for existing data.we  then do serilization. in some point, we do  deserilization and do incremtnal update.
 yorkerlin	we want the mutable variables when we do the incremental update.
 yorkerlin	we may called warm_start  at http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html
-!- HeikoS [~heiko@nat-187-200.internal.eduroam.ucl.ac.uk] has quit [Ping timeout: 244 seconds]
 yorkerlin	hi, I leave now. will send email to your guys
-!- yorkerlin [b8af2f1e@gateway/web/freenode/ip.184.175.47.30] has quit [Quit: Page closed]
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has joined #shogun
-!- PirosB3 [~pirosb3@host116-44-dynamic.55-82-r.retail.telecomitalia.it] has quit [Client Quit]
-!- thoralf [~thoralf@ip5b4223a1.dynamic.kabel-deutschland.de] has joined #shogun
-!- mode/#shogun [+o thoralf] by ChanServ
@thoralf	Hey!
 lisitsyn	hey
-!- thoralf [~thoralf@ip5b4223a1.dynamic.kabel-deutschland.de] has quit [Quit: Konversation terminated!]
--- Log closed Tue Jul 28 00:00:11 2015
