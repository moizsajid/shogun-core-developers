--- Log opened Sun Dec 29 00:00:27 2013
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
 lisitsyn	HeikoS: hey there
@HeikoS	lisitsyn:  hi!
 lisitsyn	HeikoS: how are you? having holidays?
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Saurabh7 :develop * cdc5a1b / examples/undocumented/libshogun/evaluation_cross_validation_knn.cpp: https://github.com/shogun-toolbox/shogun/commit/cdc5a1b23ca0302e74960afc50c97c2f1aea65a7
 shogun-notifier-	shogun: knn example
 shogun-notifier-	shogun: Heiko Strathmann :develop * 7d2ad10 / examples/undocumented/libshogun/evaluation_cross_validation_knn.cpp: https://github.com/shogun-toolbox/shogun/commit/7d2ad10b8228eff00a4d966a978f7974df9006ab
 shogun-notifier-	shogun: Merge pull request #1797 from Saurabh7/xvalexamples
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: knn example
@HeikoS	lisitsyn: yeah more or less
@HeikoS	lisitsyn: not really, exams soon
 lisitsyn	uh
@HeikoS	but taking it relaxed
@HeikoS	working less than I should, getting stressed more than I should ;)
@HeikoS	lisitsyn: how about yourself?
@sonney2k	HeikoS, have you seen we have Chiyuan's notebooks now
@HeikoS	sonney2k: hi! yes I saw that
@HeikoS	sonney2k: I also pushed one half-finished on X-validation
@sonney2k	nice
@HeikoS	sonney2k: pretty nice the multiclass ones
@HeikoS	sonney2k: just reading besser82 's proposal
 lisitsyn	HeikoS: finishing stuff :)
@sonney2k	HeikoS, I wanted to do some evaluation notebook soon
@sonney2k	like ROC/ PRC and all the measures
@HeikoS	sonney2k: yeah nice
@HeikoS	sonney2k: there is some of this in the x-validation notebook
@sonney2k	yeah just seen
@sonney2k	but not really overlapping
@HeikoS	I agree
@HeikoS	its good to have another one
@sonney2k	HeikoS, we should maybe email all ex-gsoc / contributors asking if they can do a notebook for their work
@sonney2k	like lisitsyn :P
@HeikoS	sonney2k: haha ;)
@HeikoS	yeah lisitsyn should totally do one
@sonney2k	otherwise work is pretty lost
 lisitsyn	yeah I will
@sonney2k	just too deep hidden inside shogun
@HeikoS	sonney2k: I know, but we have already quite a few
 lisitsyn	we just have to believe and I'll do that
 lisitsyn	:D
@HeikoS	sonney2k: could also work on making things easier accessible ;)
@sonney2k	HeikoS, ?
@HeikoS	sonney2k: like a feature/example list that shows very clearly what is where ... but that is not really concrete thoughts
@HeikoS	sonney2k: did you end up pushing the release more?
@sonney2k	seems like besser82 won't finish his cmake stuff so I guess we can release 3.1
@sonney2k	well it is in OK state
@sonney2k	we could release any time that means
@sonney2k	well news needs an update and we have to think were we announce it
@sonney2k	but good enough for sure
@sonney2k	HeikoS, what I have in mind with notebooks is that we at some point put in the table of contents that you had in the original tutorial
@sonney2k	so it will kind of become a book
@sonney2k	no idea if you have seen stuff like machine learning for hackers etc
@sonney2k	I am just sure we can do better by doing it this way
@HeikoS	sonney2k: I agree!
@HeikoS	sonney2k: cool about the release
@sonney2k	HeikoS, about the plugin stuff
@sonney2k	it is still not thought through
@HeikoS	sonney2k: yeah notebooks can be presented in a better way, more centralised somehow, but for now the current way is also fine. I think this will become obsolete thouigh when the number is growing
@HeikoS	sonney2k: yeah, just sent a mail, this needs ultra careful planning
@sonney2k	but yes it would be nice if it would work
@HeikoS	and breath
@sonney2k	yeah just read it
@HeikoS	and maybe a gsoc student
@sonney2k	no
@sonney2k	gsoc student won't be enough for that
@HeikoS	sonney2k: do you think thats too boring?
@HeikoS	sonney2k: more as a helping hand
@sonney2k	no no
@HeikoS	(embedded into a project)
@sonney2k	it could just be some proof of concept
@HeikoS	sonney2k: btw I got my new Thinkpad t440s
@HeikoS	thats quite nice
@HeikoS	sonney2k: what are you thoughts in the licensing btw?
@sonney2k	HeikoS, very difficult
@sonney2k	one thing is pretty clear to me
@sonney2k	if we change (are allowed to / manage)
@sonney2k	we should change to BSD / MIT
@HeikoS	sonney2k: question is if it is worth it
@HeikoS	sonney2k: yeah I agree
@sonney2k	LGPL is no different to GPL for companies
@sonney2k	but I don't know if it is worth it
@HeikoS	I think so
@sonney2k	and even possible
@sonney2k	I mean there is a reason I never wrote (C) Soeren Sonnenburg
@HeikoS	sonney2k: I think this would be a longer term project
@sonney2k	all my work was owned by Fraunhofer
@HeikoS	ah
@HeikoS	sonney2k: I think we should have  alist of such things that might cause problems with that
@HeikoS	and then maybe write all authors we can identify, and then see
@HeikoS	first get some better feeling for feasibility and then decide
@sonney2k	and the only reason so far to attempt that would be if libshogun would become kind of the c/c++ backend of scikits-learn
@sonney2k	or so
@HeikoS	sonney2k: maybe
@HeikoS	sonney2k: I am thinking more of talking to companies to get them interested in the project
@HeikoS	and to avoid this "no gpl" barrier that many people have (which is wring I think, but thats how it is)
@HeikoS	sonney2k: man you should have been at the mloss workshop, quite strong feelings against GPL by many people
@sonney2k	yeah companies... I personally don't really want M$ / apple to just use shogun
@sonney2k	I mean embedded
@sonney2k	they can train their stuff sure
@sonney2k	but not inside the M$ 'some big-data product name'
@sonney2k	HeikoS, no idea if an evaluation BSD module or so would help companies
@sonney2k	this IMHO would be something we could do
@HeikoS	sonney2k: I think any usage would be good for us
@HeikoS	sonney2k: but yeah evaluation module is also an idea
 lisitsyn	I find it very optimistic to expect big companies use shogun ;)
@sonney2k	HeikoS, well GPL doesn't restrict any usage except for embedding in a product to be sold right?
@HeikoS	sonney2k: if shogun would be used in such a context, it might benefit us since getting feedback, or even some kind of support. If not thats also fine, since currently we dont get this.
@sonney2k	lisitsyn, haha
@HeikoS	sonney2k: I know, but you know that people sometimes think different
@sonney2k	lisitsyn, you are living under a rock then
@HeikoS	and try to avoid any GPL stuff
 lisitsyn	sonney2k: I just never had any proofs ;)
@sonney2k	lisitsyn, there is a reason why shogun-toolbox.org gets more hits mon-fri's
@sonney2k	HeikoS, yes true some companies do that
 lisitsyn	is that the fact supporting your hypothesis?
 lisitsyn	;)
@sonney2k	lisitsyn, no - but people telling me / companies asking
 lisitsyn	that sounds better
@HeikoS	sonney2k: my point is more to make usage as easy as possible, to allow for more interaction with whomever
@sonney2k	but I certainly for any basic stuff people use sckits-learn
@sonney2k	HeikoS, yes sure I get that
 lisitsyn	recently I had to show some basic classification
 lisitsyn	it took 4 lines in scikits
 lisitsyn	with hashing vectorizer and svm
 lisitsyn	if we are not down to just a few lines for such tasks we lose
@sonney2k	no idea what hashing vectorizer is
@sonney2k	but shogun syntax is as compact
@HeikoS	lisitsyn, sonney2k what do you think about joining forces with scikit a bit? I talked to a few of them and there was the idea to have a joint code sprint for example
@HeikoS	lisitsyn: yeah we should not be afraid of them
@sonney2k	HeikoS, that would only work if licenses were compatible
 lisitsyn	HeikoS: I don't know how can we join together
@HeikoS	sonney2k: yep
@HeikoS	lisitsyn: maybe not code but talking
@sonney2k	HeikoS, that is why I said above the only incentive I see is being their backend
 lisitsyn	I see
@HeikoS	you know, how do you solve XYZ ?
 lisitsyn	they don't need backend I think
@HeikoS	sonney2k: I dont believe that this will happen, but might be an idea
@HeikoS	sonney2k: like have a shogun wrapper in scikit
 lisitsyn	I think scikits should be the backend of shogun
@HeikoS	or so ...
 lisitsyn	:D
 lisitsyn	I will continue pushing the idea of some kind of integration platform
@sonney2k	HeikoS, yeah but just relicensing for some potential companies that want to sell big data analysis toolkits as closed source software?
@sonney2k	not really worth the effort IMHO
@HeikoS	sonney2k: happened to ipython and now they got a massive dontation from MS
@HeikoS	donation
 lisitsyn	our pov differs here
@HeikoS	plus lots of code given back
 lisitsyn	I guess me and HeikoS on the same side with 'more usage is better'
@HeikoS	exactly, I dont like that happening without getting anything back too
@HeikoS	but I think that there always comes something back
@HeikoS	also would be cool for us to know that people use it
 lisitsyn	you don't get back if you require it
@HeikoS	more users attract more users
@sonney2k	I don't like writing code that M$ or other companies can just 'steal'
 lisitsyn	it makes more sense to have a few badges 'used by X'
 lisitsyn	than to have nothing and be proud of freedom ;)
@sonney2k	depends on what you want to do right?
@HeikoS	sonney2k: totally, thats why we are discussing this right?
@sonney2k	I wrote the algorithms I and later others needed
@HeikoS	but its certainly not top priority
 lisitsyn	well I speak for my code but I'd be happy if anyone used it
@HeikoS	I would rather do this slowly in the background step by step
 lisitsyn	I see no difference between getting no money because of no usage and getting no money because of 'stealing'
@sonney2k	lisitsyn, what would we do with money and shogun?
@HeikoS	its not really about money, more about feedback
 lisitsyn	sonney2k: nothing I just don't know what is expected outcome of using software in companies
 lisitsyn	if you restrict them so much they avoid using it you get no feedback
 lisitsyn	liblinear is in any iphone
 lisitsyn	I see that kind of success
@sonney2k	lisitsyn, well any sane person would use shogun if you not on a anti GPL trip
@sonney2k	lisitsyn, and if $COMPANY uses this for whatever *I* would want it to use it under the GPL terms
 lisitsyn	sonney2k: yeah I get you want to keep gpl here :)
@sonney2k	lisitsyn, I don't see any benefit of converting to BSD so far
@sonney2k	lisitsyn, liblinear is just a tiny algorithm
 lisitsyn	sonney2k: I can't say I am a big fan of converting stuff too
 lisitsyn	it sounds like useless spending of time though I believe it should have been done under bsd
@sonney2k	the way I see it - shogun is a big framework for doing experiments
@sonney2k	once you know which algorithm you use
@HeikoS	sonney2k, lisitsyn this is all not really about the license consequences, but more about how other people see the license.
@sonney2k	you can as well find some bsd / whatever license you need algorithm or write that little bit
@sonney2k	and use it in your commercial product that you want to ship
@sonney2k	but most people don't ship stuff
@sonney2k	they create some prototype
@sonney2k	and that is what shogun is made for
@sonney2k	it is totally different from the liblinear is in iphone thing
@sonney2k	HeikoS, yeah - but heck people compile with gcc for decades and did never complain that it produces executables that are even commerically shipped
@sonney2k	I see us to be the very same thing
@sonney2k	the end result is some model
@sonney2k	that applying is usually ultra trivial
@sonney2k	and the model itself is *not* GPL - not at all
@sonney2k	it is whatever you want it to be
 lisitsyn	well actually the problem is not in license but market share
-!- travis-ci [~travis-ci@ec2-23-22-142-220.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/16085444
-!- travis-ci [~travis-ci@ec2-23-22-142-220.compute-1.amazonaws.com] has left #shogun []
 lisitsyn	if you google for machine learning you get scikits
 lisitsyn	I am quite demotivated to work on anything that is not trying to be the best
 lisitsyn	HeikoS had a conversation with basically our customers
 lisitsyn	and they want bsd so that's why it started :)
@HeikoS	lisitsyn: not really customers
@HeikoS	its more fellows
@HeikoS	that shared their experiences
 lisitsyn	HeikoS: well anyway people who could used it
@HeikoS	lisitsyn: Its more the mood in the discussion that made me clear that GPL is a barrier, which I wasnt aware of before
 lisitsyn	HeikoS: yeah it is quite trendy to avoid gpl nowadays
 lisitsyn	I feel it started like a few years back
@HeikoS	lisitsyn: I actually agree with it, but not strongly and emotionally ;)
@sonney2k	lisitsyn, scikits has high market share for other reasons - they cover the basic algorithms and make things easily accessible
@sonney2k	lisitsyn, totally the opposite of what shogun was back then - state-of-the-art expert-only algorithms
@HeikoS	I would like to see shogun more towards the basic stuff btw
 lisitsyn	we have no resources but heiko to write advanced stuff
 lisitsyn	I am not and not going to be a researcher I think
@HeikoS	lisitsyn: then you should do the basic framework stuff
@HeikoS	we need that desperately
@HeikoS	I can/will add more fundamental things
@HeikoS	that attract users
@HeikoS	loads of ideas, just not enough time
 lisitsyn	well simply it is
@sonney2k	HeikoS, I also want basics you know that :)
@HeikoS	sonney2k: I know, we talked about that :)
 lisitsyn	any algorithm should look like 50-100 lines of code
@sonney2k	HeikoS, at some point please scan in the notes you took
@HeikoS	sonney2k: will do
 lisitsyn	if it is not we've got wrong api
@HeikoS	lisitsyn: the interface is quite nice, (with exceptions)
@HeikoS	and we added all these tests which was a great step forward
@HeikoS	I guess next thing should be presentation
@HeikoS	and then clean ups of core
 lisitsyn	yeah may be
@HeikoS	while adding more basic algorithms (we definitely do not need more fancy complicated ones for now=)
@HeikoS	lisitsyn: I would love to decouple the parameter framework for example like your stichwort stuff
@HeikoS	that would be cool
 lisitsyn	HeikoS: I am disappointed about its usage
 lisitsyn	I tried it and I don't feel comfortable
 lisitsyn	something should be changed
@HeikoS	maybe host a GSoC project on that
@HeikoS	wiuth the goal to replace the current system
@HeikoS	would be interesting proper c++ coding stuff
 lisitsyn	if I can't come with some advanced C++ stuff student could have more troubles ;)
 shogun-buildbot	build #152 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/152  blamelist: Saurabh7 <saurabh.mahindre@gmail.com>
@HeikoS	lisitsyn: but if you design a thing and somebody does it for you?
 lisitsyn	once it is designed it is piece of cake
@sonney2k	what is not?
@sonney2k	but still it needs manpower to implement
 lisitsyn	HeikoS: I am still trying to find a balance between compile time stuff and runtime stuff
@HeikoS	lisitsyn: design is also ongoing, you write down stuff, student implements, realises there are flaws, you update design
 lisitsyn	well why not
@HeikoS	lisitsyn: I did that with lambday this way and it worked great (for parallel framework and log-det stuff)
 lisitsyn	I just mean if we set up task 'design that'
@sonney2k	HeikoS, btw we need to be rather quick if we want to be in next years gsoc
 lisitsyn	he could get mad :D
@sonney2k	we need that list of ideas and find mentors
 lisitsyn	okay guys see you later
@sonney2k	HeikoS, I know we have the ideas :)
@HeikoS	sonney2k: I know, I started writing some things down already (personal drafts) and talked to a few possible additional mentors
@sonney2k	but mentors?
@HeikoS	some people in my institute might want to mentor things
@HeikoS	have one for neural networks, one for probabilistic learning, and maybe more
@sonney2k	HeikoS, it is important to come up with a list of ideas (written down even drafty) rather soon
@HeikoS	sonney2k: but I currently really have a hard time with my time ...
@sonney2k	recall that we got all the good students long before gsoc was announced
@HeikoS	sonney2k: how is it going with you?
@sonney2k	bad bad
@HeikoS	damn
@HeikoS	yeah I will try to do something in some evenings
@sonney2k	I can only do the release now before vacations are over
@HeikoS	sonney2k: go for it, might help
@sonney2k	HeikoS, it might be sufficient to write an email to the mailinglist
@HeikoS	Ill try to copy our ideas list and extend it
@sonney2k	like we want to participate in gsoc'14
@HeikoS	if I manage to do this before end of the year, I will send this attached with the mail.
@HeikoS	if not, mail alone
@HeikoS	lisitsyn: take care!
@sonney2k	lisitsyn, sweet dreams :D
@sonney2k	HeikoS, well pinging potential mentors is really important...
@sonney2k	and that takes a *long* time
@HeikoS	sonney2k: yeah, good that you remind me
@HeikoS	will share a document with names ideas note etc
@sonney2k	HeikoS, just FYI for last year mentors were already clear in November
@HeikoS	uh
@sonney2k	but we did add 1-2 IIRC later
@HeikoS	sonney2k: well, yeah I cannot do magic. Will try to find as many as possible. It is also fine if we dont get 8 slots again
@HeikoS	if we dont have the manpower to organise that, its no help anyways
@sonney2k	yeah sure - I think I can get some too
@sonney2k	you recall I want shogun & teaching
@sonney2k	and I already talked to some people about this
@HeikoS	I love the idea!
 shogun-buildbot	build #149 of clang34 - thread analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/149  blamelist: Saurabh7 <saurabh.mahindre@gmail.com>
 shogun-buildbot	build #166 of clang34 - static analysis is complete: Failure [failed analyse]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20static%20analysis/builds/166  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Saurabh7 <saurabh.mahindre@gmail.com>
 shogun-buildbot	build #153 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/153  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>
-!- HeikoS [~heiko@90.211.150.15] has left #shogun []
 shogun-buildbot	build #150 of clang34 - thread analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/150  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
 shogun-buildbot	build #664 of nightly_default is complete: Failure [failed notebooks]  Build details are at http://buildbot.shogun-toolbox.org/builders/nightly_default/builds/664
-!- Saurabh7 [~Saurabh7@117.222.14.70] has joined #shogun
-!- Saurabh7 [~Saurabh7@117.222.14.70] has quit [Ping timeout: 245 seconds]
 besser82	sonney2k, ping?
 besser82	sonney2k, http://www.luga.de/Aktionen/LIT-2014/CfP
 besser82	sonney2k, they are looking for contribs for making presentations for stuff about "Why Linux?"
 besser82	sonney2k, one sub-field of that is "Linux und Bildung"
 besser82	sonney2k, like "Open-Source-Software in Schulen und Universit?ten zur Forschung"
 besser82	sonney2k, how about doing a bit of lobby-work for SHOGUN?!
 besser82	lisitsyn, Mornin'  :D
 lisitsyn	besser82: MORGEN
 besser82	lisitsyn, :D
 besser82	lisitsyn, so how about plugins?
 lisitsyn	besser82: what plugins?
 besser82	lisitsyn, do we want to setup a draft for those plans?
 lisitsyn	besser82: yeah probably
@wiking	besser82: btw another question: would we still do dpointering
 besser82	wiking, I think, when using plugins, they would be obsolete mostly
@wiking	i mean in one sense it gets in a way deprecated by modularizing the whole thing... but then again having a stable ABI would be great that could be achieved by using dptrs
 besser82	wiking, ABI / API would be stable, because the interface-lib wouldn't change that much
 besser82	wiking, except for possibly adding some new class / datastructure / object
 besser82	wiking, but that wouldn't break API / ABI
 besser82	wiking, but might make sense to wrap the plugin-manager-stuff into d-ptrs
@wiking	besser82: imho we should not have so fine grained modular arch that u suggested the other day
@wiking	or at least not on repository level
@wiking	besser82: maybe one repo per subdir of src/shogun/
 besser82	wiking, otoh, with fine grain we can be more flexible
 besser82	wiking, but has overhead
@wiking	besser82: yeah but that much repository
@wiking	is just way too much
 besser82	wiking, make this per subdir might be a bit complicated...
@wiking	and waste of repo
@wiking	besser82: it's like 1 file per repository
@wiking	that's what you are suggesting
@wiking	ok say 3 files: .h, .cpp and CMakeLists.txt
 besser82	wiking, not really; I suggested sth. like logical grouping
 besser82	wiking, you came up with "one plugin each feature" ;)
@wiking	besser82: well 1 subdir per repo is a logical grouping
@wiking	with a very few exception
@wiking	"besser82: wiking: but if we are moving to plugin-style, I'd strongly recommend keeping every plugin inside a seperate git-repo"
@wiking	from yesterday...
@wiking	and 1 kernel implementation should be 1 plugin
@wiking	that's why i infered -> 3 files per repo...
 besser82	wiking, maybe we should do some logical grouping of repos
@wiking	see my above suggestion
@wiking	that is a logical grouping
 besser82	wiking, lisitsyn probably wants to do some rubygem-style manager for those plugins
 besser82	wiking, so that might be easier with more grained repos?!?
 besser82	wiking, but in fact I'm open to anything
 besser82	wiking, in the end sonney2k must approve all the crazy-shit, we want to do ;)
 besser82	lisitsyn, do want to mock a spec about how to handle those plugins?
 lisitsyn	besser82: yes later
 lisitsyn	in the beginning of january
 besser82	lisitsyn, you can ask ded moroz to bring one for you; so you just need to c&&p  :-P
 lisitsyn	hah
 besser82	wiking, so maybe you should discuss that repo-layout && stuff with lisitsyn
 besser82	wiking, I would take mostly care about the code-pov, then
@wiking	:>
@wiking	yeah i think things will roll out as they usually do...
@wiking	either something will happened or else
@wiking	planning out who's going to do what is senseless in this stage
@wiking	especially taking into consideration of all the other timeconstraints that eveyrbody has...
@wiking	my 2 cents
 besser82	wiking, maybe, maybe not
@wiking	besser82: trustme it for sure like this
@wiking	if u feel like doing it do it. put it out to a branch/fork whatever and some people will join if they can/feel like
@wiking	i dont want to sound pessimitic or discouriging but this is how things have been in shogun ever since i'm around...
@wiking	and that aint going to change as everybody is doing this parttime
 besser82	wiking, lisitsyn came up the idea of making some specs first ;)
@wiking	besser82: yes and that'll be done as well very sporadic
@wiking	as it was in the past
 besser82	wiking, from me pov I can just start, and we can do mods and building tools around that later  ;)
@wiking	there's going to be one googledoc/wiki page and people will start edit etc
 lisitsyn	haha
 lisitsyn	yes
@wiking	besser82: is there anything that holds you back?
@wiking	besser82: i mean if u can do it do it
@wiking	eveyrbody is going to be happy about that
 besser82	wiking, not having a spec && approval from sonney2k ?
@wiking	?
@wiking	this is an open source project
@wiking	u can do whatever you want with it
@wiking	forkit and abuse it
@wiking	if u want to do it alone that's fine as well if u want feedback make it out in the open, i.e. from the very beginning start writing the code in an open repo so ppl can comment
@wiking	that's all
@wiking	u dont need anybody's approval to do it
 besser82	wiking, allright then  ;)  Lets-a-start ;)
@wiking	"2) offer you this License
@wiking	giving you legal permission to copy, distribute and/or modify it."
@wiking	from gpl license
@wiking	so that's all
 besser82	wiking, lemme setup a fork and throw in my ideas to the wiki-page  ;)
@wiking	besser82: go ahead
-!- new_lido [~walid@105.200.131.138] has joined #shogun
-!- iglesiasg [~iglesiasg@211.Red-83-40-129.dynamicIP.rima-tde.net] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@iglesiasg	sup guys
 besser82	iglesiasg, Hey! Hello!
 besser82	iglesiasg, Read my proposal on da list?
@iglesiasg	besser82, yes! However, I did not read the linked post yet
@iglesiasg	so I have to read it first to understand better what changes would this approach involve
 besser82	iglesiasg, kk
 besser82	iglesiasg, Much work, real improvements  ;)
-!- new_lido [~walid@105.200.131.138] has quit [Read error: Connection reset by peer]
-!- new_lido [~walid@105.200.131.138] has joined #shogun
-!- new_lido [~walid@105.200.131.138] has quit [Quit: Leaving]
-!- iglesiasg [~iglesiasg@211.Red-83-40-129.dynamicIP.rima-tde.net] has quit [Ping timeout: 272 seconds]
-!- iglesiasg [~iglesiasg@211.Red-83-40-129.dynamicIP.rima-tde.net] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Saurabh7 :develop * b40ff33 / tests/unit/evaluation/ (2 files): https://github.com/shogun-toolbox/shogun/commit/b40ff335612cc04f21e0365ff1e957db71bd001c
 shogun-notifier-	shogun: update splittingstrategy tests
 shogun-notifier-	shogun: Saurabh7 :develop * 7a4e760 / tests/unit/evaluation/SplittingStrategy_unittest.cc: https://github.com/shogun-toolbox/shogun/commit/7a4e76074055fb6b78a3929b87201e80e132d9ac
 shogun-notifier-	shogun: update splittingstrategy tests
 shogun-notifier-	shogun: Heiko Strathmann :develop * cfcef10 / tests/unit/evaluation/ (2 files): https://github.com/shogun-toolbox/shogun/commit/cfcef108b0f8a0f8cc8ecd2ff997b7e913d50a5e
 shogun-notifier-	shogun: Merge pull request #1802 from Saurabh7/xvaltests
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: update Xvaltests
-!- HeikoS [~heiko@0541999e.skybroadband.com] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
 shogun-buildbot	build #415 of FC19 - libshogun is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/FC19%20-%20libshogun/builds/415  blamelist: Saurabh7 <saurabh.mahindre@gmail.com>
 shogun-buildbot	build #416 of FC19 - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/FC19%20-%20libshogun/builds/416
-!- wiking [~wiking@huwico/staff/wiking] has quit [Ping timeout: 260 seconds]
-!- wiking [~wiking@info2k1.hu] has joined #shogun
-!- travis-ci [~travis-ci@ec2-184-73-147-127.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/16108828
-!- travis-ci [~travis-ci@ec2-184-73-147-127.compute-1.amazonaws.com] has left #shogun []
-!- wiking [~wiking@info2k1.hu] has quit [Changing host]
-!- wiking [~wiking@huwico/staff/wiking] has joined #shogun
-!- mode/#shogun [+o wiking] by ChanServ
 shogun-buildbot	build #154 of clang34 - undefined behaviour analysis is complete: Failure [failed compile test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/154  blamelist: Saurabh7 <saurabh.mahindre@gmail.com>
 shogun-buildbot	build #155 of clang34 - undefined behaviour analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20undefined%20behaviour%20analysis/builds/155  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>
 shogun-buildbot	build #151 of clang34 - thread analysis is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20thread%20analysis/builds/151  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Saurabh7 <saurabh.mahindre@gmail.com>
-!- iglesiasg [~iglesiasg@211.Red-83-40-129.dynamicIP.rima-tde.net] has quit [Ping timeout: 272 seconds]
 shogun-buildbot	build #167 of clang34 - static analysis is complete: Failure [failed analyse]  Build details are at http://buildbot.shogun-toolbox.org/builders/clang34%20-%20static%20analysis/builds/167  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Saurabh7 <saurabh.mahindre@gmail.com>
-!- HeikoS [~heiko@0541999e.skybroadband.com] has quit [Ping timeout: 272 seconds]
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
-!- HeikoS [~heiko@0541999e.skybroadband.com] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- iglesiasg [~iglesiasg@211.Red-83-40-129.dynamicIP.rima-tde.net] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Fernando Iglesias :develop * daaaa0d / src/shogun/multiclass/KNN.cpp: https://github.com/shogun-toolbox/shogun/commit/daaaa0d2a8c993bc34eea8d5115dce459fe3e1e9
 shogun-notifier-	shogun: Fix leak in KNN::store_model_features, duplicate increases ref count
 shogun-notifier-	shogun: Fernando Iglesias :develop * 75cf24e / src/shogun/multiclass/KNN.cpp: https://github.com/shogun-toolbox/shogun/commit/75cf24e7aa8dfacff576c4bc31565b77afe4fd62
 shogun-notifier-	shogun: Merge pull request #1800 from iglesias/develop
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: Fix leak in KNN::store_model_features, duplicate increases ref count
 shogun-buildbot	build #2558 of deb1 - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/2558  blamelist: Fernando Iglesias <fernando.iglesiasg@gmail.com>
@HeikoS	iglesiasg: hi!
@HeikoS	did this patch solve the problem? or was it an old one?
@HeikoS	iglesiasg: anyway, cool!
 shogun-buildbot	build #2559 of deb1 - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/2559
@iglesiasg	HeikoS, hey!
@iglesiasg	HeikoS, nothing new there unfortunately
@HeikoS	iglesiasg: ah ok
@iglesiasg	it was the one corresponding to the last comments I wrote a couple of days ago
@HeikoS	iglesiasg: thanks anyway for going over this
@iglesiasg	it is cool
@HeikoS	iglesiasg: I am not so sure about duplicate anymore anyways
@HeikoS	what do you think about just ditching it?
@HeikoS	and using clone instead
@HeikoS	which clones the full thing
@HeikoS	would that be a problem?
@HeikoS	like infinite stacks or so?
@HeikoS	subsets is also a question
@iglesiasg	HeikoS, so for what I have understood from store_model_features
@HeikoS	ah no that would not be goo
@HeikoS	d
@iglesiasg	the features are not actually copied, but shared
@HeikoS	nono
@HeikoS	they are copied
@iglesiasg	clone would copy them I believe
@HeikoS	only those who are needed for the copy
@iglesiasg	mmm
@iglesiasg	I think they are not copied :)
@HeikoS	like for SVM only the SVs are copied
@iglesiasg	the feature matrix is not copied
@HeikoS	for SVM they definitely are
@HeikoS	for others, I dont know
@HeikoS	argh
@HeikoS	maybe I should have a look before talking about things ;)
@iglesiasg	I have looked into KNN for this, which is related to the example
@HeikoS	ah
@iglesiasg	haha no problem
@iglesiasg	in any case, for me the problem is now something interesting
@HeikoS	why?
@iglesiasg	I don't understand how it is possibly leaking
@HeikoS	ah ok
@iglesiasg	since the refcount object is shared
@HeikoS	maybe a good opportunity to review the store_model_features idea
@iglesiasg	when the original features are freed, the other ones should be freed as well, I believe
@iglesiasg	mmm hold on
@iglesiasg	maybe not
@iglesiasg	the pointer passed to unref is the one that might be freed
@iglesiasg	but not any other pointer
@iglesiasg	even if this other pointer may contain internally the same refcount object
@iglesiasg	I guess that would explain it
@HeikoS	yeah
@HeikoS	when its NULL, no unref
@iglesiasg	HeikoS, in any case, what I found rather surprising was that using this duplicate method, the duplicated object gets the same refcount object as the original
@HeikoS	yeah that is not good
@iglesiasg	I don't know if this is done on purpose
@sonney2k	no it is a bug(tm)
@iglesiasg	or it is just a consequence of using the copy constructor without really looking into that
@iglesiasg	I see
@iglesiasg	then well, an idea might be to take a look at the copy constructor of SGRefObject
@HeikoS	iglesiasg: should not be like that
@iglesiasg	since it may not make sense at all that different Shogun objects share the refcount
@sonney2k	HeikoS, actually does duplicate() do a deep copy or a shallow one?
@HeikoS	this method should create a plain object that contains the same data as the current view on the features object
@HeikoS	that is what we need for store_model_features
@HeikoS	sonney2k: shallow
@iglesiasg	sonney2k, definitely not deep
@HeikoS	it should just take the current view and copy it
@HeikoS	sonney2k: but there are two modes: the default is that *all* features are copied
@HeikoS	and the quick one is that only relevant ones are copied
@HeikoS	sonney2k: we had a discussion about memory limitations a while ago (a few years) remember?
@sonney2k	in this case it should inherit refcounts except for the new object right?
@sonney2k	HeikoS, yeah but I forgot the exact details
@HeikoS	sonney2k: it should just return a new object with its own ref-count
@HeikoS	like a flat version of the underlying feature object
@HeikoS	without any subsets etc
@HeikoS	I think this is also different from copy constructor
@sonney2k	HeikoS, no copy constructor should call duplicate then
@HeikoS	sonney2k: mmh copy constructor should in fact also copy subsets etc
@HeikoS	so thats different
@HeikoS	duplicate should be called flat_copy() or so
@HeikoS	btw
@HeikoS	store_model_features should just save the current view
@HeikoS	with views, no copying is needed
@HeikoS	For x-validation that is really a design flaw ,we should have used multiple views from the beginning
@iglesiasg	that agrees with what the operation of store_model_features in KNN
@sonney2k	HeikoS, I think subsets should be copied to even in flat copy
@HeikoS	because if the model contains some view, then the feature object itself can be shared
@iglesiasg	at least how I understood it
@HeikoS	among folds
@HeikoS	sonney2k: yeah, I agree. But that is not what is needed for store_model_
@sonney2k	HeikoS, I mean back then we said shallow copy should keep all references of sub objects (and increase them)
@sonney2k	so basically an object that is cheap to create
@HeikoS	iglesiasg, sonney2k I think it might be a nice task for this guy who wants to help us to implement multiple subset/views and then use that in store_model_features
@HeikoS	sonney2k: yeah
@HeikoS	agree
@sonney2k	but modifying data in it will modify it in all cheap clones
@HeikoS	training usually doesnt modify right?
@sonney2k	why not just do a drop subsets or so?
@HeikoS	or does it?
@HeikoS	sonney2k: ah yeah that is done in many methods
@sonney2k	it can but usually not (preprocessers might...)
@HeikoS	but think about this store_model_features
@HeikoS	if it just stores a current view on a fixed fdeature object
@HeikoS	everything is fine
@HeikoS	since the reference is kept
@HeikoS	so even if one assigns a different one for testing
@HeikoS	the old model view on the old features object is still there
@HeikoS	maybe worth thinking about those views a bit more
@HeikoS	also should be unified for labels and features
@sonney2k	'real' views have the issue that one needs to modify all algorithms to properly work with them
@sonney2k	as in get_feature_vector(i, view) I mean
@HeikoS	sonney2k: no that would be annoying
@HeikoS	all existing calls should use std view
@HeikoS	and there should be a method to set the std view to a different one, this way whole algorithms can be changed
@HeikoS	and all the x-validation stuff, and also wiking 's bagging can use the new ones
@HeikoS	actually thats even next on my list on things to implement to the core
@sonney2k	it is the most clean thing to do tough - thread safe and stacking and everythign would work with this right?
@sonney2k	I know it is annoying that is why we are doing it the other way currenlty...
@HeikoS	yeah
@HeikoS	well, it is not too hard to change things in my eyes
@HeikoS	and its somewhat nice to do
@HeikoS	not as ugly as other improvements ;)
@HeikoS	iglesiasg, we should push this indian guy to do it ;)
@iglesiasg	taking advantage of man power yeah!
@HeikoS	iglesiasg: hehe ;)
@HeikoS	ok so we should brief him
@HeikoS	what would be first step?
@HeikoS	how should the interface to this look like?
@iglesiasg	to store_model_features?
@HeikoS	no to those multiple views/subsets
@HeikoS	currently there is just one
@HeikoS	and one can stack them
@HeikoS	what we needed was a map of those stacks
@HeikoS	with the key being some string or so
@HeikoS	and then one would have to set a default subset stack
@HeikoS	but every method to access features should be overloaded with an additional parameter that specified the view
@HeikoS	or, alternatively, keep all calls the same and one has to change the current one by hand everytime (inconvinient)
--- Log closed Mon Dec 30 00:00:29 2013
