--- Log opened Sat Mar 05 00:00:23 2016
-!- ebadawy [~ebadawy@197.163.32.61] has joined #shogun
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has left #shogun []
 shogun-buildbot	build #3580 of deb1 - libshogun is complete: Failure [failed git]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/3580  blamelist: EdgeX <tonmoysaikia@live.com>, Tonmoy Saikia <tonmoysaikia@live.com>
 shogun-buildbot	build #3581 of deb1 - libshogun is complete: Failure [failed git]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/3581  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, EdgeX <tonmoysaikia@live.com>, Tonmoy Saikia <tonmoysaikia@live.com>
-!- Tanishq [~tanishq@1.186.16.201] has quit [Ping timeout: 240 seconds]
-!- bollu [~Adium@1.186.133.195] has joined #shogun
-!- bollu [~Adium@1.186.133.195] has quit [Client Quit]
 shogun-buildbot	build #1083 of nightly_default is complete: Failure [failed compile]  Build details are at http://buildbot.shogun-toolbox.org/builders/nightly_default/builds/1083  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Bj?rn Esser <me@besser82.io>, EdgeX <tonmoysaikia@live.com>, Tonmoy Saikia <tonmoysaikia@live.com>, Viktor Gal <viktor.gal@maeth.com>
 shogun-buildbot	build #960 of nightly_all is complete: Failure [failed compile]  Build details are at http://buildbot.shogun-toolbox.org/builders/nightly_all/builds/960  blamelist: Heiko Strathmann <heiko.strathmann@gmail.com>, Bj?rn Esser <me@besser82.io>, EdgeX <tonmoysaikia@live.com>, Tonmoy Saikia <tonmoysaikia@live.com>, Viktor Gal <viktor.gal@maeth.com>
-!- lambday [6a33f123@gateway/web/freenode/ip.106.51.241.35] has joined #shogun
-!- mode/#shogun [+o lambday] by ChanServ
-!- besser82 [~besser82@fedora/besser82] has joined #shogun
-!- mode/#shogun [+o besser82] by ChanServ
-!- ebadawy [~ebadawy@197.163.32.61] has quit [Remote host closed the connection]
-!- aditya123 [uid148851@gateway/web/irccloud.com/x-myfufpprzirjrmaz] has quit [Quit: Connection closed for inactivity]
-!- rjtshrma [6725c94b@gateway/web/freenode/ip.103.37.201.75] has quit [Ping timeout: 252 seconds]
-!- red_devil [~rahul__@49.207.189.134] has joined #shogun
-!- red_devil is now known as Guest53760
-!- Ameya [0e8b5206@gateway/web/freenode/ip.14.139.82.6] has joined #shogun
 Ameya	Hello! I am Ameya from IIIT Hyderabad, India. I was trying to build shogun but ran into this error.
 Ameya	http://pastebin.com/caTWdhRr
 Ameya	The cmake settings used by me were - cmake -DPythonModular=ON  ..
 Ameya	It is a simple correction in line 389 in shogun/src/.doxy2swig.py , changing it from o.write("".join(self.pieces)) -> o.write("".join(self.pieces)).encode('utf-8)
 Ameya	How should I go about reporting it?
@wiking	shogun-buildbot: force build --branch=develop 'deb1 - libshogun'
 shogun-buildbot	build forced [ETA 6m41s]
 shogun-buildbot	I'll give a shout when the build finishes
 shogun-buildbot	build #3582 of deb1 - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/3582
@wiking	sonney2k: around?
@besser82	Ameya, I addressed your change in https://github.com/shogun-toolbox/shogun/pull/3039
@besser82	Ameya, in future you should open an issue on Github --> https://github.com/shogun-toolbox/shogun/issues
@wiking	besser82: mornign
@besser82	wiking, mornin' ^^
@besser82	Ameya, changes for doxy2swig are merged in development branch now
-!- lambday_ [6a338432@gateway/web/freenode/ip.106.51.132.50] has joined #shogun
-!- mode/#shogun [+o lambday_] by ChanServ
-!- lambday [6a33f123@gateway/web/freenode/ip.106.51.241.35] has quit [Ping timeout: 252 seconds]
 shogun-buildbot	build #2774 of deb3 - modular_interfaces is complete: Failure [failed python modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb3%20-%20modular_interfaces/builds/2774  blamelist: Bj?rn Esser <me@besser82.io>
 shogun-buildbot	build #743 of deb4 - python3 is complete: Failure [failed python modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb4%20-%20python3/builds/743  blamelist: Bj?rn Esser <me@besser82.io>
 Ameya	Thank you Mr. Esser!
@besser82	Ameya, you're welcome ^^
@wiking	mmm
@wiking	besser82: that one failed :)
@besser82	wiking, cannot be my fault...  :P
@wiking	i dunno who put some none-ascii stuff
@wiking	into the fucking thing...
@wiking	and who let it to be merged
 Ameya	oh yes
 Ameya	o.write("".join(self.pieces).encode('utf-8))
 Ameya	My bad
@besser82	Ameya, oops... will fix quickly
 shogun-buildbot	build #457 of trusty - libshogun - viennacl is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/trusty%20-%20libshogun%20-%20viennacl/builds/457  blamelist: Bj?rn Esser <me@besser82.io>
@besser82	Ameya, wiking: fix is pushed  :P
 Ameya	Mr. Essar, did you make the pr?
 Ameya	I just made one fixing the issue. It was declined
 Ameya	https://github.com/shogun-toolbox/shogun/pull/3041
 Ameya	Is this okay?
 Ameya	Oh, wait, I see you fixed it in https://goo.gl/zdmoC5. Was hoping I could get a PR in myself :)
@besser82	Ameya, next time ^^
 shogun-buildbot	build #3585 of deb1 - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/3585  blamelist: Bj?rn Esser <me@besser82.io>
 shogun-buildbot	build #336 of trusty - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/trusty%20-%20libshogun/builds/336  blamelist: Bj?rn Esser <me@besser82.io>
 shogun-buildbot	build #458 of trusty - libshogun - viennacl is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/trusty%20-%20libshogun%20-%20viennacl/builds/458
-!- Guest53760 is now known as rahul
-!- rahul is now known as Guest4503
-!- Guest4503 [~rahul__@49.207.189.134] has quit [Quit: Leaving]
-!- cache-nez [~cache-nez@93.175.19.64] has joined #shogun
-!- lambday_ [6a338432@gateway/web/freenode/ip.106.51.132.50] has quit [Ping timeout: 252 seconds]
-!- jack [a4a41f06@gateway/web/freenode/ip.164.164.31.6] has joined #shogun
 jack	hi
-!- jack is now known as Guest22344
 Guest22344	I have some problem  with loading large data set(100k) to ridgeregression.sg
 Guest22344	so I just checked with loading just 5K data set and it works, but if I go beyond that it gets loading loading and loading
 Guest22344	and there is no result till 2 days
 Guest22344	is there some limitation with loading data sets?
 Ameya	Hello again! I wanted to run the tests and fix the tests to all run <1second . But, as specified by Heiko in #3005, "run make test with Python modular enabled to get a list of timings", I tried running that command but the output is: make: *** No rule to make target `test'.  Stop.
@besser82	Ameya, run `ctest .` in the build-dir  ;)
 Ameya	Oh! I tried that. Got this output - 'Test project /home/ameya/shogun/build No tests were found!!!'
@besser82	Ameya, Then you need to rebuild / reconfigure using cmake -DENABLE_TESTING=ON
-!- cache-nez [~cache-nez@93.175.19.64] has quit [Ping timeout: 244 seconds]
-!- Tanishq [~tanishq@1.186.12.154] has joined #shogun
-!- lambday [6a338432@gateway/web/freenode/ip.106.51.132.50] has joined #shogun
-!- mode/#shogun [+o lambday] by ChanServ
-!- cache-nez [~cache-nez@93.175.2.172] has joined #shogun
-!- lzc [~lzc@115.27.197.134] has joined #shogun
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- besser82 [~besser82@fedora/besser82] has quit [Ping timeout: 240 seconds]
-!- Guest22344 [a4a41f06@gateway/web/freenode/ip.164.164.31.6] has quit [Quit: Page closed]
-!- cache-nez [~cache-nez@93.175.2.172] has quit [Ping timeout: 240 seconds]
@wiking	HeikoS: ping
@HeikoS	wiking: pong
@wiking	ok so last questions
@HeikoS	shoot
@wiking	i've fixed most of the stuff in that branch
@wiking	now about the place to store
-!- wanderer_ [67157d4e@gateway/web/freenode/ip.103.21.125.78] has joined #shogun
 wanderer_	hey
@wiking	a) do we really want to have the cookbook updated per commit? wouldn't be it enough as part of a nightly
@wiking	?
@wiking	b) shouldn't we store the cookbooks the same place as the website?
@HeikoS	a) yes nightly is fine for develop
@HeikoS	b) yes I agree
@wiking	mmmm
@wiking	ok
@HeikoS	c) for PR, it would be good per commit, dont you think?
@wiking	yeah PR is fine
@HeikoS	ehm per PR
@HeikoS	okok
@wiking	i can do that
@wiking	i was just wondeirng about the 'latest'
@wiking	that should be enough per nightly
 wanderer_	wiking: i tried compiling the latest version with g++-4.9, but it always gives an error here
@wiking	just as part of doxygen update
@HeikoS	wiking: yeah sure, just like the notebooks/doxygen
@HeikoS	totally fine
@wiking	wanderer_: use pastebin.com
@wiking	HeikoS: ok lemme do those changes in .travis.yaml
@HeikoS	wiking: sweet
 wanderer_	here - http://pastebin.com/uDwnSJS8
@HeikoS	wiking: btw I have no idea why the c# examples wont be compiled anymore, it used to work with the *same* CMakeLists.txt in the examples/meta/csharp dir
@wiking	good question
@wiking	dunno yet
@wiking	but i wanna work on io stuff now
@wiking	so i fix this PR thing
@wiking	but then it's your stuff
@HeikoS	wiking: ok
 wanderer_	and for your reference, my makefile - http://pastebin.com/knytSw0i
@HeikoS	wiking: great, thanks!
@wiking	makefile?
 wanderer_	one generated by ccmake
@wiking	yeah well nobody cares about that
 wanderer_	okay
@wiking	dunno never seen this error before
@wiking	and certainly we are compiling shogun with 4.9
@HeikoS	wanderer_: I think this might be compiler version
 wanderer_	my g++ --version shows 4.9
@HeikoS	wiking: good stuff, looking forward to this
@HeikoS	wiking: btw do you have an opinion how to test all the meta example outputs?
@HeikoS	wiking: I did not really like the tester.py script
@HeikoS	could do similar, or something different
@wiking	HeikoS: ?
@wiking	what do you mean how to test the output?
@HeikoS	wiking: the test build runs all meta examples
@HeikoS	meta examples store all numerical variables into a single file
@HeikoS	from each language
 lisitsyn	ok I woke up!
@wiking	lisitsyn: :DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
@wiking	lol
@wiking	HeikoS: but why would you do that? :)
@HeikoS	now want to compare that the example cpp/java/py all produce the same file, that is the same as a reference file
@wiking	ah i see
@HeikoS	wiking: a) implicitly test typemaps b) integration testing
@wiking	and these are examples
@wiking	:)
@wiking	mmm
@wiking	good question
 lisitsyn	whats the status of this thing
@wiking	lemme see first where the hell should we store those PR cookbooks
@HeikoS	lisitsyn: how to compare the example output
@wiking	btw
@HeikoS	wiking: ok
@wiking	somebody fix all the fucking broken stuff
@wiking	that has been introduced in the last 24 hours
@wiking	shogun-buildbot: force build --branch=develop 'deb1 - libshogun'
 shogun-buildbot	build forced [ETA 3m33s]
 shogun-buildbot	I'll give a shout when the build finishes
@wiking	plz be more vigilant with PRs
@HeikoS	wiking: yeah ok, will do, it is hard as there are so many
@wiking	level of codes lately is not the high standard :D
@HeikoS	wiking: you have to shoot people who merge things early ;)
@HeikoS	but I agree
 shogun-buildbot	build #3586 of deb1 - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb1%20-%20libshogun/builds/3586
@wiking	shogun-buildbot: force build --branch=develop 'trusty - libshogun'
 shogun-buildbot	build forced [ETA 14m16s]
 shogun-buildbot	I'll give a shout when the build finishes
@wiking	shogun-buildbot: force build --branch=develop 'deb3 - modular_interfaces'
 shogun-buildbot	build forced [ETA 33m08s]
 shogun-buildbot	I'll give a shout when the build finishes
@wiking	[14:06][buildbot@7nn:~/masters/shogun/public_html]$ du -sh
@wiking	9.9G.
@wiking	lol
@wiking	:)
@wiking	i better clean up some memcheck static analysis files
@wiking	or better yet, create a crontab there
 wanderer_	umm .... any thoughts?
@wiking	HeikoS: ok so as far as i remember my BSD licensing agreement got flushed from static folder
@wiking	once the website is updated
@HeikoS	wiking: pitty
@HeikoS	wiking: but we decided to do it anyways
@HeikoS	gunnar overrode all his employees ;)
@wiking	yeah yeah
@HeikoS	only the alglib stuff is problematic as it is gpl
@HeikoS	the rest shoul dbe ok
@wiking	but the question is
@wiking	where should i place
@wiking	the PRed cookbooks
@HeikoS	we announce and give ppl a chance to tell us if they dont agree
@HeikoS	aj
@wiking	on the website
@HeikoS	dont know
@HeikoS	maybe?
@wiking	because if i put in the static dir
@wiking	it'll be flushed
@wiking	if somebody updates the website
@wiking	or maybe not
@wiking	drwxr-xr-x 5 shogun   shogun   4096 Jul 10  2012 admin
@wiking	im certain since then stuff got updated
@HeikoS	yes definitely
@wiking	ok i'll put it there then
@wiking	cookbook_pr
@HeikoS	wiking: it should be flushed every now and then anyways right?
@HeikoS	when PR is closed
@HeikoS	or something
@wiking	HeikoS: cron
@wiking	it'll flush it every week once
@HeikoS	once a week?
@HeikoS	good
@wiking	yeah something like that
@wiking	lisitsyn: can we remove that ssh key from shogun
@wiking	that you've created?
 lisitsyn	yes I already removed it I think
 lisitsyn	I realized it is pretty much useless in this case
@wiking	:)
@wiking	k
@wiking	mmm
@wiking	OSX buildbot
@HeikoS	osx builbot would be a blast
@HeikoS	and a nightly binary ;)
@wiking	OS X El Capitan Lite
@wiking	$24.99/mo
@wiking	:<
@HeikoS	and cygwin bot would be nice too
@HeikoS	arhh
@wiking	f*ing 25 usd
@HeikoS	what about gunnars machine?
@HeikoS	did that ever work?
@wiking	i get access to a matlab machine
@wiking	mmm something weird is with LaRank.* unit tests
@wiking	takes a long time
@wiking	it's a quite recent change
@wiking	because that's why recently unit tests starts to timeout
@lambday	whoa
@HeikoS	wiking: what are you doing with this file reader input stuff?
@HeikoS	lambday: hey there!
@lambday	HeikoS: hola
* lambday scratches his head
@HeikoS	lambday: whats up? :)
@lambday	HeikoS: I needed to discuss some design related things regarding the new flexy-framework..
@lambday	have been working on it
@lambday	HeikoS: shall I write a mail in detail?
@HeikoS	lambday: maybe yes, or on github?
@wiking	HeikoS: which file reader?
@lambday	I changed quite a few things in the POC - tried to make it sexier https://github.com/lambday/flash
@wiking	buildsl+ 24091 99.9  0.0 225460 29332 ?        R    14:10  11:19 /home/buildslave/trusty_-_libshogun/build/build/tests/unit/shogun-unit-test --gtest_filter=LaRank.*
@HeikoS	wiking:  you mentioned something you were doing, just curious
@wiking	HeikoS: io
@wiking	HeikoS: refactoring io code
@wiking	because it's shitty
@HeikoS	lambday: ok cool ,send me a brief summary of the changes maybe per mail?
@wiking	adding libarchive + hdfs support
@HeikoS	wiking: ah yes please!!!
@wiking	and fixing the circular buffer
@HeikoS	lambday: im preparing a talk for monday, so keep it brief ;) Monday I have more time :)
@HeikoS	wiking: and then also csv if possible
@wiking	that's why we have a problem reading cvs 10M+
@lambday	HeikoS: cool.. I am worried about sending a PR.. it is too huge..
@lambday	HeikoS: okay monday would be better
@wiking	HeikoS: csv is due to circular buffer bug
@lambday	let me write the mail before I forget the details
@HeikoS	lambday: maybe send me a mail with the main changes
@HeikoS	lambday: and then just push to feature branch
@wiking	so we fix that csv is fixed
@lambday	HeikoS: alright
@HeikoS	and then put tests there, and if all is good we merge this thing
@HeikoS	lambday: you are right a PR is too big with this
@lambday	massive
@HeikoS	wiking: great
@HeikoS	lambday: haha ,)
@lambday	HeikoS: I also thought, that until all the components get added, I'd keep it under shogun/statistics/experimental... old stuffs would also be there
-!- Saurabh7 [~Saurabh7@103.225.100.51] has joined #shogun
@HeikoS	lambday: just feature  branch it
@HeikoS	nobody is working on this
@lambday	okay
@HeikoS	lambday: curious what you did
@HeikoS	looking forward, let me know when you sent the email
@HeikoS	procastinating here ;)
@lambday	lisitsyn: https://github.com/lambday/flash/blob/develop/src/flash/statistics/HypothesisTest.cpp#L58 tribute to a few tricks I learned from you over the years
@lambday	HeikoS: alright
 lisitsyn	lambday: hah
 Saurabh7	lambday, wahts the difference between https://github.com/shogun-toolbox/shogun/blob/develop/src/shogun/mathematics/Math.cpp#L90 and https://github.com/shogun-toolbox/shogun/blob/develop/src/shogun/mathematics/linalg/internal/implementation/Dot.h#L138
@lambday	when I shogunify it, gotta "some"/"unique" the hell out of it
 lisitsyn	lambday: why don't you call 'impl' as 'self'? ;)
@lambday	lisitsyn: I will
 Saurabh7	lambday, same thing i asked few days ago :)
 lisitsyn	lambday: just curious what you think
 Saurabh7	lambday, but i am definetly getting perfromancedifference between those too
 Saurabh7	*two
@lambday	Saurabh7: can you please benchmark it? it's weird
@lambday	lisitsyn: I like self.. not sure about "some"..
 shogun-buildbot	build #337 of trusty - libshogun is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/trusty%20-%20libshogun/builds/337
@lambday	I get what you mean.. but "shared" is clearer
 lisitsyn	lambday: good
 lisitsyn	lambday: what I was thinking about 'some'
 lisitsyn	is that 'some' is a good name for something pooled
 lisitsyn	like give me some available classifier
@lambday	lisitsyn: coming from some other source - I don't own it I won't delete it
@lambday	that's what you mean
@wiking	shogun-buildbot: force build --branch=develop 'trusty - libshogun'
 shogun-buildbot	build forced [ETA 14m16s]
 shogun-buildbot	I'll give a shout when the build finishes
 lisitsyn	lambday: I am also good with shared
 lisitsyn	don't mind renaming it in shogun as well
 lisitsyn	Shared as a class, and 'shared' function to produce them
@lambday	yeah... like make_shared
@lambday	on the other hand, make_some is weird :D
@lambday	get_some :D
@lambday	haha
 lisitsyn	I don't think make_shared is short enough
@wiking	shogun-buildbot: force build --branch=develop 'deb4 - python3'
 shogun-buildbot	The build has been queued, I'll give a shout when it starts
 lisitsyn	I mean if I call shared<SomeClass>(..)
 lisitsyn	it is already clear that I request shared SomeClass
@lambday	yeah..
@lambday	true that
 lisitsyn	the only danger if that become a keyword
 lisitsyn	:)
@lambday	haha don't worry that won't happen anytime soon
@lambday	this dot issue is weird! these two pieces of code that Saurabh7 shared is *almost* identical..
@lambday	except for the fancy map operator that's used in linalg dot
@lambday	and it's for SG
 Saurabh7	its dynamic size though
@lambday	Saurabh7: I don't get it.. it basically does the same thing!
 Saurabh7	in linalg
 lisitsyn	lambday: are they are different performance wise?
@lambday	lisitsyn: as Saurabh7 says, yes!
@lambday	Saurabh7: the other one is also for dynamic size, right?
 lisitsyn	Saurabh7: what's faster?
@lambday	as far as eigen is concerned
 Saurabh7	onst Eigen::VectorXd> ev1(v1,n)
 Saurabh7	const Eigen::VectorXd> ev1(v1,n)
 Saurabh7	this ones faster
@wiking	yeah because it's consst
@wiking	HeikoS: ok i gotta go out
@wiking	i see sun for the first time since i'm europe
 lisitsyn	hmm could be because of that ^
@HeikoS	wiking: no sun here :(
@wiking	maybe w ecannot use travis
@wiking	i'll have to see
@wiking	but in worst case
@HeikoS	wiking: no travis?
@wiking	i can put a hook for a buildbot
@HeikoS	ah ok
@wiking	that'll do the same thing for pr
@lambday	ah
@wiking	yeah i mean if its const
@wiking	you dont need to do any memcpy or anything
@wiking	right?
 Saurabh7	lambday,  maybe we can pass vector size and map to constant in linalg
 Saurabh7	rather than dynamic everytime
@lambday	wiking: map doesn't do any memcpy anyway so far I know
 lisitsyn	it doesn't
 lisitsyn	it is either const somehow
 lisitsyn	or alignment
@wiking	lambday: yeah but if it's not const
@wiking	 static T compute(shogun::SGVector<T> a, shogun::SGVector<T> b)
@wiking	that thing is not a pass by reference
@wiking	you pass there the whole class
@wiking	right?
@lambday	that just increases the refcount
@wiking	right?
@wiking	on the stack?
@lambday	doesn't do memcpy
@wiking	ok write your code
@wiking	gcc -o#
@wiking	gcc -O3
@wiking	and see what it'll do on the stack for you
@wiking	objdump -D
@lambday	yes the object is on the stack but the data ptr is dynamically allocated for SGVector
 shogun-buildbot	build #338 of trusty - libshogun is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/trusty%20-%20libshogun/builds/338
@lambday	which just copies the ptr and increases the refcount
@lambday	no memcpy
@wiking	again
@lambday	lisitsyn: ^^ can you confirm this?
@wiking	compile
@wiking	and objdump
@wiking	you'll see
 lisitsyn	sgvector could be copied but not the data
@wiking	isn't that enough already?
 lisitsyn	no it is very small
 lisitsyn	a few bytes
@lambday	how a ptr copy and refcount++ be so much overhead?
 lisitsyn	comparing to dot operation that is a few thousand of multiplications
@wiking	Saurabh7: what's the runtime diff?
@lambday	we never pass SGVector/SGMatrix via ref in shogun..
@lambday	afaik
 Saurabh7	i am using it in kmeans for k= 100 and it goes from ~30 sec to ~100 s
@lambday	Saurabh7: -O3?
@lambday	okay let me try a quick benchmark
 wanderer_	can anybody please help me with a build error?
@wiking	mmm lol that's quite a diff
@wiking	ttyl
 lisitsyn	wanderer_: what's the error?
 wanderer_	http://pastebin.com/uDwnSJS8
 wanderer_	i am using g++-4.9 with -std=c++11 in the cmake
 lisitsyn	wanderer_: what os?
 wanderer_	linux mint 17
 wanderer_	its based on ubuntu 14.04 i think
 shogun-buildbot	build #2775 of deb3 - modular_interfaces is complete: Success [build successful]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb3%20-%20modular_interfaces/builds/2775
 shogun-buildbot	build forced [ETA 9m28s]
 shogun-buildbot	I'll give a shout when the build finishes
 lisitsyn	HAVE_CXX11 is not set for you somehow
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has joined #shogun
 lisitsyn	it would call proper setter of real part if HAVE_CXX0X or HAVE_CXX11 was set
 lisitsyn	they are set according to a set of tests
 lisitsyn	wanderer_: how do you pass that '-std=c++11' ?
 wanderer_	in CMAKE_CXX_FLAGS while doing ccmake .
 shogun-buildbot	build #744 of deb4 - python3 is complete: Failure [failed python modular]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb4%20-%20python3/builds/744
 wanderer_	lisitsyn: any ideas on how to set the HAVE_CXX11 then?
 lisitsyn	wanderer_: why do you want to pass it to flags?
 wanderer_	lisitsyn: then how do i build it?
 lisitsyn	wanderer_: I mean why to pass std to flags directly?
 lisitsyn	don't it compile without it?
 wanderer_	lemme check. back in a minute
 wanderer_	lisitsyn: it doesn't actually
@lambday	lisitsyn: Saurabh7 https://gist.github.com/lambday/7cbd77eb0530ad41d9f5
@lambday	this is negligible difference
 wanderer_	lisitsyn: it actually produces a c++-11 error
 wanderer_	lisitsyn: http://pastebin.com/THyrApVA
 wanderer_	that's why i thought enabling it via flags was a good idea
@lambday	Saurabh7: https://gist.github.com/lambday/938eaf0b0a7962769c46
@lambday	lisitsyn: ^^
 lisitsyn	wanderer_: ok I see
 lisitsyn	wanderer_: our build system believes your gcc doesn't support C++11 (for some reason)
 lisitsyn	and meanwhile non-C++11 build is broken
 lisitsyn	hah
-!- cache-nez [~cache-nez@93.175.2.172] has joined #shogun
@lambday	Saurabh7: can you run that last benchmark in your machine and let us know the difference?
@lambday	Saurabh7: I used these flags : g++ -O3 -std=c++14 dot_benchmark.cpp -I/usr/include/eigen3 -lshogun -lhayai_main
 wanderer_	lisitsyn: i saw the cmakelists.txt file
 wanderer_	and this is what i found
 wanderer_	IF (NOT ((CYGWIN AND ENABLE_TESTING) OR (DARWIN AND COMPILE_MODULAR_INTERFACE AND SWIG_VERSION VERSION_LESS "2.0.12") OR MatlabStatic))
 wanderer_	INCLUDE(CheckCXX11Features)
-!- Tanishq [~tanishq@1.186.12.154] has left #shogun []
 Saurabh7	lambday, same not much difference
 Saurabh7	lambday, but
 Saurabh7	can you try this https://gist.github.com/Saurabh7/9e83fca8763b45fd48cf
 Saurabh7	more iterations as in kmeans but dimensions not that big
@lambday	Saurabh7: are you using the compiler optimization flag?
 Saurabh7	 g++ -O3 -std=c++11 benchmark.cpp -I/usr/include/eigen3 -lshogun -lhayai_main
@lambday	linalg is all templates, so without -O3 it is doomed
@lambday	Saurabh7: let me try
@lambday	what's the result in your machine?
 Saurabh7	sec posting
 Saurabh7	lambday, https://gist.github.com/Saurabh7/41dc7227dd3380dace2b
 Saurabh7	looks like for smaller dimensions dynamic is slower
@lambday	Saurabh7: yeah I see.. for smaller vectors it is taking way too much time
@lambday	let me try with the naked linalg::T* thing
 Saurabh7	and many runs  as required for kmeans distance computations
-!- curiousguy13 [~curiousgu@59.177.198.117] has joined #shogun
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has quit [Remote host closed the connection]
@lambday	Saurabh7: for small dims, I noticed some really weird stuffs... check the 2nd set of benchmarks.. https://gist.github.com/lambday/7cbd77eb0530ad41d9f5
@lambday	dot_benchmark2.cpp and output2.log
@lambday	will check it in details
@lambday	for small dims, eigen map is an overkill
@lambday	in that case, the best solution seems to be to have a wrapper for naked ptr in linalg and use NATIVE
 Saurabh7	lamday, hmm looks weird native is just loops right
-!- travis-ci [~travis-ci@ec2-54-226-94-57.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/113893881
-!- travis-ci [~travis-ci@ec2-54-226-94-57.compute-1.amazonaws.com] has left #shogun []
 Saurabh7	but we need a generic solution since we dont knwo dimensions
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Quit: Leaving.]
@lambday	Saurabh7: not even the ballpark? for your knn use-case?
@lambday	can it be really huge, that's what I am asking
* lambday afk
 Saurabh7	yeah i mean the data can be any dimensions
 Saurabh7	not very huge that would be impractical
 Saurabh7	lambday, but good performance for say dimensions 10 to 1000 would be nice
 Saurabh7	lambday, let me know if i can help update something , i ahve to use it in this pr https://github.com/shogun-toolbox/shogun/pull/3042
 Saurabh7	gtg
-!- Saurabh7 [~Saurabh7@103.225.100.51] has quit [Quit: Leaving]
-!- wanderer_ [67157d4e@gateway/web/freenode/ip.103.21.125.78] has quit [Quit: Page closed]
-!- cache-nez [~cache-nez@93.175.2.172] has quit [Ping timeout: 264 seconds]
@lambday	lisitsyn: https://gist.github.com/lambday/7cbd77eb0530ad41d9f5
@lambday	any clue?
@lambday	:/
@lambday	check dot_benchmark2.cpp and output2.log
-!- lzc [~lzc@115.27.197.134] has quit [Quit: Leaving.]
-!- Nebula_ [~chatzilla@1.39.60.142] has joined #shogun
-!- Nebula_ [~chatzilla@1.39.60.142] has quit [Client Quit]
-!- curiousguy13_ [~curiousgu@120.56.229.207] has joined #shogun
-!- curiousguy13 [~curiousgu@59.177.198.117] has quit [Ping timeout: 260 seconds]
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
 lisitsyn	lambday: which results should I check?
@lambday	lisitsyn: check dot_benchmark2.cpp and output2.log
 lisitsyn	lambday: linalg_native is slow
 lisitsyn	is it?
@lambday	lisitsyn: na the raw ptr is extraordinarily fast
@lambday	also, native calls the same but it is slow
 lisitsyn	lambday: incredibly hard to read this thing
 lisitsyn	:D
@lambday	hehe yeah
@lambday	wait I am removing other two irrelevant files
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Client Quit]
@lambday	lisitsyn: check now
 lisitsyn	0.002 mus per iteration?
 lisitsyn	lambday: wasn't it optimized out somehow?
@lambday	I suspect the same
@lambday	how do I stop it from happening without compromising with -O3
@lambday	add the result?
 lisitsyn	yeah put it into volatile variable
 lisitsyn	lambday: I guess when you specify it even more it gives more ability to optimize it out
@lambday	lisitsyn: check this https://gist.github.com/lambday/7cbd77eb0530ad41d9f5
@lambday	this makes much more sense.. except the fact that, the cmath one is still faster while it uses the same as eigen_map test
@lambday	but I don't understand why linalg is so slow
-!- cache-nez [~cache-nez@93.175.2.172] has joined #shogun
-!- wanderer_ [67157d4e@gateway/web/freenode/ip.103.21.125.78] has joined #shogun
 wanderer_	hey
 wanderer_	so i am trying to include mosek support in shogun
 wanderer_	in the cmake file there's only one MOSEK_LIBRARY
 wanderer_	but according to the developers there are three *.so libraries
 wanderer_	am i doing something wrong?
 wanderer_	lisitsyn: are you free?
@wiking	lambday: so what was the cause?
@lambday	wiking: bummer - no clue
@lambday	wiking: from the benchmarks, the ref thing didn't make any (significant) difference
@wiking	but there's a diff?
@wiking	i mean between cmath:: and linalg:: ?
@lambday	cmath is faster (?) for small dimensions
@wiking	mmm ok
@lambday	for large enough dimensions, both are same
@lambday	that's understandable, since cmath one works with naked ptrs
@lambday	but I fail to understand why so much difference is there for smaller dimension, especially when both use eigen3 backend
@lambday	in earlier benchmarks I have always taken 1bil sized vectors... so never noticed the difference for smaller sized ones
-!- cache-nez [~cache-nez@93.175.2.172] has quit [Ping timeout: 244 seconds]
-!- lzc [~lzc@115.27.197.134] has joined #shogun
-!- cache-nez [~cache-nez@93.175.2.172] has joined #shogun
-!- rahul_red [~rahul__@183.83.51.4] has joined #shogun
-!- Saurabh7 [~Saurabh7@103.225.100.51] has joined #shogun
-!- Ameya [0e8b5206@gateway/web/freenode/ip.14.139.82.6] has quit [Ping timeout: 252 seconds]
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- cache-nez [~cache-nez@93.175.2.172] has quit [Ping timeout: 252 seconds]
-!- cache-nez [~cache-nez@93.175.2.172] has joined #shogun
-!- Ameya [0e8b5206@gateway/web/freenode/ip.14.139.82.6] has joined #shogun
-!- cache-nez [~cache-nez@93.175.2.172] has quit [Ping timeout: 244 seconds]
-!- cache-nez [~cache-nez@93.175.2.172] has joined #shogun
@lambday	HeikoS: sent you the mail.. I haven't CC-ed Arthur for this one since this is too much design/implementation details.. Let me know your thoughts when you get some free time..
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has joined #shogun
-!- lzc [~lzc@115.27.197.134] has quit [Quit: Leaving.]
@HeikoS	lambday: nice I saw it
@HeikoS	will read it a bit later today
@HeikoS	lambday: hows the linalg going you were discussing with the others?
@lambday	HeikoS: trouble in paradise.. for vectors with smaller dimensions, eigen3 linalg method is performing superbad whereas cmath one (which uses the same thing) performs better
@lambday	made multiple benchmarks but still not sure about the issue
@lambday	I always tested with larger dim vectors so never noticed the issue with small ones
@lambday	gotta check
@HeikoS	lambday: is it maybe the pass by value of SGVector?
@lambday	nope
@HeikoS	good to spot such things
@lambday	that hardly makes a difference
@lambday	yes thanks to Saurabh7
@HeikoS	huh?
@HeikoS	what else can it even be then?
@HeikoS	SIMD?
@lambday	it's calling eigen3 dot..
@HeikoS	maybe eigen3 hinders the c++ optimizer?
@lambday	both of 'em
@HeikoS	ah
@HeikoS	ok
@HeikoS	so it is linalg
@lambday	yep
@HeikoS	not eigen
@HeikoS	I see
@HeikoS	thats a good catch!
@lambday	but how I don't get
@HeikoS	Saurabh7: nice one
@HeikoS	no ideas at all?
@lambday	it's the *almost* exact same code
@HeikoS	lisitsyn has any ideas?
@HeikoS	and all the -O3 stuff is the same?
@lambday	none yet :'(
@HeikoS	virtual calls or something?
@lambday	no virtual in linalg
@HeikoS	mmh
@lambday	everything is compile-time.. it's supposed to be superfast
@HeikoS	what about comparing the generated code
@HeikoS	for a single dot call?
@lambday	yeah I'll check taht
@HeikoS	interesteing stuff
@HeikoS	ha!
@HeikoS	always surprises in these things
@lambday	the difference is significant.. like 2x
@lambday	but if you use vectors of dims = 1000 or more, it virtually becomes 0
@HeikoS	ok
@HeikoS	I see
 Saurabh7	HeikoS, :)
 Saurabh7	http://eigen.tuxfamily.org/index.php?title=Benchmark
 Saurabh7	he reason why the values are typically low for small sizes, is that in this benchmark we deal with dynamic-size matrices which are relatively inefficient for small sizes
 Saurabh7	dunno the reason but even they have to say the same
@HeikoS	Saurabh7: but if both methods call the eigen code, there cannot  be a difference
@HeikoS	both methods use eigen dynamic matrices right?
 Saurabh7	cmath uses different one Eigen::Map<const Eigen::VectorXd> ev1(v1,n);
@HeikoS	Saurabh7: so that might be it then
@HeikoS	lambday: thoughts?
-!- bollu [~Adium@122.179.44.227] has joined #shogun
-!- Saurabh7 [~Saurabh7@103.225.100.51] has quit [Ping timeout: 248 seconds]
@lambday	aah
@lambday	he went offline
@lambday	the d in VectorXd is for dynamic
@lambday	it's all dynamic afaik
@lambday	just the const won't make much of a differenc
@HeikoS	mmh ok
-!- Saurabh7 [~Saurabh7@103.225.100.51] has joined #shogun
@HeikoS	lambday: probably some template programming stuff
@HeikoS	very implicit
@HeikoS	so looking at the compiler output might be best
@lambday	HeikoS: that's something to think about...
@lambday	HeikoS: I'll try to get objdump
@lambday	Saurabh7:
@lambday	the d in VectorXd is for dynamic
@lambday	it's all dynamic afaik
 Saurabh7	oh
@lambday	oh sorry, the d is for double
 Saurabh7	or is it double ?
@lambday	the X is for dynamic
 Saurabh7	yeah xd xf
@lambday	Eigen::Dynamic, -1
@lambday	for static, things are way too fast
@lambday	Saurabh7: can you try an ugly thing? try linalg::implementation::dot<linalg::Backend::EIGEN3>::compute(a, b)
@lambday	without the wrapper
@lambday	sorry it would be
 Saurabh7	where ?
@lambday	linalg::implementation::dot<linalg::Backend::EIGEN3, SGVector<float64_t>>::compute(a, b)
@lambday	instead of linalg::dot(a, b)
 Saurabh7	lambday, https://gist.github.com/Saurabh7/6ab7c68501697f8de0d6
@lambday	:'(
@lambday	ok tomorrow I am profiling
@lambday	this is ridiculous
@lambday	but did the direct call give any advantages over the wrapper?
@lambday	Saurabh7: ^^
 Saurabh7	lambday, looks like it did actually
@lambday	how much?
 Saurabh7	sec
 Saurabh7	https://gist.github.com/Saurabh7/1df1ccbb6bfccd7fff94
 Saurabh7	this is before
@lambday	aha... wrapper is the villain
 Saurabh7	gottcha
@lambday	I'd anyway do massive refactoring with linalg soon..
@lambday	just the API calls would be same
@lambday	linalg::dot(...) allways
@lambday	so let's see
@lambday	as of now, I'd suggest that you use naked ptr
@lambday	or cmath
 Saurabh7	yup sounds good :)
 Saurabh7	let me knw if u want help
@lambday	Saurabh7: absolutely
@lambday	clueless about the reason btw.. this method sets Vector=SGVector<T> and then calls compute... the other method does just that..
@lambday	and it's static method, it's not like it creates an object of dot every single time!
@HeikoS	found it guys?
@HeikoS	wrapper method
@lambday	HeikoS: found the culprit.. but not sure why
@lambday	(!)
@HeikoS	ok good stuff
@HeikoS	first step ;)
@lambday	profiler to the rescue
-!- cache-nez [~cache-nez@93.175.2.172] has quit [Ping timeout: 244 seconds]
-!- cache-nez [~cache-nez@93.175.2.172] has joined #shogun
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has quit [Remote host closed the connection]
-!- leagoetz_ [~leagoetz@host-92-0-162-192.as43234.net] has joined #shogun
-!- bollu [~Adium@122.179.44.227] has quit [Quit: Leaving.]
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Quit: Leaving.]
-!- leagoetz_ [~leagoetz@host-92-0-162-192.as43234.net] has quit [Remote host closed the connection]
-!- bollu [~Adium@122.179.44.227] has joined #shogun
-!- cache-nez [~cache-nez@93.175.2.172] has quit [Ping timeout: 252 seconds]
-!- lambday [6a338432@gateway/web/freenode/ip.106.51.132.50] has quit [Quit: sleeping]
-!- Saurabh7 [~Saurabh7@103.225.100.51] has quit [Ping timeout: 244 seconds]
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has joined #shogun
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has quit [Remote host closed the connection]
-!- Saurabh7 [~Saurabh7@103.225.100.51] has joined #shogun
-!- rahul_red [~rahul__@183.83.51.4] has quit [Quit: Leaving]
-!- bollu [~Adium@122.179.44.227] has quit [Quit: Leaving.]
-!- wanderer_ [67157d4e@gateway/web/freenode/ip.103.21.125.78] has quit [Quit: Page closed]
 Ameya	I compiled the tests. 182 of the 512 are failing, most relating to python modular code. I did compile it with cmake -DENABLE_TESTING=ON -DPythonModular=ON .. as required by the README.developer.
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
 Ameya	Is this a problem specific to my computer, or is it really a common issue? I tried building it again and verifying that I should not have commited any obvious mistakes. I thought I should really ask it out.
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has joined #shogun
-!- shubham__ [uid57367@gateway/web/irccloud.com/x-ualbppdvjhuqfjrf] has joined #shogun
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Quit: Leaving.]
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has quit [Remote host closed the connection]
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Quit: Leaving.]
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
@HeikoS	lisitsyn: jojo
@HeikoS	I tried to fix this but failed
@HeikoS	https://travis-ci.org/shogun-toolbox/shogun/jobs/113893887#L3121
@HeikoS	maybe you can have a look
@HeikoS	?
@HeikoS	thanks!
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Quit: Leaving.]
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has joined #shogun
-!- albedo [~textual@191.189.12.228] has joined #shogun
-!- leagoetz [~leagoetz@host-92-0-162-192.as43234.net] has quit [Remote host closed the connection]
--- Log closed Sun Mar 06 00:00:25 2016
