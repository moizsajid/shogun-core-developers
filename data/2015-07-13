--- Log opened Mon Jul 13 00:00:50 2015
-!- thoralf [~thoralf@ip5b418b8d.dynamic.kabel-deutschland.de] has joined #shogun
-!- mode/#shogun [+o thoralf] by ChanServ
-!- thoralf [~thoralf@ip5b418b8d.dynamic.kabel-deutschland.de] has quit [Quit: Konversation terminated!]
-!- thoralf [~thoralf@ip5b418b8d.dynamic.kabel-deutschland.de] has joined #shogun
-!- mode/#shogun [+o thoralf] by ChanServ
-!- thoralf [~thoralf@ip5b418b8d.dynamic.kabel-deutschland.de] has quit [Quit: Konversation terminated!]
-!- HeikoS [~heiko@05419e79.skybroadband.com] has quit [Read error: No route to host]
-!- HeikoS [~heiko@05419e79.skybroadband.com] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@05419e79.skybroadband.com] has quit [Client Quit]
 shogun-buildbot	build #1023 of nightly_default is complete: Failure [failed test]  Build details are at http://buildbot.shogun-toolbox.org/builders/nightly_default/builds/1023  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>, Bj?rn Esser <bjoern.esser@gmail.com>
-!- shaochuan [~shaochuan@c-50-184-81-180.hsd1.ca.comcast.net] has joined #shogun
-!- shaochuan [~shaochuan@c-50-184-81-180.hsd1.ca.comcast.net] has quit [Remote host closed the connection]
-!- shaochuan [~shaochuan@2601:647:4600:fac5:71c9:6bdb:8191:ecb8] has joined #shogun
-!- shaochuan [~shaochuan@2601:647:4600:fac5:71c9:6bdb:8191:ecb8] has quit [Ping timeout: 248 seconds]
-!- vortex_ape [~vortex_ap@120.59.75.202] has joined #shogun
-!- vortex_ape [~vortex_ap@120.59.75.202] has quit [Client Quit]
-!- vortex_ape [~vortex_ap@120.59.75.202] has joined #shogun
-!- PirosB3 [~pirosb3@host246-221-dynamic.19-79-r.retail.telecomitalia.it] has joined #shogun
-!- vortex_ape [~vortex_ap@120.59.75.202] has quit [Ping timeout: 256 seconds]
-!- HeikoS [~heiko@05419e79.skybroadband.com] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@05419e79.skybroadband.com] has quit [Ping timeout: 246 seconds]
-!- HeikoS [~heiko@host-92-28-127-28.as13285.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@host-92-28-127-28.as13285.net] has quit [Quit: Leaving.]
-!- HeikoS [~heiko@nat-162-94.internal.eduroam.ucl.ac.uk] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- PirosB3 [~pirosb3@host246-221-dynamic.19-79-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
-!- Netsplit *.net <-> *.split quits: @besser82
-!- Netsplit *.net <-> *.split quits: shogun-buildbot
-!- Netsplit over, joins: shogun-buildbot
-!- Netsplit over, joins: besser82
-!- mode/#shogun [+o besser82] by ChanServ
-!- PirosB3 [~pirosb3@host246-221-dynamic.19-79-r.retail.telecomitalia.it] has joined #shogun
@wiking	ping
-!- HeikoS [~heiko@nat-162-94.internal.eduroam.ucl.ac.uk] has quit [Quit: Leaving.]
-!- PirosB3 [~pirosb3@host246-221-dynamic.19-79-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
@wiking	stamm stamm
@wiking	nobody stma?
@wiking	:D
-!- lambday [6a3386ac@gateway/web/freenode/ip.106.51.134.172] has joined #shogun
-!- mode/#shogun [+o lambday] by ChanServ
-!- PirosB3 [~pirosb3@host246-221-dynamic.19-79-r.retail.telecomitalia.it] has joined #shogun
-!- PirosB3 [~pirosb3@host246-221-dynamic.19-79-r.retail.telecomitalia.it] has quit [Quit: PirosB3]
@besser82	wiking, I'm hier for Stamm ^_^
* besser82 hands some virtual steins out to other folks
-!- yorkerlin [b8af2f1e@gateway/web/freenode/ip.184.175.47.30] has joined #shogun
-!- HeikoS [~heiko@05419e79.skybroadband.com] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- thoralf [~thoralf@ip5b418b8d.dynamic.kabel-deutschland.de] has joined #shogun
-!- mode/#shogun [+o thoralf] by ChanServ
@thoralf	Heyho.
@HeikoS	thoralf: yo
@HeikoS	thoralf: hey man good to see you!
-!- iglesiasg [~iglesias@524B8E0B.cm-4-4c.dynamic.ziggo.nl] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@iglesiasg	Hello!
@HeikoS	iglesiasg: hey!
@lambday	hello!
@HeikoS	iglesiasg: long time no see
@HeikoS	lambday: hey man!
 yorkerlin	hello
@HeikoS	yorkerlin: hi!
@iglesiasg	HeikoS: definitely :)
@thoralf	Full house :)
@iglesiasg	how are you guys doing?
@lambday	HeikoS: hey! :)
@lambday	iglesiasg: over-eating :(
@lambday	yorkerlin: congrats man! :)
 yorkerlin	Hi, guys! :)
@HeikoS	besser82: you are here too?
@iglesiasg	lambday: good food? :)
@besser82	HeikoS, sure
@HeikoS	besser82: cool, hi
@lambday	iglesiasg: self-made Indian dishes ;)
@HeikoS	lambday: mjam
@besser82	hi, HeikoS
@HeikoS	BTW guys, I put up a small list of things we could talk about here: https://github.com/shogun-toolbox/shogun/wiki/Stammtisch-2015-07-15
* besser82 has some german wheat-beer  :P
 yorkerlin	cool
@HeikoS	besser82: haha nice. I have German homemade bread
@iglesiasg	lambday: that sounds good. There is an Indian guy in my dorm and I am trying some of his Indian food from time to time. I like it!
@HeikoS	wiking: around?
@besser82	thoralf, hey!  =)
@lambday	iglesiasg: haha :D great man!
@lambday	lisitsyn: there?
@HeikoS	so guys, first thing I wanted to say is a welcome to yorkerlin (in case your spam filter blocks shogun-list ;) )
@besser82	yorkerlin, Welcome on board!  :D
@HeikoS	yorkerlin will probably be cursing us for having added him after he realises all the stuff he has to do now ;)
@besser82	d'oh, yes!  :P
@iglesiasg	welcome, Wu!
 yorkerlin	thanks for all of you guys:)
@HeikoS	Apart from that, it's probably a good idea to update everyone on whats going on (or WAS going on until spring) on all the construction sites of Shogun
@HeikoS	see the list in the wiki
@HeikoS	dont know wheter kevin will be around
@HeikoS	But I guess one good thing would be if everyone commented on his new website draft
@HeikoS	https://github.com/shogun-toolbox/shogun-web2
@HeikoS	in particular here: http://shogun-web.herokuapp.com/
@HeikoS	there are already lots of discussions in the issues of the repo
 yorkerlin	look cool :)
@iglesiasg	the site looks pretty awesome
@lambday	wow this is responsive!
@thoralf	+1
@HeikoS	yorkerlin: still a draft so needs lots of feedback
@lambday	bootstrap?
@HeikoS	lambday: I think partly
@lambday	the red fonts on the bottom probably can be a bit more readable with some other color?
@HeikoS	kevin made a lot of effort for this, so lets be responsive and give feedback so that this grows into something mature
@HeikoS	lambday: issue! ;)
@iglesiasg	lambday: https://github.com/shogun-toolbox/shogun-web2/issues/20
@iglesiasg	;)
@HeikoS	iglesiasg: haha
@lambday	iglesiasg: haha
@HeikoS	iglesiasg: brewed mustard brown!
 yorkerlin	ic haha
@HeikoS	lambday: could you give some updates on the linalg? I have no idea what was the last thing that was worked on
@HeikoS	yorkerlin: you probably have some requirements to that thing, could be good to get this going
@lambday	HeikoS: elementwise unary operation..
@HeikoS	lambday: ah yes, people are using that now I think
@lambday	HeikoS: we planned for binary ones but then I got lazy
@HeikoS	lambday: I thought it might be cool to put a roadmap for linalg somewhere
@HeikoS	maybe in the wiki page your wrote for it
@lambday	HeikoS: yeah that thing is helpful.. we had some impressive benchmark with GPU for element-wise ops
@HeikoS	lambday: I remember that
@HeikoS	lambday: really liked that and that swhy I think it would be good to keep that going
@lambday	HeikoS: yeah that would be good
@HeikoS	https://github.com/shogun-toolbox/shogun/wiki/README_linalg
@HeikoS	yorkerlin: needs linear solve like operations all the time
@lambday	HeikoS: okay I'll get back to linalg
@HeikoS	lambday: maybe the best way is to add things that are needed most, yorkerlin can probably tell you
 yorkerlin	I will post some features/operations required for GP inference
@HeikoS	I think there were some issues related to that somewhere
@lambday	yorkerlin: sounds great, Now you can assign the task to me (or anybody)
@lambday	I remember having a bunch of issues I assigned to myself but didn't quite finish them
@HeikoS	lambday: we could also rework the kernel framework using that
@HeikoS	in particular kernels that are based on pairwise distances
@HeikoS	the matrix computations can be done on GPU: both pairwise distances and the unary operations
@HeikoS	esben had some ideas
 yorkerlin	let me look at my codes first. @HeikoS, we need to decide which inference methods are required to use GPU speedup
@HeikoS	yorkerlin: I would go for matrix factorisations and multiplications
@lambday	HeikoS: that sounds really great! would be cool if we can GPUize this
@HeikoS	yorkerlin: but you know what operations are needed most
@HeikoS	yorkerlin: computing kernel matrices on GPU is also interesting for GP
 yorkerlin	yes
 lisitsyn	oh
@HeikoS	so cann pull that out into a base class (I think it already is partly) and then overload the kernel matrix methods
 lisitsyn	hey guys
@HeikoS	lisitsyn: hi!
@iglesiasg	lisitsyn: hey!
@lambday	I don't recall what happened to Esben's PR that spawn this element-wise idea
@lambday	lisitsyn: hello :D
@HeikoS	lisitsyn: hey man how are things
 yorkerlin	GaussianARDKernel is used linalg now.
@HeikoS	lambday: let me dig it out
 lisitsyn	HeikoS: just got home and forgot about our party :)
@HeikoS	lambday:  https://github.com/shogun-toolbox/shogun/pull/2818
@HeikoS	lisitsyn: just starting ;)
 lisitsyn	ok cool
 lisitsyn	HeikoS: have you seen I pushed that range thing I promised?
@lambday	HeikoS: okay thanks..
 lisitsyn	you can now use python-like loops
 yorkerlin	cool!
@lambday	lisitsyn: cool stuff man
 lisitsyn	lambday: use it! :)
@lambday	lisitsyn: just watch for my next PR ;)
 lisitsyn	lambday: what is it?
@lambday	lisitsyn: I mean you'll see that I'm using range :D
 lisitsyn	ahh
 lisitsyn	ok guys I am now following your discussion before
 lisitsyn	not*
 lisitsyn	so let me talk on myself haha
@thoralf	lisitsyn: :D
 lisitsyn	Im going to push one more thing soon
 lisitsyn	that's generic get/set for sgobject using tags
@lambday	lisitsyn: what's the idea?
 lisitsyn	let me talk C++
@lambday	yes sir
 lisitsyn	T get(Tag<T> tag);
 lisitsyn	void set(Tag<T> tag, T value);
 lisitsyn	that's it
@thoralf	lisitsyn: How would we use it?
@HeikoS	lisitsyn: what about some grepped auto-refactoring of auto? :)
 lisitsyn	say you have object
 lisitsyn	obj
 lisitsyn	oh say its kernel
 lisitsyn	gaussian kernel
@lambday	lisitsyn: this would work in the modular interface?
 lisitsyn	gk.set(gk.width, 3.0)
 lisitsyn	yes I think any language should support it
@thoralf	Ah.
 lisitsyn	with one restriction
 lisitsyn	we have to restrict possible types of parameters
 lisitsyn	but I think it is double, int, SGObject* and some base types
@HeikoS	lisitsyn: like all the types for swig right?
 lisitsyn	no
 lisitsyn	I think we should use a few
 lisitsyn	we need really base classes
@HeikoS	lisitsyn: for types?
 lisitsyn	the same types would be visible from plugins
 lisitsyn	its the next step
@HeikoS	lisitsyn: maybe examples would help, I am lost ;)
 lisitsyn	hmm ok
 lisitsyn	class GaussianKernel { static Tag<double> width; }
 lisitsyn	that's how we declare parameter
 lisitsyn	Tag<?> could be basically anything but if we want speed and plugins
 lisitsyn	we should restrict what T is
 lisitsyn	say Tag<LinearMachine> is ok
 lisitsyn	but Tag<SVM> is not
 lisitsyn	otherwise SVM is not a plugin
 lisitsyn	but a part of the core
 lisitsyn	anyone following? :)
@HeikoS	lisitsyn: would that be part of aer?
 lisitsyn	HeikoS: I'll kill aer and will push ideas from it into shogun gradually
 lisitsyn	that's how I think it would work
@lambday	lisitsyn: I remember you saying that we must need all the base classes in the core - so kinda following :/
@HeikoS	lisitsyn: ok also good
@HeikoS	lisitsyn: just want to say, I met a couple of people who needed a library that does Shogun's swig magic for their project, so could be good to pull that out
@HeikoS	and the getter/Setter stuff is part of that
 lisitsyn	ah
 lisitsyn	you mean sublibrary is better?
@HeikoS	lisitsyn: yeah
 lisitsyn	hmm why not
@HeikoS	like something independent of Shogun that allows to expose any class framework to all modular languages
 lisitsyn	yeah I like this idea
@lambday	+1
@HeikoS	sonney2k also wanted to do this ages ago
@HeikoS	we talked about it GSoC 2013 summit ;)
@HeikoS	while hiking through the desert
 lisitsyn	I like it naming wise
 lisitsyn	shogun rules a few libs
 lisitsyn	and decoupling is good
@HeikoS	yeah exactly
 lisitsyn	so my plan is
 lisitsyn	to add tags
 lisitsyn	to add generic class that supports tags
 lisitsyn	and inherit sgobject from it
 lisitsyn	so we get kool thing
 lisitsyn	then maybe we should think really really hard
@lambday	can we get rid of manual refcounting in the process of that?
 lisitsyn	hmm yeah
 lisitsyn	^ .. really really hard to select base classes
 lisitsyn	that's *stable* API of shogun
 lisitsyn	it could lead to some frustration actually
 lisitsyn	once pluginized you can't produce many methods
 lisitsyn	it is rather data driven
 lisitsyn	you pull some kind of task
 lisitsyn	and parameters
@iglesiasg	sorry guys, got to leave. Will catch you later!
-!- iglesiasg [~iglesias@524B8E0B.cm-4-4c.dynamic.ziggo.nl] has quit [Quit: leaving]
 lisitsyn	ok we will miss you :)
 lisitsyn	anyone? :)
@lambday	yeah
-!- curiousguy13 [~curiousgu@59.177.199.41] has joined #shogun
@lambday	I'd really like to work on that - so maybe we should discuss this a bit more
@HeikoS	igbye
@lambday	lisitsyn: I read somewhere some issues regarding binary compatibility
 lisitsyn	ah about binary
 lisitsyn	if we talk about C++ there is no binary thing
@HeikoS	lisitsyn: I dont get that
 lisitsyn	C++ is doomed abi-wise
@lambday	so someone suggested to use C for some parts - since in terms of binary C is better than C++
 lisitsyn	yes
 lisitsyn	C ABI is rock stable
@lambday	yeah
 lisitsyn	HeikoS: what needs explanation?
@lambday	so if we aim for platform independence then that is also a matter of concern
 lisitsyn	lambday: yeah we should develop C++ API
 lisitsyn	then C layer
@lambday	lisitsyn: exactly
@HeikoS	lisitsyn: Im not the c/C++ expert
 lisitsyn	that's the best way I believe
 lisitsyn	HeikoS: yeah I just don't get what you missed
@HeikoS	lisitsyn: what does that mean in practice
@HeikoS	ok
@HeikoS	so why the seperation?
@HeikoS	what would each layer do?
@lambday	lisitsyn: I'll read that article in details - it had some serious good stuffs
@HeikoS	lisitsyn: would that not be complicated?
 lisitsyn	hmm
 lisitsyn	quite a few questions ;)
 lisitsyn	what separation?
@HeikoS	c/C++
 lisitsyn	ah
 lisitsyn	ok C++ supports function overloading
@HeikoS	lisitsyn: does that also get rid of the swig madness in terms of memory etc?
 lisitsyn	HeikoS: hmm not sure
 lisitsyn	maybe yes
 lisitsyn	if we get with plugins yes
 lisitsyn	I mean if we use plugin structure
 lisitsyn	it would be like a few seconds to compile I think
 lisitsyn	it won't be that big
@HeikoS	thats good
 lisitsyn	but API would be quite strict
@HeikoS	what does that mean?
 lisitsyn	you won't be able to do same things
@HeikoS	concrete?
 lisitsyn	say you want to develop a new class
 lisitsyn	that supports FooBar()
 lisitsyn	I don't see good way to support FooBar() with plugins unless there is a base class in our stable API
 lisitsyn	that supports FooBar()
@HeikoS	???
@HeikoS	haha
@HeikoS	I am so lost
 lisitsyn	ok
 lisitsyn	say you have SVM
@HeikoS	what is FooBar() ? an instance? a method?
 lisitsyn	method
@HeikoS	method of a new class?
@lambday	you can only do things that can be overridden?
 lisitsyn	yes
 lisitsyn	yes
@lambday	okay
 lisitsyn	you can provide only methods from the API
 lisitsyn	or it would be some trick
 lisitsyn	to call it
 lisitsyn	ok let me talk code
 lisitsyn	svm = shogun.machine("SVM");
 lisitsyn	bam
 lisitsyn	we get svm
 lisitsyn	we can train svm
 lisitsyn	svm.train();
 lisitsyn	but we can't get support vectors
@lambday	ah
 lisitsyn	because support vectors are not in our *generic* API
 lisitsyn	what we would have to do is
@HeikoS	lisitsyn: but why is that good then?
 lisitsyn	sv = svm.get("support_vectors");
 lisitsyn	like that
@HeikoS	if one cannot add custom methods, thats quite a restriction
 lisitsyn	HeikoS: because it is the only way for plugins
@lambday	have some generic thing in the base which would allow to do subclass specific things in overridden way
@HeikoS	what about void precompute_alpha()
 lisitsyn	HeikoS: it would be svm.call("precompute_alpha"); or so
 lisitsyn	or
 lisitsyn	svm.do(svm.operations.precompute_alpha);
@HeikoS	not sure whether I like that to be honest
 lisitsyn	this is also possible
@HeikoS	convoluted
 lisitsyn	HeikoS: yes but no swig problems and very dynamic
@HeikoS	lisitsyn: sure agreed
@lambday	2nd one sounds better
 lisitsyn	yes
@lambday	I hate string tags
 lisitsyn	yes strings suck
@HeikoS	Shogun is a ML toolbox though, we want users and developers to be able to put things in the code that allow for custom computations
@HeikoS	so at the bottom of the class tree I expect there to be tons of custom operatilons
@HeikoS	operations
 lisitsyn	yeah
 lisitsyn	but they should not be exposed
 lisitsyn	that enforces a good practice actually
@HeikoS	exposed?
 lisitsyn	but too strict
@lambday	lisitsyn: why classname.do(...) cannot be exposed?
@HeikoS	to swig? or to public
 lisitsyn	yeah I mean you do custom operation just to train machine
 lisitsyn	or something like that
@HeikoS	lisitsyn: think about all the stuff one can do after trainnig
@HeikoS	lisitsyn: SVs, get_w, labels_to_prbabilities
 lisitsyn	you mean like various inference things?
@HeikoS	yeah
@HeikoS	get_inducing_points
 lisitsyn	well
@HeikoS	get_posterior_covariance
@HeikoS	etc
 lisitsyn	what I propose ruins syntax
 lisitsyn	that's true
 lisitsyn	but you get other things
 lisitsyn	you can compile your plugin standalone
 lisitsyn	it is a second and you run it
 lisitsyn	with such development cycle you can be quite fast
@HeikoS	true,
@HeikoS	but in practice?
@HeikoS	I use ccache and this is also very fast
@HeikoS	ccache-swig also seems to work nowadays
@HeikoS	I like the getter/stter thing though
 lisitsyn	well I don't know
@HeikoS	and of course that things are modular
@HeikoS	any other projects having experience on such a design?
@HeikoS	wiking: mentioned something a while ago
-!- vortex_ape [~vortex_ap@120.59.76.228] has joined #shogun
 lisitsyn	hmm I didn't do any research on that
@HeikoS	lisitsyn: I think best thing would be to get an estimate on effort and improvement
@HeikoS	its quite a major change
 lisitsyn	that's pretty hard
@lambday	lisitsyn: could you please explain a bit about why the do() method that you propose cannot be exposed to modular interface?
 lisitsyn	lambday: they can
@lambday	lisitsyn: so are we actually losing anything with that? I mean it's mostly syntactics
 lisitsyn	yes mostly syntax
-!- vortex_ape [~vortex_ap@120.59.76.228] has quit [Remote host closed the connection]
@HeikoS	lisitsyn: maybe prototype is a good idea, but dont know
 lisitsyn	it could be pretty ugly syntax  to be honest
@HeikoS	lisitsyn: hey, since I have to leave soon
 lisitsyn	HeikoS: its controversial I don't know if it is good
@lambday	I don't think then that it would stand in the way of our iterating addition model of dev
@HeikoS	lisitsyn: also wanted to talk a bit about manual project
 lisitsyn	ah
 lisitsyn	yeah
 yorkerlin	One cmake question: Can we choose compile a modular (say, GP modular) without compiling all irrelevant ones (eg, SVM)?
 lisitsyn	yorkerlin: pretty hard
@HeikoS	yorkerlin: good point
@HeikoS	we have a demo for that
@HeikoS	thoralf: did that
@HeikoS	I think this might be good alternative in fact
 lisitsyn	guys I have to leave for 15 minutes
 lisitsyn	HeikoS: will you be gone then?
@HeikoS	lisitsyn: yeah
 lisitsyn	argh
@HeikoS	well
 lisitsyn	ok so
@HeikoS	Im online most days
 lisitsyn	ah
 lisitsyn	ok
@HeikoS	just good to get the talking going
 lisitsyn	yeah
@HeikoS	yorkerlin, thoralf did a bash based version of that
@HeikoS	ok
 lisitsyn	HeikoS: can you push me a bit on the manual thing then
@HeikoS	I leave you guys to it
@HeikoS	lisitsyn: yeah will do ;)
@HeikoS	thats almost done so good to fnish
@HeikoS	and then let people populate
 yorkerlin	\ping @HeikoS any link?
 lisitsyn	lambday: ok when I am back we can discuss api :)
@HeikoS	yorkerlin: searching
@lambday	lisitsyn: alright.. see you
 yorkerlin	another question  /ping @lambday, if we use SGMatrix, can we choose use GPUMatrix and CPUMatrix on-the-fly or on compilation time
-!- HeikoS [~heiko@05419e79.skybroadband.com] has quit [Quit: Leaving.]
@lambday	yorkerlin: I'm afraid not - I remember discussing about this but we dumped that idea for some valid reasons - SG is always CPU
@lambday	yorkerlin: or maybe I didn't understand your question?
-!- vortex_ape [~vortex_ap@120.59.76.228] has joined #shogun
 yorkerlin	so we have to GPU matix in codes.
@lambday	yorkerlin: as of now, yes.
@lambday	yorkerlin: since the use-case is pretty application specific, I think it is good that way
 yorkerlin	if we do not have supported GPU, the GUP matrix will use eigen3?
 yorkerlin	if we have GPU matrix and we use linalg,
@lambday	yorkerlin: nope. GPU is basically ViennaCL matrixbase syntactic sugar - so in absence of GPU, it will use CPU just like ViennaCL does
 yorkerlin	ok. seems good.
@lambday	if you don't have ViennaCL, you miss the entire GPUMatrix class
 yorkerlin	about kernel part. For GPU speedup, currently kernel returns SGMatrix.
 yorkerlin	if we want to use GPU matrix, currently we have to copy SGMatrix to GPUMatrix
 yorkerlin	right?
@lambday	yorkerlin: yeah that's awful.
@lambday	yorkerlin: but you don't wanna change that in the base
@lambday	since not always we'll use GPU for kernel computation (so far I understood from the discussion)
 yorkerlin	yes. GPU speed up for kernel computation is a next step
@lambday	or maybe I miss something here
@lambday	yorkerlin: can we do that for *ALL* the kernels?
-!- vortex_ape [~vortex_ap@120.59.76.228] has quit [Ping timeout: 246 seconds]
 yorkerlin	I am not familiar with many kernels.
@lambday	neither am I.. Heiko is the guy to ask then
 yorkerlin	the issue is if viennaCL is missing, what can we do
@lambday	yorkerlin: well - since we decided to go with ViennaCL for our GPU stuffs, we'll miss all of that
@lambday	other solution is to write all those linalg ops using OpenCL or CUDA ourselves which is bad
@lambday	yorkerlin: why are you concerned about viennacl being missing?
 yorkerlin	since kernel computation is essnetial for shogun, if we use viennaCL for kernel computation, what can we do?
 yorkerlin	and viennaCl is missing
@lambday	yorkerlin: hmm ok.. gotta have some fallback mechanism
@lambday	yorkerlin: I don't think that's gonna be hard - just some additional code
 yorkerlin	ok. seems good
 yorkerlin	 I will soon send PRs about the stochastic inference methods for regression.  For now, these methods use eigen3.  We can use linalg to replace eigen3 used in these methods. Because these methods can train millions of data points, I think /ping @lambday we can start from here.
@lambday	yorkerlin: what kind of linalg operations do you need there?
@lambday	yorkerlin: yeah that sounds good
 yorkerlin	cholesky
@lambday	okay - hmm we don't have that yet
@lambday	I think getting linalg in a matured state is gonna take a while
@lambday	:(
 yorkerlin	ok.
 yorkerlin	once linalg is stable, we can start work on it
@lambday	yorkerlin: yeah! if you keep pushing me for new stuffs, then I'll get motivated a bit more :D
 yorkerlin	cool! :)  I leave now. I will post a issue about this.
@lambday	yorkerlin: what you're doing BTW? Masters?
@lambday	yorkerlin: okay man ttyl :)
-!- yorkerlin [b8af2f1e@gateway/web/freenode/ip.184.175.47.30] has quit [Quit: Page closed]
 lisitsyn	lambday: ok I am backz
@lambday	lisitsyn: hey..
@lambday	so about aer
 lisitsyn	yes
 lisitsyn	lambday: anything you want to clarify?
@lambday	lisitsyn: Heiko had some valid point about usability - I'm not sure how to manage it properly
@lambday	from what I understood, with the do() stuffs we can pretty much achieve anything custom
 lisitsyn	yeah probably yes
@lambday	lisitsyn: how does this go with d-ptrs ?
@lambday	do() thing is in the outer class then custom methods are in the inner
 lisitsyn	yes
 lisitsyn	all would be in .cpp files I think
@lambday	yeah
@lambday	and there will be enums?
 lisitsyn	for operations?
 lisitsyn	hmm I just realized
 lisitsyn	we have to use strings
@lambday	since functors are not accessible from modular :/
 lisitsyn	say svm provides support_vectors
@lambday	ok
 lisitsyn	we'd have to svm.get("support_vectors")
 lisitsyn	or add a tag for that
@lambday	tag thing is faster
 lisitsyn	yeah and it is typed
@lambday	but ugly if mapped to modular
@lambday	for all T you have to give them new names
@lambday	right?
 lisitsyn	no
 lisitsyn	overloading would work
@lambday	how one creates Tag<T> from python modular then?
 lisitsyn	yes
 lisitsyn	that's the point
 lisitsyn	here you'd need new names
 lisitsyn	*but*
 lisitsyn	you can provide them out of box
 lisitsyn	like gaussian kernel width is a member of gaussian kernel
 lisitsyn	width tag*
@lambday	oh i see
 lisitsyn	but no plugins then haha
@thoralf	Someone mentioned my bash-hack to compile a incomplete version of SHOGUN.
@thoralf	https://github.com/tklein23/shogun-partial-build
 lisitsyn	oh
 lisitsyn	wu is gone
 lisitsyn	but thanks
@lambday	lisitsyn: because gaussian goes to core then? :/
 lisitsyn	yeaas
 lisitsyn	lambday: I broke my head with that already
 lisitsyn	whatever you do you meet some other restriction :D
@lambday	argh
@lambday	I am starting to wonder if plugin is really for the development model we have here at Shogun :/
 lisitsyn	I don't know
@lambday	lisitsyn: okay we can forget tag then - strings are fine
 lisitsyn	no we should still use tags I think
 lisitsyn	if you use strings you'd have to case anyway
 lisitsyn	so its cheaper to create tag from string once
 lisitsyn	s/case/cast
@lambday	hmm
@lambday	lisitsyn: going to sleep man.. I'll see if I can think of something useful.. in any case, we'll have to do small poc for an idea..
@lambday	lisitsyn: see you soon
-!- lambday [6a3386ac@gateway/web/freenode/ip.106.51.134.172] has quit [Quit: Leaving.]
 lisitsyn	lambday: ok see you
@thoralf	Bye.
-!- thoralf [~thoralf@ip5b418b8d.dynamic.kabel-deutschland.de] has left #shogun ["Konversation terminated!"]
-!- lupinix [~quassel@fedora/lupinix] has quit [Ping timeout: 246 seconds]
-!- lupinix [~quassel@fedora/lupinix] has joined #shogun
--- Log closed Tue Jul 14 00:00:52 2015
