--- Log opened Fri Nov 11 00:00:45 2011
-!- blackburn [~blackburn@188.168.4.136] has quit [Quit: Leaving.]
-!- sonne|work [~sonnenbu@194.78.35.195] has quit [Ping timeout: 256 seconds]
-!- sonne|work [~sonnenbu@194.78.35.195] has joined #shogun
-!- ron___ [54e4e203@gateway/web/freenode/ip.84.228.226.3] has joined #shogun
 ron___	hi there
 ron___	re installing ruby modular over osx
-!- ron___ [54e4e203@gateway/web/freenode/ip.84.228.226.3] has quit [Ping timeout: 265 seconds]
-!- blackburn [~blackburn@83.234.54.236] has joined #shogun
 blackburn	sonney2k: I would ask you to answer alessandro qs, I am afraid to get wrong and busy with java memleaks :(
-!- blackburn [~blackburn@83.234.54.236] has quit [Quit: Leaving.]
-!- blackburn [~blackburn@188.168.4.41] has joined #shogun
 CIA-37	shogun: Soeren Sonnenburg master * r2f2a895 / (2 files in 2 dirs): Fix compilation under cygwin and for octave 3.4.x - http://git.io/FpEMPQ
 blackburn	sonney2k: around?
 blackburn	sonney2k: need help here
 blackburn	customkernel is buggy..
 blackburn	in particular it leaks memory :)
@sonney2k	customkernel is buggy ?
@sonney2k	hard to believe...
 blackburn	sonney2k: try valgrind
 blackburn	sonney2k: okay so the process is: DoubleMatrix passes to typemap, SGMatrix is created with no do_free flag
 blackburn	then kernel initializes with another one matrix (but float32)
 blackburn	and I guess this SGMatrix is not being deleted
 blackburn	I see valgrind warnings in python
 blackburn	that's definitely a problem
 blackburn	sonney2k: where SGMatrices are being freed?
 blackburn	e.g. k = kernel.get_kernel_matrix()
 blackburn	what frees k?
 CIA-37	shogun: Sergey Lisitsyn master * r2478ae7 / src/shogun/kernel/Kernel.h : Fixed kernel get kernel matrix routine - http://git.io/x2WmFg
@sonney2k	so you are only talking about memory leaks?
 blackburn	sonney2k: sure
 blackburn	I think I found a way
 blackburn	sonney2k: that's madeleine's issue
@sonney2k	recall - we have trace malloc support
@sonney2k	so you could just compile with that and see what's wrong
 blackburn	sonney2k: remind me how to use it
 blackburn	I know what is wrong
@sonney2k	configure flag
@sonney2k	ok
 blackburn	sonney2k: but I'm unsure about this decision
 blackburn	sonney2k: see - if we do set_full_kernel_matrix_from_full
 blackburn	we definitely should to destroy matrix that was passed
@sonney2k	not for the 32bit variant
 blackburn	sure
 blackburn	for 64 one
@sonney2k	so just call free_matrix() at the end of the  routine
 blackburn	sonney2k: free flag is not being set in the right way
 blackburn	in java,python..
 blackburn	I guess for now it would be better to destroy it
 blackburn	no chance of reused SGMatrix mapped from say DoubleMatrix
 blackburn	there would be different matrices for every typemapping..
@sonney2k	no that would be stupid
@sonney2k	hmmhh
@sonney2k	the only other idea I have is to fix the typemaps
 blackburn	sonney2k: freeing matrix is as stupid as destroy it
@sonney2k	why?
@sonney2k	the problem is that from C++ code one usually would only want to pass a ptr
 blackburn	because it is being destroyed in both ways, but if we call free_matrix we could leak memory because of not proper typemaps
@sonney2k	nope
 blackburn	then check free_matrix code
@sonney2k	if free_matrix() is called but the free flag is not set it won't be freed
@sonney2k	I did
 blackburn	yes, won't be freed
 blackburn	but lost a pointer
@sonney2k	no
@sonney2k	that is a local argument
@sonney2k	not a reference
@sonney2k	so only inside the function the ptr is reset
 blackburn	sonney2k:  matrix=NULL??
@sonney2k	yes exactly
@sonney2k	won't change anything outside the function
 blackburn	sonney2k: T* matrix??
@sonney2k	?
 blackburn	what is you are talking about? we will lost the pointer if it is a SGMatrix generated by typemap
@sonney2k	nope
 blackburn	sure we will
@sonney2k	this is not java where everything is a refernce
@sonney2k	it is a local variable we are changing
@sonney2k	so only this local matrix variable is gone
 blackburn	sonney2k: interfaces/java_modular/swig_typemaps.i:359
 blackburn	sonney2k: SGMatrix created with data copied from matrix, then it passes to CustomKernel(SGMatrix<float64_t>)
 blackburn	if do_free is false
 blackburn	and we call free_matrix
@sonney2k	sure that is a different issue
 blackburn	sonney2k: same for python I guess
 blackburn	I'll check
@sonney2k	I would say - we currently have the assumption that every SGMatrix/Vector etc object passed into shogun is owned by shogun
 blackburn	so
 blackburn	?
@sonney2k	so destroy is very valid
 blackburn	I think the same
 blackburn	moreover it fixes a bug and I can continue to live
 blackburn	:D
@sonney2k	however, the proper fix would be to set the do_free flag in the typemaps
@sonney2k	and use free_matrix()
 blackburn	sonney2k: okay, TODO
@sonney2k	this way a C++ function could just pass a ptr that is then converted to float32
 blackburn	yes I understand C++ issue
@sonney2k	the content I mean is converted from float54 to float32
 blackburn	sure sure
@sonney2k	problem is that we for exampel in the set_full_kernel_matrix_from_full for float32 types we need to ASSERT() that the free flag is set
@sonney2k	otherwise we cannot own the object
@sonney2k	or we would need some helper copy function or so
 blackburn	sonney2k: that's crazy
 blackburn	we moving memory all around :)
@sonney2k	what is crazy
 blackburn	but no way to avoid this..
@sonney2k	well we have to avoid moving memory at all cost
 CIA-37	shogun: Sergey Lisitsyn master * r4b4d8c5 / src/shogun/kernel/CustomKernel.h : Fixes memory leak on custom kernel creation - http://git.io/FHe61w
@sonney2k	another regression bug gone...
@sonney2k	please also create a bug report to fix the typemaps / utilize the do_free stuff
@sonney2k	blackburn, btw cygwin did compile today :)
@sonney2k	I am missing swig2.0.4 so I couldn't compile octave_modular
 blackburn	sonney2k: nice
 blackburn	why you didn't install it?
@sonney2k	but python_modular+static, cmdline/libshogun, octavte_static all worked
@sonney2k	it is not in cygwin
 blackburn	ah I see
@sonney2k	there is only 1.3.x
@sonney2k	1.3.40 IIRC
 blackburn	1.2 gb instead of >20gb
 blackburn	madeleine would be happy hah
 blackburn	sonney2k: that is a little fantastic you get it compiled on cygwin
 blackburn	in fact I didn't tested #else branch of #ifdef HAVE_PTHREADS that much
 blackburn	I have much of them in my code
@sonney2k	1.2GB instead of >20GB?
@sonney2k	ahh memory
 blackburn	sonney2k: yes
 blackburn	sonney2k: see you
-!- blackburn [~blackburn@188.168.4.41] has quit [Quit: Leaving.]
--- Log closed Sat Nov 12 00:00:51 2011
