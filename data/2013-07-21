--- Log opened Sun Jul 21 00:00:40 2013
-!- travis-ci [~travis-ci@ec2-23-20-93-32.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Sergey Lisitsyn's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/9309885
-!- travis-ci [~travis-ci@ec2-23-20-93-32.compute-1.amazonaws.com] has left #shogun []
-!- thoralf [~thoralf@37-5-32-132-dynip.superkabel.de] has joined #shogun
 thoralf	Hey.
 lisitsyn	thoralf: hey
 thoralf	lisitsyn: Hey last man standing. ;)
 lisitsyn	thoralf: haha
 lisitsyn	thoralf: I start to think I won't be forgiven for my disappearance
 thoralf	lisitsyn: In which timezone are you right now?  iow: What's your time now?
 lisitsyn	thoralf: +4 utc
 lisitsyn	so 02:38
 thoralf	lisitsyn: Oh.
 thoralf	lisitsyn: You will be forgiven. ;)
 thoralf	0:38 here
 lisitsyn	thoralf: yeah I know berlin timezone now ;)
 lisitsyn	thoralf: what is the weather in berlin?
 lisitsyn	;)
 thoralf	lisitsyn: Have to check my weather app.  One second. ;)
 lisitsyn	haha
 lisitsyn	thoralf: where are you then?
 thoralf	In Berlin. ;)
 thoralf	19 degree at night, that's good.
 thoralf	28 degree yesterday, no rain.
 lisitsyn	thoralf: oh you have that calm day tomorrow
 lisitsyn	I was a bit surprised
 thoralf	What do you mean with "calm day"?  Sunday?
 thoralf	What exactly did surprise you?
 lisitsyn	thoralf: no shops etc
 lisitsyn	thoralf: we had to go to hauptbahnhof :D
 thoralf	I see.
 thoralf	Yes.
 lisitsyn	that's my bad I didn't check such features
 lisitsyn	thoralf: I already asked heiko - have you been to einstein stammhaus?
 lisitsyn	on kurfuerstenstr. just near to einemstr.
 thoralf	I know einstein caf?s, but what's special about this one?
 thoralf	Stammhaus could mean something like "main house".
 thoralf	It's probably bigger than others?
 lisitsyn	thoralf: no idea if it is really special but we liked it a lot
 lisitsyn	where are others?
 lisitsyn	I have seen one near to checkpoint
 lisitsyn	iirc
 lisitsyn	thoralf: it is pretty big indeed and has some garden
 lisitsyn	thoralf: the worst place we've been is 'FBI' near potsdamer platz :D
 lisitsyn	oh sh it is awful
 thoralf	Oh, I was wrong.
 lisitsyn	thoralf: about what?
 thoralf	http://www.einstein-kaffee.de/ is different from Einstein Stammhaus.
 thoralf	Different companies.
 lisitsyn	thoralf: oh I see
 lisitsyn	everything is einstein in germany
 lisitsyn	thoralf: what do they say when asking to leave a train?
 lisitsyn	well I don't really recognize all the words but something similar to einstein agai
 thoralf	Yeah.
 thoralf	You can't protect Einstein.
 thoralf	So everyone uses it.  Sounds good. :)
 lisitsyn	thoralf: but what do they say?
 lisitsyn	in trains
 thoralf	Einsteigen bitte.
 lisitsyn	einsteigen haha!
 lisitsyn	einstein everywhere
 thoralf	Didn't realize it sounds so similar.
 thoralf	But you're right.
 thoralf	Einstein bitte.
 thoralf	Danke.
 lisitsyn	haha
 lisitsyn	thoralf: well I was in train and they said that
 lisitsyn	I tried to understand but what I heard was
 lisitsyn	einstein bitte
 lisitsyn	exactly how you said
 lisitsyn	well not that but einstei***
 thoralf	:)
 lisitsyn	thoralf: we also met ticket control twice
 lisitsyn	:D
 lisitsyn	good we bought fahrausweis
 thoralf	Something different: How do you cast strings to integers in c++?  I know atoi, but that's for (char*).  Do you know something similar?
 lisitsyn	thoralf: just cast it to char*?
 lisitsyn	boost has lexical_cast
 thoralf	Yeah, that's no problem.
 lisitsyn	but atoi(str.c_str()) is ok too
 lisitsyn	thoralf: you may read it to stream
 thoralf	I can do string.c_str() and get (char*).
 lisitsyn	like form a stringstream from your string
 lisitsyn	and then
 lisitsyn	int << str;
 thoralf	lisitsyn: atoi does not handle any error.
 lisitsyn	yeah that's the worst part of C++ I believe
 lisitsyn	not atoi but IO in general
 thoralf	Yeah.
 thoralf	Awful.
 lisitsyn	thoralf: you may try streams thing I think there is a way to customize that stuff
 thoralf	I just re-discovered strtol().
 thoralf	For you information.
 lisitsyn	thoralf: haha I didn't know about it
 thoralf	"a way to customize that stuff" <-- Sounds to complicated for 1:00 am. ;)
 lisitsyn	thoralf: well there is always a way to customize in C++ - that's a nice thing
 lisitsyn	thoralf: for example I was tired with %d etc so I wrote that: https://github.com/lisitsyn/formatting
 thoralf	lol.
 thoralf	python2cpp
 lisitsyn	haha that's pretty neat atoi goes crazy
 lisitsyn	in case of any emergency
 lisitsyn	undefined behaviour in case of any trouble haha really cool
 lisitsyn	I vote for more undefined behaviour
 lisitsyn	the next great step would be random undefined behaviour
 lisitsyn	ok thoralf may the force be with you I am powering myself off ;)
 thoralf	undefined behaviour does not hurt most of the time
 thoralf	but worst cast behaviour would ;)
 thoralf	Pleasant night :)
-!- thoralf [~thoralf@37-5-32-132-dynip.superkabel.de] has quit [Quit: Konversation terminated!]
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
-!- nube [~rho@49.244.111.142] has joined #shogun
 shogun-buildbot	build #399 of nightly_all is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/nightly_all/builds/399
-!- foulwall [~user@2001:da8:215:503:dc0e:86e6:8a74:2a68] has joined #shogun
 shogun-buildbot	build #464 of nightly_default is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/nightly_default/builds/464
 gsomix	woo-hoo, csv reader finally works
 gsomix	but unittests are needed
 gsomix	so, good morning
-!- foulwall [~user@2001:da8:215:503:dc0e:86e6:8a74:2a68] has quit [Remote host closed the connection]
-!- gsomix [~gsomix@80.234.28.235] has quit [Ping timeout: 246 seconds]
-!- nube [~rho@49.244.111.142] has quit [Quit: Leaving.]
-!- gsomix [~gsomix@95.67.172.110] has joined #shogun
-!- iglesiasg [~Fernando@c83-251-227-64.bredband.comhem.se] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@iglesiasg	good morning!
@sonney2k	gsomix, good morning!
@sonney2k	gsomix, if you know that it works than unit test are simple :)
@sonney2k	iglesiasg, did you read thoralfs PR?
@iglesiasg	sonney2k: the one for the makefile? yes
@sonney2k	iglesiasg, what do you think should we use the lib in shogun/src when we run make check-examples etc?
@sonney2k	or the one that is installed?
@iglesiasg	sonney2k: mmm
@sonney2k	besides hmmhh :P
@iglesiasg	sonney2k:  the one in shogun/src makes sense to me too
@iglesiasg	was thinking :)
@sonney2k	ok then please vote for it in the PR
@sonney2k	we should have a way then to check if an install is good too though
@sonney2k	no idea how but we should have this
@iglesiasg	sonney2k: can we give an option to make check-examples?
@iglesiasg	default is the one in shogun/src, if another one is given then use that other one
@sonney2k	iglesiasg, I would assume that one wants to run make check-examples from the src dir
@sonney2k	to check the local code
@sonney2k	and maybe run sth from the installed directory
@iglesiasg	it makes sense
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 942ce10 / src/ (10 files): https://github.com/shogun-toolbox/shogun/commit/942ce10efb90300ad42baba53e3fa174fb0f48a7
 shogun-notifier-	shogun: add cxx11 support
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: - fix compile errors when compiling with -std=c++11
 shogun-notifier-	shogun: - use atomic int for referenced data (no memory overhead + faster)
 shogun-notifier-	shogun: - use templated new's for SGMatrix(-List)
-!- travis-ci [~travis-ci@ec2-107-21-158-112.compute-1.amazonaws.com] has joined #shogun
 travis-ci	[travis-ci] it's Soeren Sonnenburg's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: http://travis-ci.org/shogun-toolbox/shogun/builds/9320717
-!- travis-ci [~travis-ci@ec2-107-21-158-112.compute-1.amazonaws.com] has left #shogun []
-!- gsomix [~gsomix@95.67.172.110] has quit [Remote host closed the connection]
 shogun-buildbot	build #1489 of deb1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb1%20-%20libshogun/builds/1489  blamelist: Soeren Sonnenburg <sonne@debian.org>
-!- iglesiasg [~Fernando@c83-251-227-64.bredband.comhem.se] has quit [Quit: Leaving]
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
-!- nube [~rho@49.244.123.105] has joined #shogun
-!- pickle27 [~Kevin@d67-193-243-174.home3.cgocable.net] has joined #shogun
-!- pickle27 [~Kevin@d67-193-243-174.home3.cgocable.net] has quit [Quit: Leaving]
-!- gsomix [~gsomix@95.67.172.110] has joined #shogun
 gsomix	good evening
 gsomix	another hard day is done
 gsomix	well that weekend is ended
 gsomix	coding session!
-!- nube [~rho@49.244.123.105] has quit [Remote host closed the connection]
-!- nube [~rho@49.244.123.105] has joined #shogun
@sonney2k	lisitsyn, c++11 needed quite a bit of changes w/i shogun
 lisitsyn	sonney2k: what kind of?
 lisitsyn	sonney2k: I have compilation issue with new now
 lisitsyn	I guess that's related
@sonney2k	lisitsyn, new what?
 lisitsyn	sonney2k: operator new
@sonney2k	interesting
 lisitsyn	lib/memory.cpp:83:31: error: declaration of 'void* operator new(size_t)' has a different exception specifier
 lisitsyn	In file included from ../shogun/lib/common.h:67:0,
 lisitsyn	                 from lib/memory.cpp:12:
 lisitsyn	../shogun/lib/memory.h:26:7: error: from previous declaration 'void* operator new(std::size_t) throw (std::bad_alloc)'
@sonney2k	lisitsyn, haha the opposite of what I was getting
@sonney2k	which g++ version?
 lisitsyn	4.7
@sonney2k	here too
@sonney2k	and with c++11 enabled?
 lisitsyn	4.7.3 to be precise
@sonney2k	4.7.2-5 here :D
 lisitsyn	sonney2k: I just reconfigured
@sonney2k	c++11 on?
 lisitsyn	sonney2k: let me check
 lisitsyn	sonney2k: I think it was off  and now on
 lisitsyn	yes now it is enabled for sure
 lisitsyn	and no error
@sonney2k	shogun-buildbot, force build 'rpm1 - libshogun'
 shogun-buildbot	build forced [ETA 7m43s]
 shogun-buildbot	I'll give a shout when the build finishes
@sonney2k	lets try a bot with old gcc
@sonney2k	lisitsyn, it sucks big time that all builds are red due to the change of wiking/Heiko
 gsomix	sonney2k, hey. I'm close to finish with csv. Now implementing some buffered writing stuff. Next I'll add it to CSVFile.
@sonney2k	now we don't know if stuff fails due to their or other changes :/
@sonney2k	gsomix, stop
@sonney2k	gsomix, please send PR's as often as possible
@sonney2k	small pieces
@sonney2k	gsomix, if you can send a daily PR
@sonney2k	with a small but tested change
 gsomix	sonney2k, ok
@sonney2k	lisitsyn, I am currently thinking that we don't need all these K_LOG, K_BESSEL whatever enums in shogun specifying kernel/feature class /type
 lisitsyn	sonney2k: yes of course they are not needed
 gsomix	sonney2k, btw, what do you think about interface for CFile like this? http://pastebin.com/DtwAdZRd
@sonney2k	lisitsyn, how to do it differently?
 gsomix	there is no many usage of CFile in shogun it seems. so, no many changes.
 lisitsyn	sonney2k: let me check where they are used
@sonney2k	gsomix, yes very much appreciated
 lisitsyn	sonney2k: so it is like instanceof here, right?
@sonney2k	lisitsyn, also I would rather want to have a virtual print function of the kernel
@sonney2k	lisitsyn, yeah
@sonney2k	lisitsyn, but with cases ...
@sonney2k	lisitsyn, currently we have a print_kernel function or sth
 shogun-buildbot	build #744 of rpm1 - libshogun is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/rpm1%20-%20libshogun/builds/744
@sonney2k	that does an enum switch over all kernels
@sonney2k	totally crappy
@sonney2k	lisitsyn, hmmhh the buildbot built for some old master revision
@sonney2k	*sigh*
 lisitsyn	sonney2k: well we use RTTI so we can use things like typeid and dynamic cast
@sonney2k	typeid is not helpful though or is it?
 gsomix	sonney2k, wwhere can I store data for unit-tests?
-!- naywhayare [~ryan@spoon.lugatgt.org] has quit [Ping timeout: 264 seconds]
-!- naywhayare [~ryan@128.61.149.136] has joined #shogun
@sonney2k	I mean it returns some random compiler dependent name
-!- shogun-toolbox [~shogun@7nn.de] has quit [Ping timeout: 263 seconds]
--- Log closed Sun Jul 21 21:55:24 2013
--- Log opened Sun Jul 21 21:59:27 2013
-!- shogun-toolbox [~shogun@94.23.237.10] has joined #shogun
-!- Irssi: #shogun: Total of 8 nicks [2 ops, 0 halfops, 0 voices, 6 normal]
-!- Irssi: Join to #shogun was synced in 63 secs
@sonney2k	gsomix, or alternatively just create a string yourself that you write/read to some tmpname
-!- naywhayare [~ryan@spoon.lugatgt.org] has joined #shogun
-!- iglesiasg [~Fernando@83.179.44.135] has joined #shogun
-!- mode/#shogun [+o iglesiasg] by ChanServ
@iglesiasg	good evening guys
@sonney2k	iglesiasg, evening!
@sonney2k	lisitsyn, so who is gonna get rid of the EkernelType FeatureClass/FeatureType?
 lisitsyn	sonney2k: we should decide how first
@sonney2k	lisitsyn, btw do we have more than that?
 lisitsyn	sonney2k: yeah I think there are some more
@sonney2k	lisitsyn, well how I would say a) add rtti check to configure and then use dynamic_cast
-!- thoralf [~thoralf@37-5-32-132-dynip.superkabel.de] has joined #shogun
@sonney2k	thoralf, so do it in $DEITY's name
 thoralf	Hey :)
@sonney2k	thoralf, what is your g++ version?
 thoralf	sonney2k: g++ (Ubuntu/Linaro 4.7.3-1ubuntu1) 4.7.3
 thoralf	Why?
@sonney2k	thoralf, I added a test for c++11 support and now I don't know if stuff works on old compilers (that dont' have it)
 thoralf	Which c++11 features do you want to use?
@sonney2k	thoralf, we are using atomic<int> now
@sonney2k	for SGReferencedData
 thoralf	Would gcc 4.5.2 help?
@sonney2k	thoralf, yes
 thoralf	sonney2k: What shall I do?
@sonney2k	just try to compile
@sonney2k	if it works all good
-!- FSCV [~FSCV@216-230-229-167-colo.oplink.net] has joined #shogun
@iglesiasg	sonney2k, lisitsyn : how should the DOXYGEN_SHOULD_SKIP_THIS be used?
 lisitsyn	iglesiasg: #ifndef DOXYGEN_SHOULD_SKIP_THIS ... your stuff ... #endf
 lisitsyn	*#endif
@iglesiasg	lisitsyn: why ifndef?
 lisitsyn	doxygen scans source files
@iglesiasg	I saw that in some files, but it confuses me
 lisitsyn	and it defines DOXYGEN_SHOULD_SKIP_THIS
 lisitsyn	so when it is defined the thing inside #ifndef is skipped
 thoralf	sonney2k: I'm getting a compile error in memory.h
@iglesiasg	lisitsyn: understood, thanks!
 lisitsyn	thoralf: reconfigure
@iglesiasg	lisitsyn: does it make sense to put it in cpp files? I thought doxygen only scans heades
 thoralf	lisitsyn: It's a fresh clone on a machine that never saw shogun before. ;)
@iglesiasg	headers*
 lisitsyn	thoralf: ohh that's interesting then
 lisitsyn	iglesiasg: no should not
@iglesiasg	lisitsyn: there are some cpp files with it, that's why I wonder
 lisitsyn	iglesiasg: but may be I am wrong
@iglesiasg	who knows
@sonney2k	thoralf, ok so show us the error
@sonney2k	iglesiasg, no only .h files are scanned by doxygen
@iglesiasg	sonney2k: then these #ifndef DOXYGEN_SHOULD_SKIP_THIS ... #endif in cpp files make no sense
@sonney2k	iglesiasg, yes where are those?
@iglesiasg	sonney2k: quite a few places CombinedKernel, tapkee/defines/methods.cpp, shogun_libsvm.cpp, etc
@iglesiasg	grep and see
@sonney2k	lisitsyn, btw I just did some speed comparison of std::vector resize vs. realloc increasing a memory block by 100 ints each time
 lisitsyn	sonney2k: and what you got?
@sonney2k	lisitsyn, std::vector does a lot *less* reallocations it seems but is much slower
 thoralf	lib/memory.cpp: In function 'void* operator new(size_t)':
@sonney2k	as in 20 times slower
 thoralf	lib/memory.cpp:83:31: error: declaration of 'void* operator new(size_t)' throws different exceptions
 lisitsyn	sonney2k: std::vector does copy
 thoralf	../shogun/lib/memory.h:26:7: error: from previous declaration 'void* operator new(size_t) throw (std::bad_alloc)'
 thoralf	lib/memory.cpp:114:33: error: declaration of 'void* operator new [](size_t)' throws different exceptions
 thoralf	../shogun/lib/memory.h:30:7: error: from previous declaration 'void* operator new [](size_t) throw (std::bad_alloc)'
@sonney2k	thoralf, ok let me attempt a fix
 lisitsyn	sonney2k: it doesn't use realloc
@sonney2k	lisitsyn, yeah but how can it be slower
 lisitsyn	well you used std::vector wrong way
 lisitsyn	:D
@sonney2k	it needed 22 reallocs
@sonney2k	and realloc 127
@sonney2k	lisitsyn, v.resize(size)
@sonney2k	?
@sonney2k	how else would you do it?
 lisitsyn	sonney2k: yes that's true I mean it is not well suited for multiple resizes
@sonney2k	lisitsyn, well just 22
@iglesiasg	sonney2k: I think there is one method to change the capacity but not the size
 lisitsyn	yes reserve
@sonney2k	realloc came up with 127 different memory allocs
@iglesiasg	that one, you should go with that one
 lisitsyn	sonney2k: when you do resize you fill with 0
@sonney2k	lisitsyn, that doesn't explain it
 lisitsyn	sonney2k: realloc does no filling
@sonney2k	iglesiasg, lisitsyn how do I specify reserve
@sonney2k	lisitsyn, yes but filling is too cheap
@iglesiasg	sonney2k: vector.reserve(int)
 lisitsyn	sonney2k: it is not that cheap I think
@sonney2k	iglesiasg, and then it will be a reserve per slot?
 lisitsyn	it is not just memcpy
 lisitsyn	err
 lisitsyn	memset
@sonney2k	lisitsyn, well I am using an int
@sonney2k	just 1 million objects
 lisitsyn	sonney2k: it is generic still
 lisitsyn	reserve will be much faster I am sure
@iglesiasg	sonney2k: it will reserve space (called capacity) not changing the effective size, so you can push_back as many times as you wish without going over that capacity and no realloc will be needed
@iglesiasg	lisitsyn: yes, sure
@iglesiasg	I think the concept is similar to the matlab one. Memory pre-allocate, even if you don't know the exact size
 lisitsyn	well if you constantly resize it you may need a list
@sonney2k	iglesiasg, but it is not doing that for future resizes right?
@sonney2k	iglesiasg, I mean consider that I reach the reserve
@sonney2k	then the next resizes are expensive?
 lisitsyn	sonney2k: it resizes when you reach the reserve
@sonney2k	crap then
 lisitsyn	sonney2k: why?
@sonney2k	why not do it the same way like dynarray does?
@sonney2k	lisitsyn, well consider you give it 100k reserve
@sonney2k	but you grow over 1MB
 lisitsyn	not get it
@sonney2k	then 100k ... 1MB is expensive
 thoralf	sonney2k: Just tell me when I can checkout you fix.
@iglesiasg	well then you should be reserving 1MB :)
@sonney2k	it will resize all te time
 lisitsyn	why?
@sonney2k	iglesiasg, but if I don't know?
@sonney2k	thoralf, ok let me do it right away
@iglesiasg	sonney2k: how does dyn array makes it better in that case?
 lisitsyn	I don't see the difference
@iglesiasg	sonney2k: I think that at least you should have a rough estimate. The diff between 100k and 1MB goes beyond a rough estimate
@sonney2k	thoralf, please try!
 thoralf	sonney2k: On develop?
@sonney2k	thoralf, yes
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Soeren Sonnenburg :develop * 3df0dd0 / src/shogun/lib/memory.cpp: https://github.com/shogun-toolbox/shogun/commit/3df0dd08b54f6d268dde752dc9177bf77fba17bb
 shogun-notifier-	shogun: fix compile error occurring with non-c++11 compilers
@sonney2k	lisitsyn, iglesiasg why not give it a granularity like dynarray has? then whenever you reach a block you still have the same slack for the next block
 lisitsyn	again I don't get
 lisitsyn	sonney2k: granularity like how to resize?
 lisitsyn	well I don't like that's hidden too
@sonney2k	lisitsyn, iglesiasg it is still 10 times slower with reserve
@sonney2k	and 0 realloc's
 thoralf	sonney2k: memory.cpp.o did compile.  The complete build will take a few minutes...
 lisitsyn	sonney2k: so what do you do exactly
 lisitsyn	realloc and reserve?
 shogun-buildbot	build #1490 of deb1 - libshogun is complete: Failure [failed test]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb1%20-%20libshogun/builds/1490  blamelist: Soeren Sonnenburg <sonne@debian.org>
@sonney2k	lisitsyn, so it must be initing the memory
 lisitsyn	sonney2k: that's implementation specific I don't know exaclty
 lisitsyn	ahh it says it has linear complexity
 lisitsyn	when reallocation happens
 thoralf	sonney2k: Done. Check the subdirectories for binaries. :)
@sonney2k	thoralf, thanks. now if your make check-examples would run the local stuff we would know if stuff is ok ;)
@sonney2k	lisitsyn, https://gist.github.com/sonney2k/6050121 https://gist.github.com/sonney2k/6050125
 lisitsyn	sonney2k: so you first reserve then resize?
@sonney2k	sure
 lisitsyn	makes no sense to me
 lisitsyn	why?
@sonney2k	?
@sonney2k	don't get it
 lisitsyn	sonney2k: well once you call reserve
@sonney2k	yes?
 lisitsyn	it allocates that 1000000000 memory chunk
 lisitsyn	then once you resize
 lisitsyn	it shrinks it again
 lisitsyn	to the size you provide
@sonney2k	no
@sonney2k	it does 0 reallocations in the background
@sonney2k	it just sets the size to the value I give it
 lisitsyn	ahh yes
@sonney2k	so that part is very cheap
 lisitsyn	then you just fill it with zeros
@sonney2k	but it fills the memory with 0 I guess
 lisitsyn	yes with int()
@sonney2k	with real objects that doesn't matter
@sonney2k	creating those is probably orders of magnitude more expensive
 lisitsyn	yes but you measure different things
@sonney2k	but it is the memory filling
@sonney2k	resizing is still slow though when they have to be done
 lisitsyn	realloc doesn't filling
 lisitsyn	vector does
@sonney2k	lisitsyn, if I fill at the end and don't do reserve() it is still 2 times faster
@sonney2k	btw memset is slower than a for loop clearing the memory
@iglesiasg	lol that about memset is funny
 lisitsyn	what memset implementation is called btw?
 lisitsyn	there is vectorized memset iirc
 lisitsyn	anyway
 lisitsyn	sonney2k: once you do filling it is not 10x already
@sonney2k	lisitsyn, yes it is same speed
@sonney2k	lisitsyn, how do I find which one it is?
 lisitsyn	it could be that std::vector uses new/delete
 lisitsyn	sonney2k: gdb
@sonney2k	lisitsyn, it certainly does
 lisitsyn	sonney2k: it could be the reason to slow things down too
 thoralf	sonney2k: 9 examples are failing.  Details will follow.
 lisitsyn	but 2x is already not worth it
 lisitsyn	I wouldn't use realloc in my code because of that I mean
@sonney2k	lisitsyn, depends where you have to use it.
 lisitsyn	sonney2k: the best example of useless realloc usage is v_array
@sonney2k	thoralf, hmmhh
 lisitsyn	1) it makes covertree a bit faster but it is still slower than balltree most of the times
 thoralf	sonney2k: One second, data files are missing.
 lisitsyn	2) it DIES on windows
 lisitsyn	:D
--- Log closed Mon Jul 22 00:00:27 2013
