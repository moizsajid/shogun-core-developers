--- Log opened Sat Feb 27 00:00:14 2016
-!- besser82 [~besser82@fedora/besser82] has quit [Ping timeout: 250 seconds]
-!- aditya123 [uid148851@gateway/web/irccloud.com/x-myfufpprzirjrmaz] has joined #shogun
 aditya123	Hello all, Is Shogun going for GSoc this year ?
-!- besser82 [~besser82@fedora/besser82] has joined #shogun
-!- mode/#shogun [+o besser82] by ChanServ
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Quit: Leaving.]
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
@HeikoS	lisitsyn: lets chat here
-!- shogun-notifier- [~irker@7nn.de] has joined #shogun
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * b4a3f17 / / (7 files): https://github.com/shogun-toolbox/shogun/commit/b4a3f1761235e5ce75d4b300fdcc60de500afff7
 shogun-notifier-	shogun: hacky draft of added cpp to meta examples and the test build. Only works when make is called single-threaded
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 08c1ab3 / examples/meta/cpp/CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/08c1ab354c9216c61e69aed6cef9be2bb9ba51ca
 shogun-notifier-	shogun: update comment
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * c84cec8 / examples/meta/generator/targets/cpp.json: https://github.com/shogun-toolbox/shogun/commit/c84cec8db0d8d51baab71cd68f61138f5b192a4e
 shogun-notifier-	shogun: remove unnecessary whitespaces
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * c9893bc / examples/meta/generator/targets/cpp.json: https://github.com/shogun-toolbox/shogun/commit/c9893bc10dea7e89b6731385fc2cef5bd1bb3c65
 shogun-notifier-	shogun: make use of some for automatic reference counting
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 9877631 / / (7 files): https://github.com/shogun-toolbox/shogun/commit/98776313ab055473123fe876aecb7161d7e11429
 shogun-notifier-	shogun: Merge pull request #3014 from karlnapf/feature/sphinxdoc_cpp
 shogun-notifier-	shogun:
 shogun-notifier-	shogun: hacky draft of added cpp to meta examples and the test build.
 lisitsyn	ok
 lisitsyn	oops
 lisitsyn	ok
 lisitsyn	ok ok
 lisitsyn	:)
 lisitsyn	let me
@HeikoS	haha
@HeikoS	sorry understood you wrong
 lisitsyn	no worries
 lisitsyn	actually my changes were isolated
 lisitsyn	in this cmakelists
 lisitsyn	should be easy to do
 lisitsyn	HeikoS: meanwhile
 lisitsyn	GPs + multivariate output
 lisitsyn	possible?
@HeikoS	yes
@HeikoS	but not in sg
@HeikoS	lisitsyn: but yorkerlin will do this
@HeikoS	in gsoc
@HeikoS	hopefully
@HeikoS	lisitsyn: in fact, send him an email to ask that. He might do it for simple Gp straight away :)
@HeikoS	lisitsyn: where are shoguns c++ types degfined?
 lisitsyn	HeikoS: what do you mean?
 lisitsyn	which ones?
@HeikoS	float64_t
 lisitsyn	int_64 and stuff?
 lisitsyn	ah
 lisitsyn	I dont remember sorry, grep it ;)
@HeikoS	common.h
 lisitsyn	HeikoS: ok testing it again
 lisitsyn	will push if works
 lisitsyn	HeikoS: bad thing
 lisitsyn	as we are using executable
 lisitsyn	we will have millions of targets
 lisitsyn	in cmake
 lisitsyn	[ 98%] Built target classifier-knn-meta-cpp
 lisitsyn	like that
 lisitsyn	here you go
 shogun-notifier-	shogun: Sergey Lisitsyn :feature/sphinxdoc * 4d87a00 / examples/meta/cpp/CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/4d87a0032d7eb33d7b0e9c6dda800a9f5ad24152
 shogun-notifier-	shogun: Better cmake scripting of cpp meta examples
 lisitsyn	try that
@HeikoS	lisitsyn: trying
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 47f5983 / examples/meta/generator/targets/cpp.json: https://github.com/shogun-toolbox/shogun/commit/47f5983f36bcbcc53f800913230e6173ce1f5a1b
 shogun-notifier-	shogun: add all the vector and matrix types
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * b2b6b8f / examples/meta/src/classifier/knn.sg: https://github.com/shogun-toolbox/shogun/commit/b2b6b8f5b97875843cec6692c22db586def996b6
 shogun-notifier-	shogun: back to RealVector
@HeikoS	lisitsyn: btw I will push the lua thing
@HeikoS	and you can have a look
@HeikoS	doesnt work somehow
 lisitsyn	HeikoS: what doesn't work?
@HeikoS	https://github.com/shogun-toolbox/shogun/pull/3011
 lisitsyn	ok
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc_lua * 15e0010 / / (6 files): https://github.com/shogun-toolbox/shogun/commit/15e0010c410f15849e884dc59fefad5efdae01b4
 shogun-notifier-	shogun: add lua to cookbook, meta examples, and test build. Not yet working.
 lisitsyn	never tried lua
 lisitsyn	:D
 lisitsyn	with shogun
@HeikoS	lisitsyn: same
@HeikoS	but there are some examples
@HeikoS	that work
@HeikoS	but meta example somehow doesnt work
@HeikoS	need to compare and adjust
@HeikoS	but I have no idea
 lisitsyn	ok I will check
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * ffdda55 / examples/meta/generator/targets/cpp.json: https://github.com/shogun-toolbox/shogun/commit/ffdda55c40b30a76c2df445d1e46595df6b0df3d
 shogun-notifier-	shogun: fix copy paste error
@HeikoS	lisitsyn: hey btw I have another thing I need feedback on
@HeikoS	lisitsyn: or more discuss
@HeikoS	so you know we disabled integration testing
 lisitsyn	what is this?
 lisitsyn	yeah
@HeikoS	which is good as it was unmaintainable
@HeikoS	with name changes in classes causing false positives
@HeikoS	but the idea itself, making sure results do not change compared to reference, is good right?
@HeikoS	so what about rather than serialising the instances, we compare vector/matrix valued output only
@HeikoS	to reference
@HeikoS	we could add this to meta language
@HeikoS	and then compare example output across all interfaces to reference result
 lisitsyn	yes
 lisitsyn	this makes sense to me
@HeikoS	and here modifying the class itself does not change the result, as one would only add result from algorithm
@HeikoS	lisitsyn: so then we avoid that things slip through if not covered by unit tests
 lisitsyn	we just need to indicate somehow
 lisitsyn	what to check
@HeikoS	lisitsyn: I would add a SGClass that one can pass vector/matrix
@HeikoS	and it somehow writes it to file
@HeikoS	just as before we pickled things
@HeikoS	and then have a test script that compares these outputs
@HeikoS	and meta language examples will just have to put the "last" vector with the result in there
@HeikoS	lisitsyn: btw your cpp cmake tuning worked
 lisitsyn	I think it shouldn't be the last vector
 lisitsyn	there should be some lang construction
 lisitsyn	like 'checkpoint'
 lisitsyn	that is checked
 lisitsyn	or we can compare just any vector/matrix we get
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 6525dc7 / examples/meta/cpp/CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/6525dc7a86c1ae96fcde1e055f767e12059cb903
 shogun-notifier-	shogun: add comment to explain sergeys trick
@HeikoS	lisitsyn: can you explain?
 lisitsyn	I think we could add a flag to generate.py
@HeikoS	lisitsyn: I think it should be concious decision what is compared
@HeikoS	should not compare everything
@HeikoS	or dont you agree?
 lisitsyn	why not everything?
@HeikoS	lisitsyn: you mean like all vectors and matrices that have been stored in a variable?
 lisitsyn	yes
@HeikoS	lisitsyn: ok
@HeikoS	but then
 lisitsyn	like generate.py --test-across-langs
@HeikoS	it should not eben be in the .sg file
@HeikoS	but just in the generator
 lisitsyn	when enabled the generate.py just takes any value it sees
@HeikoS	lisitsyn: good idea, then we dont have to touch the .sg file if we change the mechanism in there
 lisitsyn	and stores it
@HeikoS	lisitsyn: very good idea
 lisitsyn	ok lets put it to some issue then..
 lisitsyn	before we forget haha
@HeikoS	lisitsyn: I think I rather implement it straight away
@HeikoS	want it before gsoc
@HeikoS	because then
 lisitsyn	yes but I will forget about that in an hour
 lisitsyn	:D
@HeikoS	haha
@HeikoS	lisitsyn: ok feel free to write it down then
 lisitsyn	too many things under control
@HeikoS	lisitsyn: so the generator then just adds a couple of lines at the end of file
 lisitsyn	HeikoS: yes
@HeikoS	lisitsyn: and this is done via SG class?
 lisitsyn	yes
@HeikoS	that stores it to file?
@HeikoS	ok
@HeikoS	and then we creata a python script to compare?
@HeikoS	or how do we do that?
@HeikoS	best would be a matrix/vector equals on it
@HeikoS	so that we can put accuracy in
@HeikoS	where does the comparison happen?
 lisitsyn	I think outputs are collected
 lisitsyn	to some ENV
 lisitsyn	directory
 lisitsyn	then pairwise compared
@HeikoS	comparison happens in?
@HeikoS	python/shogun?
@HeikoS	we store results in ascii?
 lisitsyn	HeikoS: I think it would be best to employ shogun stuff there
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * c220dac / examples/meta/generator/targets/cpp.json: https://github.com/shogun-toolbox/shogun/commit/c220dac005387df3a32fd374198649053a57f1fe
 shogun-notifier-	shogun: use types from Library.i
@HeikoS	lisitsyn: agreed
@HeikoS	lisitsyn: so how does this work?
@HeikoS	when does the check happen?
@HeikoS	lisitsyn: at example runtime?
 lisitsyn	HeikoS: no, after
 lisitsyn	once all are done
 lisitsyn	we compare them
@HeikoS	lisitsyn: ok so them all examples produce a single file?
@HeikoS	with the same name as they are called?
 lisitsyn	I think they store a single file per example in some example directory
 lisitsyn	classifier/knn/python_output
 lisitsyn	HeikoS: what bothers me is the speed of such a thing
 lisitsyn	I expect it to be pretty slow
@HeikoS	lisitsyn: dont know
@HeikoS	I mean it is not real examples
@HeikoS	just APIU
@HeikoS	API
@HeikoS	so few dimensions and few instances
@HeikoS	but sure
 lisitsyn	yes but a lot of comparisons
@HeikoS	lisitsyn: so how to do it?
@HeikoS	binary?
@HeikoS	we have had problems with that in the past
 lisitsyn	HeikoS: some additional python script I guess
@HeikoS	lisitsyn: ugly ;)
@HeikoS	dont tell drwiking
 lisitsyn	why?
@HeikoS	he will be mad
@HeikoS	haha
@HeikoS	no but I think that is the way to go
@HeikoS	how would the script do it?
@HeikoS	what is the format of the files?
 lisitsyn	nah we could just pickle numpy stuff
 lisitsyn	and compare
@HeikoS	since I assume we only want one file per example that collects all vectors?
@HeikoS	lisitsyn: problem is generating pickles from the Shogun class
 lisitsyn	ah yes
 lisitsyn	true
@HeikoS	lisitsyn: I want to avoid using serialisation in there as we havent updated that yet
 lisitsyn	ah ok
@HeikoS	but simply store the vector/matrix itself
 lisitsyn	lets avoid it then
 lisitsyn	easy
-!- travis-ci [~travis-ci@ec2-54-162-136-22.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112227306
-!- travis-ci [~travis-ci@ec2-54-162-136-22.compute-1.amazonaws.com] has left #shogun []
@HeikoS	how?
 lisitsyn	print x.columns
 lisitsyn	...
 lisitsyn	;)
 lisitsyn	HeikoS: I think it is easy to do once it is integrated
 lisitsyn	integration takes much more time
 lisitsyn	once I have some call of a dummy thing in generate.py I could iterate fast
@HeikoS	lisitsyn: ok
@HeikoS	lisitsyn: sure main thing is that we dont need to rouch the .sg files
@HeikoS	so we can start adding examples and do this later
@HeikoS	lisitsyn: in that case, see email :)
@HeikoS	lisitsyn: this and the lua issue, then integration is done
 lisitsyn	ok cool
 lisitsyn	HeikoS: going to take some break now
 lisitsyn	HeikoS: I will check lua once I get back to it
 lisitsyn	then start looking at this integration stuff
 lisitsyn	HeikoS: issue2 could be solved with ctags or clang api
 lisitsyn	maybe grep could be unreliable but would work too
@HeikoS	lisitsyn: sure
@HeikoS	lisitsyn: can you elaborate on issue 2?
@HeikoS	give me a link or so
@HeikoS	ah ctags
@HeikoS	of course
 lisitsyn	we just run ctags
@HeikoS	but we dont have that yet
 lisitsyn	we would need them anyway
@HeikoS	no but then need to fix this first
 lisitsyn	to support other things like auto-sphinx-highlighting
@HeikoS	we will not have them in a while
 lisitsyn	it is very easy to add ctags target
 lisitsyn	why?
@HeikoS	lisitsyn: mmh maybe I dont really understand what you mean
 lisitsyn	we just need to pass ctags file to generate.py
 lisitsyn	and let him understand how to handle that
 lisitsyn	HeikoS: the ctags file is built on every built with a custom target
 lisitsyn	on every build*
@HeikoS	ok and ctags file contains all the includes?
@HeikoS	but wait
@HeikoS	generate.py only sees the .sg file
 lisitsyn	HeikoS: yes you can easily extract path from ctags
 lisitsyn	HeikoS: run 'ctags -R src/shogun'
 lisitsyn	and open 'tags'
 lisitsyn	I like it more than grep because it does some parsing
 lisitsyn	while grep could break at some point
@HeikoS	but what is the input to ctags?
@HeikoS	a cpp file?
@HeikoS	that is not available when generating meta examples
@HeikoS	lisitsyn: maybe I do the grep thing for now as a hack to make things work and we use ctags later?
@HeikoS	lisitsyn: or you do the ctags now, and I sort out the other issues
-!- travis-ci [~travis-ci@ec2-184-73-100-71.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Sergey Lisitsyn's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112228398
-!- travis-ci [~travis-ci@ec2-184-73-100-71.compute-1.amazonaws.com] has left #shogun []
 lisitsyn	HeikoS: but we want to extract locations of shogun files right?
 lisitsyn	they are not generated
@HeikoS	lisitsyn: true
@HeikoS	ah now I get it
@HeikoS	so we run ctags on the shogun src tree
@HeikoS	and then pass stuff
 lisitsyn	yes
@HeikoS	lisitsyn: wanna do that?
 lisitsyn	can do
@HeikoS	but wait
@HeikoS	then generator.py has to look the types up
@HeikoS	so it has a list of types that appear
@HeikoS	ah yes thats fine
 lisitsyn	HeikoS: it already had this thing
 lisitsyn	remember we patched it out
@HeikoS	I dont remember ;)
 lisitsyn	HeikoS: so they were right in the grammar
 lisitsyn	=> impossible to write down non-shogun type
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 2fb7887 / examples/meta/generator/targets/csharp.json: https://github.com/shogun-toolbox/shogun/commit/2fb78874fef2f9b626a379e700f8dad6707c0207
 shogun-notifier-	shogun: put in complex type
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 43c2581 / examples/meta/generator/ (2 files): https://github.com/shogun-toolbox/shogun/commit/43c258164b22e6cbfcbb678cb9f7caa46d7711b1
 shogun-notifier-	shogun: remove whitespaces for nicer visuals in cookbook snippets
@HeikoS	lisitsyn: I think you did that
@HeikoS	but well
@HeikoS	ah yes
@HeikoS	the hand created file
 lisitsyn	so now we are getting back
 lisitsyn	haha
@HeikoS	where he checked whether something is a valid shogun type
 lisitsyn	yes
@HeikoS	that was more to check actually
@HeikoS	so rather than having runtime error, the generator would fail
@HeikoS	it is actually good to have
@HeikoS	so if you add the include magic, that check should be put in too
 lisitsyn	HeikoS: yeah ok
@HeikoS	then one can locally run make meta_examples and catches any typos in shogun class even if no modular interfaces are enabled
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 9a198b5 / examples/meta/cpp/CMakeLists.txt: https://github.com/shogun-toolbox/shogun/commit/9a198b5e580e5bcf5bb12fc62958a516e8237ecd
 shogun-notifier-	shogun: unify names of generated tests
@HeikoS	lisitsyn: https://travis-ci.org/shogun-toolbox/shogun/builds/112228398
@HeikoS	your cmake thing worked on travis
 lisitsyn	good
@HeikoS	lisitsyn: ok so ctags is all yours
@HeikoS	I need to solve this issue 1
@HeikoS	in eht email
@HeikoS	for that need to change the grammar I think
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 8d826fa / doc/cookbook/source/conf.py,doc/cookbook/source/templates/page.html: https://github.com/shogun-toolbox/shogun/commit/8d826fa57eaa2c284cf5672ecaec33f0a26b5f8c
 shogun-notifier-	shogun: add customized tab titles to cookbook and move cpp down the list
-!- travis-ci [~travis-ci@ec2-54-162-136-22.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112228772
-!- travis-ci [~travis-ci@ec2-54-162-136-22.compute-1.amazonaws.com] has left #shogun []
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 546fcb6 / examples/meta/generator/targets/csharp.json: https://github.com/shogun-toolbox/shogun/commit/546fcb63988fa81a78175769f0987e5471646842
 shogun-notifier-	shogun: remove whitespaces in csharp for nicer cookbook visuals
-!- travis-ci [~travis-ci@ec2-54-157-222-14.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112228876
-!- travis-ci [~travis-ci@ec2-54-157-222-14.compute-1.amazonaws.com] has left #shogun []
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Quit: Leaving.]
-!- travis-ci [~travis-ci@ec2-184-73-100-71.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112229236
-!- travis-ci [~travis-ci@ec2-184-73-100-71.compute-1.amazonaws.com] has left #shogun []
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Client Quit]
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
 shogun-notifier-	shogun: Sergey Lisitsyn :feature/sphinxdoc * 992eba6 / CMakeLists.txt,src/shogun/CMakeLists.txt,cmake/FindCtags.cmake: https://github.com/shogun-toolbox/shogun/commit/992eba6bee178bbba2e38bc254d405567111b247
 shogun-notifier-	shogun: Integrate ctags target into the build
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Client Quit]
-!- travis-ci [~travis-ci@ec2-184-73-100-71.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112239514
-!- travis-ci [~travis-ci@ec2-184-73-100-71.compute-1.amazonaws.com] has left #shogun []
-!- travis-ci [~travis-ci@ec2-184-73-100-71.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Sergey Lisitsyn's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112241456
-!- travis-ci [~travis-ci@ec2-184-73-100-71.compute-1.amazonaws.com] has left #shogun []
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has joined #shogun
-!- mode/#shogun [+o HeikoS] by ChanServ
@HeikoS	lisitsyn: jojojo
@HeikoS	just saw the patch
 lisitsyn	HeikoS: yes ctags is being built
 lisitsyn	(if you ask for it)
@HeikoS	cool
@HeikoS	so this should be done when -DENABLE_TESTING=On
@HeikoS	since we only need it for that
 lisitsyn	HeikoS: no, I think it is better this way
@HeikoS	ok
 lisitsyn	it is run if you do 'make ctags'
@HeikoS	ah I see
@HeikoS	btw
@HeikoS	auto test_labels = knn->apply(feats_test); auto output = test_labels->get_values();
 lisitsyn	or if you have some dependency
@HeikoS	auto test_labels = knn->apply(feats_test);
@HeikoS	auto output = test_labels->get_values();
 lisitsyn	yes
@HeikoS	how does this work?
@HeikoS	when there is abiguitiy?
@HeikoS	like in get_values
@HeikoS	might return SGVector or float64_t*
 lisitsyn	how can there be ambiguity?
@HeikoS	when name is overloaded
@HeikoS	then compile error?
 lisitsyn	it doesn't sound possible for me
@HeikoS	lisitsyn: can auto be used for any statement like that? where something is copied?
 lisitsyn	auto can replace basically everything
 lisitsyn	it just infers the type
@HeikoS	great
@HeikoS	so issue 1 of email solved
 lisitsyn	HeikoS: I don't really get get_values example
@HeikoS	just remains issue 2
 lisitsyn	you can't have two methods returning different things
 lisitsyn	but the same name
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 601ea07 / examples/meta/generator/targets/cpp.json: https://github.com/shogun-toolbox/shogun/commit/601ea070cf1adbb335d8113fa1773b8d24018148
 shogun-notifier-	shogun: solve type problem in cpp meta example via 'auto' keyword
 shogun-notifier-	shogun: Heiko Strathmann :feature/sphinxdoc * 73634c5 / examples/meta/src/classifier/knn.sg: https://github.com/shogun-toolbox/shogun/commit/73634c5a452efd95f3af3264892f072cce64161a
 shogun-notifier-	shogun: re-add output as now works
@HeikoS	lisitsyn: ok then, auto is new for me I was confused
 lisitsyn	HeikoS: it is just replaced with the return type of the method
@HeikoS	lisitsyn: yep got it
@HeikoS	preprocessor type of operation
@HeikoS	well good
 lisitsyn	yeah but it is a bit more
@HeikoS	if you solve the includes then we have cpp integrated
 lisitsyn	ok let me try now
@HeikoS	ok I will do some stuff as well
@HeikoS	as fixing lua
@HeikoS	lisitsyn: there is a weird problem
@HeikoS	you know in the conf.py of sphinx
@HeikoS	we define the target languages
 lisitsyn	yeah
@HeikoS	target_languages = (
@HeikoS	        ('python', 'py'),
@HeikoS	        ('octave', 'm'),
@HeikoS	        ('java', 'java'),
@HeikoS	        ('ruby', 'rb'),
@HeikoS	        ('r', 'R'),
@HeikoS	        ('csharp', 'cs'),
@HeikoS	        ('cpp', 'cpp'),
@HeikoS	        )
@HeikoS	so when R appeary before ruby in there
@HeikoS	then in the html, the R-tab shows the ruby example
@HeikoS	must be some string matching
 lisitsyn	wow
@HeikoS	if I swap the order, i.e. ruby before R, everything is fine
@HeikoS	lisitsyn: however, the html file is fine, it contains the R code
@HeikoS	it is just not shown when clicking on the tab
 lisitsyn	HeikoS: can you paste it somewhere?
 lisitsyn	it could be a matter of some wrong identifiers of elements or so
 lisitsyn	just the code
@HeikoS	berfore this patch: https://github.com/shogun-toolbox/shogun/commit/c7991e3f478ed197237dc8fee2352a383fba0638
@HeikoS	it was wrong, after the patch it is ok
@HeikoS	lisitsyn: but the ctags is more important
 lisitsyn	ok
@HeikoS	this is fixed (even though in an ugly way ;) )
-!- travis-ci [~travis-ci@ec2-54-162-136-22.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112254980
-!- travis-ci [~travis-ci@ec2-54-162-136-22.compute-1.amazonaws.com] has left #shogun []
@HeikoS	lisitsyn:  it starts looking really cool
@HeikoS	with all of the languages in :)
 lisitsyn	HeikoS: yes it is great
-!- witness_ [uid10044@gateway/web/irccloud.com/x-ixkpbqmtnnlmldwv] has joined #shogun
@HeikoS	lisitsyn: hows the ctags going?
 lisitsyn	HeikoS: slow, switched to another thing
 lisitsyn	now getting back
 lisitsyn	man this context switching is so bad
 lisitsyn	HeikoS: I start to feel like a cmake ninja
@HeikoS	yeah context switching no good
@HeikoS	lisitsyn: ha!
@HeikoS	yeah
@HeikoS	I finally got the point of cmake over the last few days
@HeikoS	saw this?
@HeikoS	https://github.com/youssef-emad/shogun_notebooks/blob/master/Classification.ipynb
 lisitsyn	oh
 lisitsyn	that's good
@HeikoS	quite nice
 lisitsyn	like in this old days
@HeikoS	I like the notebook, needs some love but I will try to get it merged
@HeikoS	would also be good to have all those in a single plot
 lisitsyn	oh my favourite gaussian naive bayes!
 lisitsyn	that's with what I started to shogun
@HeikoS	for me it was svm
@HeikoS	ah I got a hand on the lua thing now
@HeikoS	think it is wrong environment
@HeikoS	last problem that is!!!
 lisitsyn	haha
 lisitsyn	okie
 lisitsyn	HeikoS: ok I parsed it already now trying to understand this thing
-!- travis-ci [~travis-ci@ec2-54-157-222-14.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112259179
-!- travis-ci [~travis-ci@ec2-54-157-222-14.compute-1.amazonaws.com] has left #shogun []
 lisitsyn	HeikoS: do we need it for any other lang?
 lisitsyn	java?
@HeikoS	lisitsyn: nope
@HeikoS	import org.shogun.*;
 lisitsyn	ok
@HeikoS	and in Python we do explicit, but it doesnt matter and things are the same as for swig
@HeikoS	from modshogun import EuclideanDistance, KNN, MulticlassLabels, CSVFile, RealFeatures
@HeikoS	so doesnt matter
@HeikoS	only c++
@HeikoS	lisitsyn: I think lua typemap might be borken
@HeikoS	overloaded methods do not seem to be translated
 lisitsyn	lua had some issues with overloading
 lisitsyn	iirc
@HeikoS	lisitsyn: yes
@HeikoS	a phew so this can be fixed in hacky way
 lisitsyn	HeikoS: ok I am close
@HeikoS	lisitsyn: same
@HeikoS	lua is merged
@HeikoS	for now avoid calling overloaded methods in meta examples
@HeikoS	which is stupid
@HeikoS	needs fix
@HeikoS	but build works for now
@HeikoS	changed the knn.sg example
-!- 16WAAFTN5 [~travis-ci@ec2-54-157-222-14.compute-1.amazonaws.com] has joined #shogun
-!- 7YUAAFPIP [~travis-ci@ec2-54-157-222-14.compute-1.amazonaws.com] has joined #shogun
 16WAAFTN5	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112260500
-!- 16WAAFTN5 [~travis-ci@ec2-54-157-222-14.compute-1.amazonaws.com] has left #shogun []
 7YUAAFPIP	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112260500
-!- 7YUAAFPIP [~travis-ci@ec2-54-157-222-14.compute-1.amazonaws.com] has left #shogun []
-!- travis-ci [~travis-ci@ec2-54-197-129-30.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112263186
-!- travis-ci [~travis-ci@ec2-54-197-129-30.compute-1.amazonaws.com] has left #shogun []
@HeikoS	lisitsyn: let me know how it goes
 lisitsyn	HeikoS: works
 lisitsyn	polishing
@HeikoS	lisitsyn: will temp. remove lua from build, otherwise the examples are too ugly
 lisitsyn	HeikoS: uhh I tried my best to make it less ugly
 lisitsyn	commit in a few minutes
@HeikoS	lisitsyn: waiting :)
 lisitsyn	here
 lisitsyn	https://github.com/shogun-toolbox/shogun/commit/981fc4b3a03fcec45f50334ddfef31d425d8cf92
 lisitsyn	HeikoS: ^ no irc notify for some reason
 lisitsyn	HeikoS: cookbook fails here
 lisitsyn	warns on regression clustering
 lisitsyn	and wiki link to knn
 lisitsyn	then fails
@HeikoS	lisitsyn:  running
@HeikoS	locally
@HeikoS	it works
@HeikoS	on my machine
@HeikoS	without any modular interfaces on
@HeikoS	lisitsyn: ok gotta go now
@HeikoS	really made some progress today!
-!- travis-ci [~travis-ci@ec2-54-197-129-30.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112269016
-!- travis-ci [~travis-ci@ec2-54-197-129-30.compute-1.amazonaws.com] has left #shogun []
 lisitsyn	yeah
@HeikoS	made some smallish comments in the patch
 lisitsyn	ok
@HeikoS	lisitsyn: hey btw about the some
@HeikoS	isnt there a way to do this automatically?
@HeikoS	without having to write some<CKNN>
@HeikoS	but just CKNN
 lisitsyn	HeikoS: not really
@HeikoS	ok
 lisitsyn	HeikoS: the only alternative is to make them light-weight
@HeikoS	ok next step is the testing
 lisitsyn	I think your last commit broke the build
@HeikoS	why?
 lisitsyn	make[4]: *** No rule to make target `examples/meta/cpp/classifier/knn.cpp', needed by `examples/meta/cpp/CMakeFiles/build_cpp_meta_examples'.  Stop.
@HeikoS	works here
 lisitsyn	did you remove the build and run it all over again?
@HeikoS	uh
@HeikoS	yes
@HeikoS	fixing
@HeikoS	lisitsyn: where to start best with this testing thing?
 lisitsyn	HeikoS: integration?
@HeikoS	yes
 lisitsyn	HeikoS: add a flag to generate.py, make it collect all the variables
@HeikoS	ok cool
 lisitsyn	HeikoS: you want to do something on that as well?
@HeikoS	think we do not need to add anything to json no?
@HeikoS	dont know
@HeikoS	currently cleaning up few things here and there
@HeikoS	I can hepl integrate once prototype is working
@HeikoS	with all the changes in data etc
@HeikoS	but wanted to discuss where to start
@HeikoS	so you add the flat
@HeikoS	what shall I do? what after that?
 lisitsyn	HeikoS: once we have these 'Store(vector);' calls
 lisitsyn	someone would need to implement that store
 lisitsyn	Store(variable_name, variable_value);
 lisitsyn	like that
@HeikoS	lisitsyn: how would it behave?
@HeikoS	like Store(fname)
@HeikoS	s=Store(fname)
@HeikoS	s.store(SGVector v)
@HeikoS	s.store(SGMatrix m)
@HeikoS	s.store(basic_type b)
@HeikoS	?
 lisitsyn	yes
@HeikoS	ok and format?
@HeikoS	ordering?
 lisitsyn	HeikoS: what ordering?
@HeikoS	so the store is a container I guess?
@HeikoS	what file format?
@HeikoS	should be readable from python I guess
@HeikoS	to just csv?
@HeikoS	or python format?
@HeikoS	[[0,1],[2,3]]
@HeikoS	ah I dont want to write this
@HeikoS	rather use a nice csv writer
 lisitsyn	HeikoS: haha
 lisitsyn	HeikoS: I think once it is in
 lisitsyn	it is very easy to do
-!- shogun-notifier- [~irker@7nn.de] has quit [Quit: transmission timeout]
-!- witness_ [uid10044@gateway/web/irccloud.com/x-ixkpbqmtnnlmldwv] has quit [Quit: Connection closed for inactivity]
@HeikoS	you mean once the store is in, it is easy to do the testing?
@HeikoS	lisitsyn: the store can be changed later
@HeikoS	however, we want to finalize it before we start adding test reference files
@HeikoS	lisitsyn: so not sure what is the best way to proceed here
@HeikoS	rely on existing serialization?
@HeikoS	or something else
@HeikoS	serialization is overkill as we only want numerical stuff
@HeikoS	but writing a store for all shogun types is suicide
@HeikoS	lisitsyn: well, lets talk tomorrow or so
@HeikoS	tired :)
@HeikoS	bye
 lisitsyn	HeikoS: hmm do you really want to keep these files?
-!- HeikoS [~heiko@host-92-0-162-192.as43234.net] has quit [Quit: Leaving.]
 lisitsyn	uh
 lisitsyn	ok
 lisitsyn	see you
-!- besser82 [~besser82@fedora/besser82] has quit [Ping timeout: 240 seconds]
-!- travis-ci [~travis-ci@ec2-54-197-129-30.compute-1.amazonaws.com] has joined #shogun
 travis-ci	it's Heiko Strathmann's turn to pay the next round of drinks for the massacre he caused in shogun-toolbox/shogun: https://travis-ci.org/shogun-toolbox/shogun/builds/112281517
-!- travis-ci [~travis-ci@ec2-54-197-129-30.compute-1.amazonaws.com] has left #shogun []
 shogun-buildbot	build #2766 of deb3 - modular_interfaces is complete: Failure [failed test libshogun]  Build details are at http://buildbot.shogun-toolbox.org/builders/deb3%20-%20modular_interfaces/builds/2766  blamelist: Bj?rn Esser <me@besser82.io>
-!- Netsplit *.net <-> *.split quits: @drwiking, lupinix, sonne|work, @ChanServ
-!- Netsplit *.net <-> *.split quits: aditya123
-!- Netsplit *.net <-> *.split quits: rcurtin
-!- Netsplit *.net <-> *.split quits: lisitsyn, octokat, shogun-buildbot, @sonney2k
-!- drwiking_ [~wiking@info2k1.hu] has joined #shogun
-!- Netsplit over, joins: lupinix, shogun-buildbot, lisitsyn
-!- sonne|work1 [~sonnenbu@ip5b414dfc.dynamic.kabel-deutschland.de] has joined #shogun
-!- Netsplit over, joins: aditya123, octokat, @ChanServ, rcurtin, @sonney2k
-!- shogun-toolbox [~shogun@7nn.de] has quit [Ping timeout: 252 seconds]
--- Log closed Sat Feb 27 23:19:32 2016
--- Log opened Sat Feb 27 23:19:40 2016
-!- shogun-toolbox [~shogun@7nn.de] has joined #shogun
-!- Irssi: #shogun: Total of 11 nicks [2 ops, 0 halfops, 0 voices, 9 normal]
-!- Irssi: Join to #shogun was synced in 6 secs
-!- sonney2k [~shogun@7nn.de] has quit [Ping timeout: 240 seconds]
-!- lisitsyn [~lisitsyn@37.139.2.75] has quit [Ping timeout: 264 seconds]
-!- lisitsyn [~lisitsyn@37.139.2.75] has joined #shogun
-!- sonney2k [~shogun@7nn.de] has joined #shogun
--- Log closed Sun Feb 28 00:00:15 2016
