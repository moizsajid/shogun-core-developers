--- Log opened Sat Sep 15 00:00:17 2012
-!- vikram360 [~vikram360@117.192.179.58] has joined #shogun
-!- vikram360 [~vikram360@117.192.179.58] has quit [Ping timeout: 245 seconds]
-!- vikram360 [~vikram360@117.192.177.213] has joined #shogun
-!- vikram360 [~vikram360@117.192.177.213] has quit [Ping timeout: 272 seconds]
-!- vikram360 [~vikram360@117.192.175.124] has joined #shogun
-!- vikram360 [~vikram360@117.192.175.124] has quit [Read error: No route to host]
-!- vikram360 [~vikram360@117.192.183.112] has joined #shogun
-!- vikram360 [~vikram360@117.192.183.112] has quit [Ping timeout: 272 seconds]
-!- vikram360 [~vikram360@117.192.183.112] has joined #shogun
-!- vikram360 [~vikram360@117.192.183.112] has quit [Ping timeout: 268 seconds]
-!- vikram360 [~vikram360@117.192.178.128] has joined #shogun
-!- vikram360 [~vikram360@117.192.178.128] has quit [Ping timeout: 252 seconds]
-!- vikram360 [~vikram360@117.192.187.113] has joined #shogun
-!- vikram360 [~vikram360@117.192.187.113] has quit [Ping timeout: 252 seconds]
-!- vikram360 [~vikram360@117.192.163.23] has joined #shogun
-!- vikram360 [~vikram360@117.192.163.23] has quit [Ping timeout: 246 seconds]
-!- vikram360 [~vikram360@117.192.170.160] has joined #shogun
-!- vikram360 [~vikram360@117.192.170.160] has quit [Ping timeout: 255 seconds]
-!- vikram360 [~vikram360@117.192.166.143] has joined #shogun
-!- vikram360 [~vikram360@117.192.166.143] has quit [Ping timeout: 240 seconds]
-!- vikram360 [~vikram360@117.192.174.67] has joined #shogun
-!- vikram360 [~vikram360@117.192.174.67] has quit [Ping timeout: 260 seconds]
-!- vikram360 [~vikram360@117.192.177.69] has joined #shogun
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
-!- vikram360 [~vikram360@117.192.177.69] has quit [Ping timeout: 272 seconds]
-!- vikram360 [~vikram360@117.192.177.69] has joined #shogun
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Quit: leaving]
-!- blackburn [~blackburn@37.61.181.173] has joined #shogun
-!- vikram360 [~vikram360@117.192.177.69] has quit [Ping timeout: 272 seconds]
-!- vikram360 [~vikram360@117.216.146.194] has joined #shogun
 CIA-36	shogun: Sergey Lisitsyn master * r6697048 / (4 files in 4 dirs): Turned SGStringList into the object derived from the SGReferencedData. Closes #772 - http://git.io/iAGHlw
-!- vikram360 [~vikram360@117.216.146.194] has quit [Ping timeout: 252 seconds]
-!- vikram360 [~vikram360@117.192.164.60] has joined #shogun
-!- vikram360 [~vikram360@117.192.164.60] has quit [Ping timeout: 252 seconds]
-!- vikram360 [~vikram360@117.192.175.32] has joined #shogun
-!- vikram360 [~vikram360@117.192.175.32] has quit [Ping timeout: 244 seconds]
-!- vikram360 [~vikram360@117.192.173.160] has joined #shogun
 shogun-buildbot_	build #533 of deb3 - modular_interfaces is complete: Failure [failed test python_modular]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/533  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
-!- vikram360 [~vikram360@117.192.173.160] has quit [Ping timeout: 244 seconds]
-!- vikram360 [~vikram360@117.216.149.198] has joined #shogun
 CIA-36	shogun: Sergey Lisitsyn master * r4217b41 / src/shogun/features/StringFeatures.cpp : Fix for changes in #772 - memory-wise correct get_features in StringFeatures - http://git.io/daCy6w
 CIA-36	shogun: Sergey Lisitsyn master * re8ea95e / (8 files in 3 dirs): Made TRON independent of BLAS. Closes #783. - http://git.io/j6nM8g
 shogun-buildbot_	build #419 of bsd1 - libshogun is complete: Failure [failed compile]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/419  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
 shogun-buildbot_	build #420 of bsd1 - libshogun is complete: Success [build successful]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/bsd1%20-%20libshogun/builds/420
 CIA-36	shogun: Sergey Lisitsyn master * rfabddb3 / src/shogun/transfer/multitask/MultitaskKernelMaskPairNormalizer.h : Added missed includes in multitask mask pair normalizer - http://git.io/LjK32Q
 shogun-buildbot_	build #534 of deb3 - modular_interfaces is complete: Failure [failed test lua_modular]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/534  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
 shogun-buildbot_	build #535 of deb3 - modular_interfaces is complete: Failure [failed test lua_modular]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/535  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has joined #shogun
 shogun-buildbot_	build #536 of deb3 - modular_interfaces is complete: Failure [failed test lua_modular]  Build details are at http://www.shogun-toolbox.org/buildbot/builders/deb3%20-%20modular_interfaces/builds/536  blamelist: Sergey Lisitsyn <lisitsyn.s.o@gmail.com>
-!- heiko1 [~heiko@host86-180-223-130.range86-180.btcentralplus.com] has joined #shogun
-!- blackburn1 [~blackburn@188.168.2.61] has joined #shogun
-!- blackburn [~blackburn@37.61.181.173] has quit [Ping timeout: 272 seconds]
 blackburn1	heiko1: hey, did you solve that problem
 blackburn1	?
 heiko1	blackburn, hi I am actually just working on it
 blackburn1	heiko1: the reason is temp(); instead of temp;
 heiko1	SHOGUN is missing a datastructure for SGReferenced btw
 blackburn1	if you didn't read my msg
 blackburn1	what do you mean?
 heiko1	something which is easy to serialise
 heiko1	e.g. a list of vectors
 blackburn1	collection of sgreferenceddata?
 heiko1	yeah
 heiko1	map for example
 heiko1	why did we not inherit from CSGObject ?
 blackburn1	different kind of reference counting
 heiko1	yeah
 heiko1	but its adding difficulkties
 blackburn1	it is kind of proxy for object like sgobject
 heiko1	since all data structures with reference counting do not work for vector/matrix
 heiko1	also serialisation does not work
 heiko1	(I mean when in CMap for example)
 heiko1	anyway
 heiko1	Ill continue on the label stuff now
 blackburn1	heiko1: I have no idea how can we generalize that
 heiko1	for example via a global base class
 blackburn1	what is the interface?
 heiko1	one single interface for referenced data might be good
 heiko1	and for serialisation
 heiko1	is there any reason why the SGReferenced structures do not inherit from sgobject? except for the different reference counting?
 blackburn1	I see no way actually - refcounting works in totally different way
 blackburn1	isn't that enough? :)
 blackburn1	we never destroy sgobject during passing it around
 heiko1	true
 blackburn1	sgreferenceddata is destroyed all the time
 heiko1	but if we use these smart pointers ....
 heiko1	that are planned for sgobjects?
 heiko1	anyway thats not for now, I was just wondering
 blackburn1	yeah that would work then probably
 blackburn1	btw how smart pointer -> works
 blackburn1	do you know?
 heiko1	no :)
 blackburn1	it is overloaded to provide method from proxy class?
 blackburn1	argh s/proxy/main
 heiko1	I guess I find it just a bit irritating to have two systems
 heiko1	since all structures do not work anymore
 heiko1	and serial also doesnt
 heiko1	well, I will do this label stuff first :)
 blackburn1	sg ref / unref removing sounds like a huge work
 heiko1	indeed
 blackburn1	heiko1: okay I have kind of plan
 blackburn1	probably it won't be such a huge change
 blackburn1	well can be done automatically partially
 blackburn1	we could separate two classes
 blackburn1	SGObject -> SGObject, SGObjectImpl
 blackburn1	bad thing is that we double number of classes
 blackburn1	SGObject just transparently provides same interface objectimpl provides
 heiko1	dont know ....
 heiko1	I will continue on the labels first
 blackburn1	heiko1: did you get my idea?
 heiko1	actually there might be some problems with that already, which should be solved before anything new is done
 heiko1	I get the idea yes
 blackburn1	SGObject is a smart pointer actually
 blackburn1	I want to try that
 heiko1	hey blackburn
 heiko1	how would you solve this label thing, it gives me a bit of a headache
 blackburn1	hello, it's been a while
 blackburn1	:D
 heiko1	lol :D
 blackburn1	how are you?
 blackburn1	okay okay
 heiko1	I want to have a map of SGVectors
 blackburn1	what is the problem?
 heiko1	and a "current" SGVector
 heiko1	this current one has to be a pointer
 blackburn1	vectors are keys or vectors are values?
 heiko1	otherwise changes are not made in the vectors in the map
 heiko1	vectors are values
 heiko1	keys are strings
 blackburn1	vector-values works already I think
 blackburn1	what is the problem?
 heiko1	pointers on SGVectors
 heiko1	I would like to avoid these
 blackburn1	ehh why?
 heiko1	they cannot be handled by shogun
 heiko1	we cannot even register them as parameters
 blackburn1	yes, we register pointers to contents
 heiko1	If we use them inside implementations, its fine but if they are class members things get hairy
 heiko1	yes we register these pointers
 heiko1	but this is not the same thing
 heiko1	since not the vector should be stored but the pointer
 blackburn1	what is the problem with CMap<const char*, SGVector<float64_t> >?
 heiko1	thats cool
 heiko1	but how to store the "current" vector
 heiko1	?
 blackburn1	why do you need that "current" vector?
 heiko1	in order to access
 heiko1	by set_value /confidence method
 blackburn1	we don't care much about concrete instance
 blackburn1	pointer to data stays the same anyway
 heiko1	ok
 heiko1	so if I store the current under SGVector
 heiko1	without pointer
 blackburn1	well even if it is a different instance
 blackburn1	if there is no memory leak or anything
 blackburn1	you will have the same data underlying
 heiko1	I do this, but it doesnt work, let me check my implementation
 blackburn1	in general we should just never use pointers to vectors
 blackburn1	because sgvector is a smart pointer to pointer
 blackburn1	to data pointer I mean
 blackburn1	sgvector1 -> data <- sgvector2
 blackburn1	heiko1: if you change any of them ^ you change both
 heiko1	ah
 heiko1	ok
 heiko1	here is the problem
 heiko1	there is a method set_values
 heiko1	set_values(SGVector)
 heiko1	which replaces the current vector by the given one
 heiko1	but if I put this in the "current" vector, the vector in the map does not get the array
 blackburn1	what is the class that method is of?
 heiko1	CLabels
 blackburn1	aahh
 heiko1	set_confidences .. I change the name
 blackburn1	I've got the problem you met
 heiko1	I guess I just have to change in the map also ....
 heiko1	let me try
 blackburn1	yes but that's not so cool now
 heiko1	the vector data is initialised with NULL in the beginning
 blackburn1	we would have to handle everything twice
 heiko1	so how to replace this null pointer by actual data
 heiko1	I know
 heiko1	this is the problem
 heiko1	whenever the current vector is changed (by means of data array is replaced by another one) this problem appeats
 heiko1	appears
 blackburn1	yeah..
 heiko1	using pointers would avoid this, but thats ugly
 blackburn1	yeah pointers are transparent
 blackburn1	you are happy anyway - no need to handle that
 blackburn1	but now we are not happy :D
 heiko1	yeah I mean, this pointers to SGVector screws a lot of things
 heiko1	and btw also, CMap with SGVector as value is not serialisable
 heiko1	so adding this would break CLabels being serializable, which sucks
 heiko1	man, maybe its better to just add another vector
 heiko1	and having two - fixed
 blackburn1	heh
 heiko1	or three
 heiko1	scores, confidences, binary
 blackburn1	well I've added a vector of vectors to multiclass labels
 heiko1	vector of vectors?
 heiko1	thats not serialisable
 heiko1	perse
 blackburn1	yeah to store scores
 heiko1	:(
 blackburn1	yeah I know
 heiko1	having one superclass would avoid all this
 heiko1	having data-structures for all objects we use in shogun
 heiko1	that would simplify everything so much
 heiko1	just another CSGObject derived class for vectors and matrices
 heiko1	then we could just store CDynamicObjectArrays of vectors
 heiko1	and done
 heiko1	and SGVector would just be for numerical data
 blackburn1	we would need to change pretty much for that
 heiko1	yeah
 heiko1	:(
 heiko1	but the Labels system as we want it wont work with the current approach
 heiko1	also, this non-serialisation is not good
 heiko1	and having no data-structures for SGReferenced also sucks
 heiko1	maybe we should talk with the others about that.
 heiko1	Ill wait with the labels until this is sorted
 blackburn1	well I could try to make sgobject a smart pointer
 blackburn1	however - can you explain how that would work?
 heiko1	no :D
 blackburn1	I mean why that would make serialization work
 heiko1	these two classes also are a bit strange
 heiko1	serialisation just requires everything to be registered
 heiko1	and that datastructures either get SGObjects or numerical data
 heiko1	anything else wont work
 heiko1	also I think for reasons of simplicity we should have one base class for everything
 heiko1	and not two kinds of objects
 blackburn1	now they are conceptually different
 blackburn1	so nothing to do with it yet
 heiko1	nothing to do with it yet? what does that mean?
 blackburn1	argh I forgot it is kind of phrase
 blackburn1	I mean we can't do nothing :)
 blackburn1	can do nothing!
 blackburn1	argh!
 heiko1	yes
 heiko1	would it be so bad to treat vectors/matrices as the rest of shogun objects? We would have to use SG_REF all the time right?
 blackburn1	yes
 blackburn1	way too bad, current way is so cool
 heiko1	indeed
 heiko1	ok, lets say things stay like this
 heiko1	what about data structures?
 heiko1	and what about these pointers?
 heiko1	maybe I should try to do that for Labels and then see
 heiko1	I mean use a SGVector pointer for the current one and just add that to the parameter framework
-!- vikram360 [~vikram360@117.216.149.198] has quit [Ping timeout: 255 seconds]
 blackburn1	one way I see
 blackburn1	is to add a method
 blackburn1	that pick ups updated value from class to the map
 blackburn1	so each time you change labels or confidences
-!- vikram360 [~vikram360@117.192.170.32] has joined #shogun
 blackburn1	you call some method that does update
 heiko1	this would have to be added to every change
 heiko1	what about the pointer?
 heiko1	the map would break serialisation anyway :)
 heiko1	CMap <char*, SGVector> I mean
 blackburn1	why?
 blackburn1	if you forgot to fire that 'changed' event you will serialize old vector
 blackburn1	nothing really bad
 heiko1	CMap does not support serialisation
 heiko1	ok I mean I could just two lists instead
 heiko1	these are serialisable
 heiko1	but not if type is SGVector
 heiko1	also, if one forget to fire change, then changing the "current" vector breaks things
 blackburn1	oh well
 heiko1	maybe pointer solution is best
 heiko1	and having two lists instead of a map
 heiko1	access to current values changes everywhere but tihhs is easy to sport since compile errors on change
 heiko1	I gotta go now, lets discuss later
-!- heiko1 [~heiko@host86-180-223-130.range86-180.btcentralplus.com] has left #shogun []
 blackburn1	okay
-!- n4nd0 [~nando@s83-179-44-135.cust.tele2.se] has quit [Quit: leaving]
--- Log closed Sun Sep 16 00:00:17 2012
